/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "Block.h"
#include "Player.h"
#include "Map.h"
#include"Bitmaps.h"
#include "Mob.h"
#include"stdio.h"
#include"string.h"
#include "Spike.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
 // creating a map//
Map map1(Bitmap_map);

// creating the player//
Player boxi(10,4,8,8);

//creating blocks//
Block b1(1,52);
Block b2(11,52);
Block b3(21,52);

Block b4(41,42);//was 48
Block b5(41,52);

Block b6(71,42);
Block b7(71,52);

Block b8(91,42);

Block b9(117,42);
Block b10(117,52);

//creating Mobs//
Mob m1(95,54);

//creating spikes//
Spike s1(51,56);
Spike s2(56,56);
Spike s3(61,56);
Spike s4(66,56);




//defines
#define true 1
#define false 0
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Jump(Player &player,int &jump_height,int &barrier);
void Gravitation(Player &player,int ground_level,int &barrier);
void Check_buttons(Player &player,int barrier);
void Game(Player player);
void Display_Over_Screen();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void Jump(Player &player,int &jump_height,int &barrier){

	 if((jump_height>0)&&(barrier==true))
	 {
		player.pos_y--;
	    jump_height--;   /////////////////////////////////////////////////////
		player.pos_y--; /* if gravitation is off we can jump on Jump_height */
		jump_height--; /*     in jump we are losing Jump_height             */
		barrier=true; /*    when we jump we do not need gravitation         */
                     /////////////////////////////////////////////////////////
		}
	 if(jump_height==0){
		 barrier=false;
	 }
	 }

/*---------------------gravitation function-----------------------------------*/
	void Gravitation(Player &player,int ground_level,int &barrier){

	  player.generateHIT();//generating actual hit box of player

	 if(player.BHIT>=ground_level){
		barrier=true;// if player hit the ground
	 }

	if(barrier==false){ // if player is in free air we are falling fastest
		player.pos_y++;
		player.pos_y++;
	 }
	}

/*-----------checking buttons-----------------*/
	void Check_buttons(Player &player,int barrier){
		player.generateHIT();//generating actual hit box of player

		if((HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0)&&(barrier==true))//jumping
		{
          if((Jump_height==0)&&(barrier==true)){//checking if player has end his jump
        	  Jump_height=18;
          }
		}

		if(HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin)==0){ //go into right side
			player.pos_x++;
		}
		if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin)==0){//go into left side
			player.pos_x--;
		}
		}
/*------GAME OVER SCREEN--------*/
	void Display_Over_Screen(){//displaying a 128x64 game over bitmap function
		ssd1306_Fill(Black);
		ssd1306_DrawBitmap(0, 0, Bitmap_game_over, 128, 64, White);
		ssd1306_UpdateScreen();
		HAL_Delay(2000);
	}

/*----------GAME LOOP------------*/
	void Game(Player player){
	if(player.Player_live>0){//if player is alive

 //
		//--------GAME INTS------------//
		int ground_level=62;
		//ints for Jump
		int Jump_height;

		//ints for gravitation
		int barrier;
 //---------DISPLAYING LAST FRAME-----------//
		//display all objects//
		  ssd1306_Fill(Black);
		  boxi.Display_Player_hearts();
		  map1.Display_map();
		  b1.Display_Block();
		  b2.Display_Block();
		  b3.Display_Block();
		  b4.Display_Block();
		  b5.Display_Block();
		  b6.Display_Block();
		  b7.Display_Block();
		  b8.Display_Block();
		  b9.Display_Block();
		  b10.Display_Block();
		  m1.Display_mob();
		  s1.Display_Spike();
		  s2.Display_Spike();
		  s3.Display_Spike();
		  s4.Display_Spike();
		  boxi.Display_Player();

		  //updating the screen//
		  ssd1306_UpdateScreen();

 //----------MOVING BLOCKS------------------//
		  b8.Move_Block(81, 117, barrier,boxi);

 //----------MOVING MOBS-------------------//
		  m1.Move_mob(83, 116);

 //--------CHECKING BARRIERS----------------//
		  m1.check(boxi);
		  s1.Check(barrier, boxi);
		  s2.Check(barrier, boxi);
		  s3.Check(barrier, boxi);
		  s4.Check(barrier, boxi);

		  b1.Check(barrier,boxi);
		  b2.Check(barrier,boxi);
		  b3.Check(barrier,boxi);
		  b4.Check(barrier,boxi);
		  b5.Check(barrier,boxi);
		  b6.Check(barrier,boxi); //boxi is player and game is checking if he is on block ....
		  b7.Check(barrier,boxi);
		  b8.Check(barrier,boxi);
		  b9.Check(barrier,boxi);
		  b10.Check(barrier,boxi);

		  //----------GRAVITATION FUNCTION----------//
		  Gravitation(boxi, ground_level,barrier);

		  //--------BUTTONS CHECKING ---------------//
	      Check_buttons(boxi,barrier);

	      //----------JUMPING FUNCTION--------------//
	      Jump(boxi,Jump_height,barrier);

		  //-----------LED TEST--------------//
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
	else {
		Display_Over_Screen();
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  	  //Initialize  of libraries//
  	  ssd1306_Init();

  	  //fill black the display
  	  ssd1306_Fill(Black);
  	  ssd1306_UpdateScreen();



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Game(boxi);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
