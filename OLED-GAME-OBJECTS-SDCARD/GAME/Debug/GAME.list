
GAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005360  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001acc  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007004  08007004  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800700c  0800700c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800701c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  200000c8  080070e4  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  080070e4  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014682  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380a  00000000  00000000  0003477a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00038f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021768  00000000  00000000  00039d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001649e  00000000  00000000  0005b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbf83  00000000  00000000  0007197e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  0012d954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000c8 	.word	0x200000c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005520 	.word	0x08005520

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000cc 	.word	0x200000cc
 8000214:	08005520 	.word	0x08005520

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_ZN5BlockC1EiiiiPKhii>:
#include "Block.h"
#include"Player.h"
#define true 1
#define false 0

Block::Block(int x, int y,int w,int h,const unsigned char* b,int ml,int mr) {//writing primary data to spike object
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <_ZN5BlockC1EiiiiPKhii+0x4c>)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
	width=w;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	60da      	str	r2, [r3, #12]
	height=h;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	611a      	str	r2, [r3, #16]
    bitmap=b;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
    moveL=ml;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6a3a      	ldr	r2, [r7, #32]
 8000552:	619a      	str	r2, [r3, #24]
    moveR=mr;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000558:	615a      	str	r2, [r3, #20]
}
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	08005540 	.word	0x08005540

0800056c <_ZN5Block11generateHITEv>:
void Block::generateHIT(){ // it generates the hit box for this block
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	441a      	add	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZN5Block13Display_BlockEv>:
void Block::Display_Block(){
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	b2d8      	uxtb	r0, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	b2d9      	uxtb	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	b2dc      	uxtb	r4, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2501      	movs	r5, #1
 80005d2:	9501      	str	r5, [sp, #4]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4623      	mov	r3, r4
 80005d8:	f001 ffec 	bl	80025b4 <ssd1306_DrawBitmap>

}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bdb0      	pop	{r4, r5, r7, pc}

080005e4 <_ZN5Block5CheckERiR6Player>:

void Block::Check(int &barrier,Player &player){ // it checks if player hit this block (int b is int barrier for gravitation function)
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
player.generateHIT();
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 fc65 	bl	8000ec0 <_ZN6Player11generateHITEv>
generateHIT();
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f7ff ffb8 	bl	800056c <_ZN5Block11generateHITEv>
if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a1a      	ldr	r2, [r3, #32]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	429a      	cmp	r2, r3
 8000606:	dd0e      	ble.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	429a      	cmp	r2, r3
 8000612:	da08      	bge.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800061c:	429a      	cmp	r2, r3
 800061e:	d102      	bne.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
barrier=1; //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
}

if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of block
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6a1a      	ldr	r2, [r3, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	429a      	cmp	r2, r3
 8000630:	db2b      	blt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800063a:	429a      	cmp	r2, r3
 800063c:	db05      	blt.n	800064a <_ZN5Block5CheckERiR6Player+0x66>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	429a      	cmp	r2, r3
 8000648:	dd0b      	ble.n	8000662 <_ZN5Block5CheckERiR6Player+0x7e>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	429a      	cmp	r2, r3
 8000654:	dc19      	bgt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065e:	429a      	cmp	r2, r3
 8000660:	dd13      	ble.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a1a      	ldr	r2, [r3, #32]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066a:	429a      	cmp	r2, r3
 800066c:	da0d      	bge.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60da      	str	r2, [r3, #12]

  if(is_block_moving==true){//because of this "if" moving block can move the moving player
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d104      	bne.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60da      	str	r2, [r3, #12]
  }

}

if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of block
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	429a      	cmp	r2, r3
 8000694:	dc2b      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069e:	429a      	cmp	r2, r3
 80006a0:	db05      	blt.n	80006ae <_ZN5Block5CheckERiR6Player+0xca>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dd0b      	ble.n	80006c6 <_ZN5Block5CheckERiR6Player+0xe2>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dc19      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dd13      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	69da      	ldr	r2, [r3, #28]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6a1b      	ldr	r3, [r3, #32]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dd0d      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]

 if(is_block_moving==true){//because of this "if" moving block can move the moving player
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d104      	bne.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60da      	str	r2, [r3, #12]
 }

 }
//TODO write function for hiting bottom of block
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZN5Block10Move_BlockEiiRiR6Player>:

void Block:: Move_Block(int point_A,int point_B,int &barrier,Player &player){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
    is_block_moving=true;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
	if(moveR==true){   //moving the block form point A to point B
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d104      	bne.n	800071c <_ZN5Block10Move_BlockEiiRiR6Player+0x26>
	   pos_x++;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	605a      	str	r2, [r3, #4]
	  }
	if(moveL==true){   //moving the block form point B to point A
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d104      	bne.n	800072e <_ZN5Block10Move_BlockEiiRiR6Player+0x38>
	   pos_x--;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	605a      	str	r2, [r3, #4]
	  }
	if(pos_x==point_A){//check if block hit the point_A
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	429a      	cmp	r2, r3
 8000736:	d105      	bne.n	8000744 <_ZN5Block10Move_BlockEiiRiR6Player+0x4e>
	   moveL=false;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
	   moveR=true;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
	  }
	if(RHIT==point_B){//check if block hit the ponit_B
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	d105      	bne.n	800075a <_ZN5Block10Move_BlockEiiRiR6Player+0x64>
	   moveL=true;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
	   moveR=false;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
 }
	//----moving character-----// /*<-- the player can ride on block (be on him and move with him without doing anything)*/
	player.generateHIT();
 800075a:	69b8      	ldr	r0, [r7, #24]
 800075c:	f000 fbb0 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff ff03 	bl	800056c <_ZN5Block11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	6a1a      	ldr	r2, [r3, #32]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	429a      	cmp	r2, r3
 8000770:	dd20      	ble.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	429a      	cmp	r2, r3
 800077c:	da1a      	bge.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	429a      	cmp	r2, r3
 8000788:	d114      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	barrier=1;  //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	if(moveR==true){
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d104      	bne.n	80007a2 <_ZN5Block10Move_BlockEiiRiR6Player+0xac>
		player.pos_x++;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	60da      	str	r2, [r3, #12]
	}
	if(moveL==true){
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d104      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	    player.pos_x--;
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	60da      	str	r2, [r3, #12]
	}
  }
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZN5Block15Change_positionEii>:
void Block::Change_position(int x,int y){
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	pos_x=x;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	605a      	str	r2, [r3, #4]
	pos_y=y;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_ZN5BlockD1Ev>:
Block::~Block() {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <_ZN5BlockD1Ev+0x1c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	08005540 	.word	0x08005540

08000800 <_ZN5BlockD0Ev>:
Block::~Block() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
}
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ffe9 	bl	80007e0 <_ZN5BlockD1Ev>
 800080e:	2134      	movs	r1, #52	; 0x34
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f004 fdf3 	bl	80053fc <_ZdlPvj>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_ZN4CoinC1EiiiiPKhi>:
#include <Coin.h>
#define true 1
#define false 0


Coin::Coin(int x,int y,int w,int h,const unsigned char* b,int icl){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <_ZN4CoinC1EiiiiPKhi+0x48>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	60da      	str	r2, [r3, #12]
	pos_y=y;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]
	width=w;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	615a      	str	r2, [r3, #20]
	height=h;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	619a      	str	r2, [r3, #24]
	bitmap=b;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
	is_coin_alive=icl;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a3a      	ldr	r2, [r7, #32]
 8000856:	609a      	str	r2, [r3, #8]

}
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	08005550 	.word	0x08005550

0800086c <_ZN4Coin5CheckER6PlayerRi>:

void Coin::Check(Player &player,int &map){//checking if player(boxi) grab this coin
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
if(is_coin_alive==true){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 8084 	bne.w	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
is_coin_gathered=false;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
	player.generateHIT();
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f000 fb19 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f000 f87f 	bl	8000992 <_ZN4Coin11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	6a1a      	ldr	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	dd16      	ble.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6a1b      	ldr	r3, [r3, #32]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	da10      	bge.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d10a      	bne.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
	    player.Player_coins++;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	609a      	str	r2, [r3, #8]
	    //map++;
	   is_coin_alive=false;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	   is_coin_gathered=true;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2201      	movs	r2, #1
 80008cc:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of coin
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	6a1a      	ldr	r2, [r3, #32]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	db28      	blt.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	429a      	cmp	r2, r3
 80008e4:	db05      	blt.n	80008f2 <_ZN4Coin5CheckER6PlayerRi+0x86>
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dd0b      	ble.n	800090a <_ZN4Coin5CheckER6PlayerRi+0x9e>
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dc16      	bgt.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	429a      	cmp	r2, r3
 8000908:	dd10      	ble.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	6a1a      	ldr	r2, [r3, #32]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	429a      	cmp	r2, r3
 8000914:	da0a      	bge.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
	    player.Player_coins++;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	609a      	str	r2, [r3, #8]
	    //map++;
	    is_coin_alive=false;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
	    is_coin_gathered=true;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of coin
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	429a      	cmp	r2, r3
 8000936:	dc28      	bgt.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000940:	429a      	cmp	r2, r3
 8000942:	db05      	blt.n	8000950 <_ZN4Coin5CheckER6PlayerRi+0xe4>
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094c:	429a      	cmp	r2, r3
 800094e:	dd0b      	ble.n	8000968 <_ZN4Coin5CheckER6PlayerRi+0xfc>
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	429a      	cmp	r2, r3
 800095a:	dc16      	bgt.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000964:	429a      	cmp	r2, r3
 8000966:	dd10      	ble.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	429a      	cmp	r2, r3
 8000972:	dd0a      	ble.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
	    player.Player_coins++;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	609a      	str	r2, [r3, #8]
	    //map++;
	    is_coin_alive=false;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	    is_coin_gathered=true;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2201      	movs	r2, #1
 8000988:	605a      	str	r2, [r3, #4]

	 }
}
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_ZN4Coin11generateHITEv>:

void Coin::generateHIT(){ //generates hit box of coin
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	441a      	add	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691a      	ldr	r2, [r3, #16]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	441a      	add	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_ZN4Coin12Display_CoinEv>:

void Coin::Display_Coin(){//if coin is alive can be displayed
 80009d2:	b5b0      	push	{r4, r5, r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af02      	add	r7, sp, #8
 80009d8:	6078      	str	r0, [r7, #4]
	if(is_coin_alive==true){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d113      	bne.n	8000a0a <_ZN4Coin12Display_CoinEv+0x38>
		ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	b2d8      	uxtb	r0, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	b2d9      	uxtb	r1, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	b2dc      	uxtb	r4, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2501      	movs	r5, #1
 8000a00:	9501      	str	r5, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4623      	mov	r3, r4
 8000a06:	f001 fdd5 	bl	80025b4 <ssd1306_DrawBitmap>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdb0      	pop	{r4, r5, r7, pc}

08000a12 <_ZN4Coin15Change_positionEii>:
void Coin::Change_position(int x,int y){//repositioning
 8000a12:	b480      	push	{r7}
 8000a14:	b085      	sub	sp, #20
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <_ZN4CoinD1Ev>:
Coin::~Coin() {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <_ZN4CoinD1Ev+0x1c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	08005550 	.word	0x08005550

08000a58 <_ZN4CoinD0Ev>:
Coin::~Coin() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
}
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ffe9 	bl	8000a38 <_ZN4CoinD1Ev>
 8000a66:	2130      	movs	r1, #48	; 0x30
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f004 fcc7 	bl	80053fc <_ZdlPvj>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN3MapC1EPKhiiii>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Map.h>

Map::Map(const unsigned char* b ,int w ,int h, int x, int y){
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <_ZN3MapC1EPKhiiii+0x40>)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	69fa      	ldr	r2, [r7, #28]
 8000a96:	609a      	str	r2, [r3, #8]
	width=w;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	60da      	str	r2, [r3, #12]
	height=h;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	611a      	str	r2, [r3, #16]
	bitmap=b;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	615a      	str	r2, [r3, #20]
}
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	08005560 	.word	0x08005560

08000abc <_ZN3Map11Display_mapEv>:
void Map::Display_map(){
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
	//ssd1306_Fill(Black);
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height,White);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	b2d8      	uxtb	r0, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	b2d9      	uxtb	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	695a      	ldr	r2, [r3, #20]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	b2dc      	uxtb	r4, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2501      	movs	r5, #1
 8000ae2:	9501      	str	r5, [sp, #4]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	f001 fd64 	bl	80025b4 <ssd1306_DrawBitmap>
    //ssd1306_UpdateScreen();
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}

08000af4 <_ZN3MapD1Ev>:
Map::~Map() {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <_ZN3MapD1Ev+0x1c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	08005560 	.word	0x08005560

08000b14 <_ZN3MapD0Ev>:
Map::~Map() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
}
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffe9 	bl	8000af4 <_ZN3MapD1Ev>
 8000b22:	2118      	movs	r1, #24
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f004 fc69 	bl	80053fc <_ZdlPvj>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZN3MobC1EiiiiiPKhii>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>
#include <Mob.h>

Mob::Mob(int x,int y,int is_al,int w,int h,const unsigned char* b,int ml,int mr){
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <_ZN3MobC1EiiiiiPKhii+0x54>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	60da      	str	r2, [r3, #12]

	is_mob_alive=is_al;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	605a      	str	r2, [r3, #4]
	width=w;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	611a      	str	r2, [r3, #16]
	height=h;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	615a      	str	r2, [r3, #20]
	bitmap=b;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6a3a      	ldr	r2, [r7, #32]
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
	moveL=ml;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b70:	61da      	str	r2, [r3, #28]
	moveR=mr;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b76:	619a      	str	r2, [r3, #24]
}
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	08005570 	.word	0x08005570

08000b8c <_ZN3Mob11generateHITEv>:

void Mob::generateHIT(){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	441a      	add	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	441a      	add	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_ZN3Mob5checkER6Player>:

void Mob::check(Player &player){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
generateHIT();
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffd8 	bl	8000b8c <_ZN3Mob11generateHITEv>
player.generateHIT();
 8000bdc:	6838      	ldr	r0, [r7, #0]
 8000bde:	f000 f96f 	bl	8000ec0 <_ZN6Player11generateHITEv>
if(is_mob_alive==1){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d143      	bne.n	8000c72 <_ZN3Mob5checkER6Player+0xa6>

if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){//if player hit mob's head mob dies
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	6a1a      	ldr	r2, [r3, #32]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dd0e      	ble.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	69da      	ldr	r2, [r3, #28]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	da08      	bge.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d102      	bne.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
  is_mob_alive=0;//Mob dies
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]


if((player.LHIT<=RHIT)&&(player.BHIT>=BHIT)&&(player.BHIT<=THIT)){// if player hit the right side of Mob
  player.Player_live--;//player is loosing his hearts
  }*/
if((player.RHIT==LHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){//if player hit left side of Mob
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	6a1a      	ldr	r2, [r3, #32]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d110      	bne.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	db0a      	blt.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dc04      	bgt.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
  player.Player_live--;//player is loosing his hearts
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	1e5a      	subs	r2, r3, #1
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	605a      	str	r2, [r3, #4]
}


if((player.LHIT==RHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){// if player hit the right side of Mob
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	69da      	ldr	r2, [r3, #28]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d114      	bne.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	429a      	cmp	r2, r3
 8000c58:	db0e      	blt.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dc08      	bgt.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
  player.Player_live--;//player is loosing his hearts
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 }
else{
   pos_y=100;
   //throwing body of dead Mob out of the map
}
}
 8000c70:	e002      	b.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
   pos_y=100;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2264      	movs	r2, #100	; 0x64
 8000c76:	60da      	str	r2, [r3, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN3Mob8Move_mobEii>:

void Mob::Move_mob(int point_A, int point_B){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
	generateHIT();
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f7ff ff7d 	bl	8000b8c <_ZN3Mob11generateHITEv>
	if(is_mob_alive==1){
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d127      	bne.n	8000cea <_ZN3Mob8Move_mobEii+0x6a>
	if(moveR==true){   //moving  Mob form point A to point B
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d104      	bne.n	8000cac <_ZN3Mob8Move_mobEii+0x2c>
		   pos_x++;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	609a      	str	r2, [r3, #8]
		  }
		if(moveL==true){   //moving Mob form point B to point A
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <_ZN3Mob8Move_mobEii+0x3e>
		   pos_x--;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	609a      	str	r2, [r3, #8]
		  }
		if(pos_x==point_A){//check if Mob hit the point_A
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d105      	bne.n	8000cd4 <_ZN3Mob8Move_mobEii+0x54>
		   moveL=false;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
		   moveR=true;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	619a      	str	r2, [r3, #24]
		  }
		if(RHIT==point_B){//check if Mob hit the ponit_B
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d105      	bne.n	8000cea <_ZN3Mob8Move_mobEii+0x6a>
		   moveL=true;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	61da      	str	r2, [r3, #28]
		   moveR=false;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
          }
	}
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_ZN3Mob11Display_mobEv>:
void Mob::Display_mob(){
 8000cf2:	b5b0      	push	{r4, r5, r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	6078      	str	r0, [r7, #4]
	if(is_mob_alive==1){
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d113      	bne.n	8000d2a <_ZN3Mob11Display_mobEv+0x38>
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	b2d8      	uxtb	r0, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	b2d9      	uxtb	r1, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	b2dc      	uxtb	r4, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2501      	movs	r5, #1
 8000d20:	9501      	str	r5, [sp, #4]
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	4623      	mov	r3, r4
 8000d26:	f001 fc45 	bl	80025b4 <ssd1306_DrawBitmap>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}

08000d32 <_ZN3Mob15Change_positionEii>:
void Mob::Change_position(int x,int y){
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	60da      	str	r2, [r3, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <_ZN3MobD1Ev>:
Mob::~Mob() {
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <_ZN3MobD1Ev+0x1c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	08005570 	.word	0x08005570

08000d78 <_ZN3MobD0Ev>:
Mob::~Mob() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
}
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ffe9 	bl	8000d58 <_ZN3MobD1Ev>
 8000d86:	2134      	movs	r1, #52	; 0x34
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f004 fb37 	bl	80053fc <_ZdlPvj>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN6PlayerC1EiiiiiPKh>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>

Player::Player(int x,int y,int w,int h,int p_l,const unsigned char* b) {//setting values and generating hit box
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <_ZN6PlayerC1EiiiiiPKh+0x48>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	611a      	str	r2, [r3, #16]
	width=w;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	615a      	str	r2, [r3, #20]
	height=h;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	619a      	str	r2, [r3, #24]
	bitmap=b;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a3a      	ldr	r2, [r7, #32]
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
    Player_live=p_l;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	605a      	str	r2, [r3, #4]
	generateHIT();
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f000 f875 	bl	8000ec0 <_ZN6Player11generateHITEv>
}
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	08005588 	.word	0x08005588

08000de4 <_ZN6Player14Display_PlayerEv>:
void Player::Display_Player(){ //drawing the player
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	6078      	str	r0, [r7, #4]

	ssd1306_DrawBitmap(pos_x, pos_y, bitmap,width, height, White);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	b2d8      	uxtb	r0, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	b2d9      	uxtb	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	b2dc      	uxtb	r4, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2501      	movs	r5, #1
 8000e0a:	9501      	str	r5, [sp, #4]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4623      	mov	r3, r4
 8000e10:	f001 fbd0 	bl	80025b4 <ssd1306_DrawBitmap>

}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}

08000e1c <_ZN6Player21Display_Player_heartsEv>:
void Player::Display_Player_hearts(){//drawing player's hearts
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]

	if(Player_live==3){//if player has all lives
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d11d      	bne.n	8000e68 <_ZN6Player21Display_Player_heartsEv+0x4c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	2305      	movs	r3, #5
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2305      	movs	r3, #5
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2079      	movs	r0, #121	; 0x79
 8000e3c:	f001 fbba 	bl	80025b4 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e40:	2301      	movs	r3, #1
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	2305      	movs	r3, #5
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2305      	movs	r3, #5
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2074      	movs	r0, #116	; 0x74
 8000e50:	f001 fbb0 	bl	80025b4 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(111,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	2305      	movs	r3, #5
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e60:	2100      	movs	r1, #0
 8000e62:	206f      	movs	r0, #111	; 0x6f
 8000e64:	f001 fba6 	bl	80025b4 <ssd1306_DrawBitmap>
	}
	if(Player_live==2){//if player lose one heart
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d113      	bne.n	8000e98 <_ZN6Player21Display_Player_heartsEv+0x7c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e70:	2301      	movs	r3, #1
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	2305      	movs	r3, #5
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2305      	movs	r3, #5
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2079      	movs	r0, #121	; 0x79
 8000e80:	f001 fb98 	bl	80025b4 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e84:	2301      	movs	r3, #1
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	2305      	movs	r3, #5
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	2074      	movs	r0, #116	; 0x74
 8000e94:	f001 fb8e 	bl	80025b4 <ssd1306_DrawBitmap>
	}
	if(Player_live==1){//if player lose two hearts
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d109      	bne.n	8000eb4 <_ZN6Player21Display_Player_heartsEv+0x98>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	2079      	movs	r0, #121	; 0x79
 8000eb0:	f001 fb80 	bl	80025b4 <ssd1306_DrawBitmap>

	}

}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08005578 	.word	0x08005578

08000ec0 <_ZN6Player11generateHITEv>:
void Player::generateHIT(){ //generating hit box
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	441a      	add	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	441a      	add	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZN6Player15Change_positionEii>:
void Player::Change_position(int x,int y){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_ZN6PlayerD1Ev>:
Player::~Player() {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <_ZN6PlayerD1Ev+0x1c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	08005588 	.word	0x08005588

08000f44 <_ZN6PlayerD0Ev>:
Player::~Player() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
}
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffe9 	bl	8000f24 <_ZN6PlayerD1Ev>
 8000f52:	2130      	movs	r1, #48	; 0x30
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f004 fa51 	bl	80053fc <_ZdlPvj>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN5SpikeC1EiiiiPKh>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"
#include <Spike.h>

Spike::Spike(int x,int y,int w, int h,const unsigned char* b) {//writing primary data to spike object
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <_ZN5SpikeC1EiiiiPKh+0x40>)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	601a      	str	r2, [r3, #0]
	 pos_x=x;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	605a      	str	r2, [r3, #4]
     pos_y=y;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
   	 width=w;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	60da      	str	r2, [r3, #12]
     height=h;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	611a      	str	r2, [r3, #16]
	 bitmap=b;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	08005598 	.word	0x08005598

08000fa8 <_ZN5Spike11generateHITEv>:

void Spike::generateHIT(){//generating hit box of spike
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]
	RHIT=pos_x+width;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	441a      	add	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
	THIT=pos_y;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	61da      	str	r2, [r3, #28]
	BHIT=pos_y+height;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	441a      	add	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	621a      	str	r2, [r3, #32]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_ZN5Spike5CheckERiR6Player>:

void Spike::Check(int &barrier,Player &player){//reacting on collisions with player
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	player.generateHIT();
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff63 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff ffd4 	bl	8000fa8 <_ZN5Spike11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	dd13      	ble.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	429a      	cmp	r2, r3
 8001016:	da0d      	bge.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	429a      	cmp	r2, r3
 8001022:	d107      	bne.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
	barrier=1; //function turn of our gravitation so we do not fall of this block b is barrier for gravitation
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
	player.Player_live--;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of spike
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	db22      	blt.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	429a      	cmp	r2, r3
 800104a:	db05      	blt.n	8001058 <_ZN5Spike5CheckERiR6Player+0x70>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	429a      	cmp	r2, r3
 8001056:	dd0b      	ble.n	8001070 <_ZN5Spike5CheckERiR6Player+0x88>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	429a      	cmp	r2, r3
 8001062:	dc10      	bgt.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd0a      	ble.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	429a      	cmp	r2, r3
 800107a:	da04      	bge.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
	  player.pos_x--;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60da      	str	r2, [r3, #12]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit right side of spike
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69da      	ldr	r2, [r3, #28]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	429a      	cmp	r2, r3
 8001090:	dc22      	bgt.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	429a      	cmp	r2, r3
 800109c:	db05      	blt.n	80010aa <_ZN5Spike5CheckERiR6Player+0xc2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dd0b      	ble.n	80010c2 <_ZN5Spike5CheckERiR6Player+0xda>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dc10      	bgt.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dd0a      	ble.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dd04      	ble.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
	 player.pos_x++;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60da      	str	r2, [r3, #12]
	 }
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_ZN5Spike13Display_SpikeEv>:
void Spike::Display_Spike(){//draws spike
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	b2d8      	uxtb	r0, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	b2dc      	uxtb	r4, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2501      	movs	r5, #1
 8001106:	9501      	str	r5, [sp, #4]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	f001 fa52 	bl	80025b4 <ssd1306_DrawBitmap>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}

08001118 <_ZN5Spike15Change_positionEii>:
void Spike::Change_position(int x,int y){//changes position of spike
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	605a      	str	r2, [r3, #4]
	pos_y=y;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZN5SpikeD1Ev>:

Spike::~Spike() {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <_ZN5SpikeD1Ev+0x1c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	08005598 	.word	0x08005598

0800115c <_ZN5SpikeD0Ev>:
Spike::~Spike() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
}
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffe9 	bl	800113c <_ZN5SpikeD1Ev>
 800116a:	2128      	movs	r1, #40	; 0x28
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f004 f945 	bl	80053fc <_ZdlPvj>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_GPIO_Init+0xac>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a24      	ldr	r2, [pc, #144]	; (8001228 <MX_GPIO_Init+0xac>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_GPIO_Init+0xac>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_GPIO_Init+0xac>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <MX_GPIO_Init+0xac>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_GPIO_Init+0xac>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <MX_GPIO_Init+0xb0>)
 80011ca:	f001 fed5 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_Pin;
 80011ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f001 fd2d 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_Pin|UP_Pin;
 80011ea:	2330      	movs	r3, #48	; 0x30
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <MX_GPIO_Init+0xb0>)
 80011fe:	f001 fd21 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_GPIO_Init+0xb0>)
 800121c:	f001 fd12 	bl	8002c44 <HAL_GPIO_Init>

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <MX_I2C1_Init+0x78>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E063FF;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_I2C1_Init+0x74>)
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <MX_I2C1_Init+0x7c>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001248:	2201      	movs	r2, #1
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <MX_I2C1_Init+0x74>)
 800126c:	f001 fe9c 	bl	8002fa8 <HAL_I2C_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001276:	f000 fe9c 	bl	8001fb2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800127a:	2100      	movs	r1, #0
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x74>)
 800127e:	f002 fa89 	bl	8003794 <HAL_I2CEx_ConfigAnalogFilter>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001288:	f000 fe93 	bl	8001fb2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001290:	f002 facb 	bl	800382a <HAL_I2CEx_ConfigDigitalFilter>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800129a:	f000 fe8a 	bl	8001fb2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000e4 	.word	0x200000e4
 80012a8:	40005400 	.word	0x40005400
 80012ac:	00e063ff 	.word	0x00e063ff

080012b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09c      	sub	sp, #112	; 0x70
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	2244      	movs	r2, #68	; 0x44
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 f8c3 	bl	800545c <memset>
  if(i2cHandle->Instance==I2C1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_I2C_MspInit+0xe0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d153      	bne.n	8001388 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 f8c1 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012f8:	f000 fe5b 	bl	8001fb2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001330:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f001 fc7a 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <HAL_I2C_MspInit+0xe8>)
 800136c:	f001 fc6a 	bl	8002c44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	3770      	adds	r7, #112	; 0x70
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400

0800139c <_Z10change_mapRiS_S_S_S_S_4Coin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-------------------------------change map function---------------------------------------*/
void change_map(int &cur_map,int &is_map_changed,int &Block_1_A,int &Block_1_B,int &Mob_1_A,int &Mob_1_B,Coin coin){//maps~
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
if(coin.is_coin_gathered==true){//if coin gathered boxi is go to the next map
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	f040 8202 	bne.w	80017b8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x41c>
// cur_map=TM_RNG_Get()%1+2;
	cur_map++; //random map will be in future work in progress
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]
if(cur_map==2){//map 2
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d170      	bne.n	80014a8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x10c>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(12, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	210c      	movs	r1, #12
 80013ca:	48c6      	ldr	r0, [pc, #792]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 80013cc:	f7ff fd98 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,20);
 80013d0:	2214      	movs	r2, #20
 80013d2:	2101      	movs	r1, #1
 80013d4:	48c4      	ldr	r0, [pc, #784]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 80013d6:	f7ff f9f1 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(11,20);
 80013da:	2214      	movs	r2, #20
 80013dc:	210b      	movs	r1, #11
 80013de:	48c3      	ldr	r0, [pc, #780]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80013e0:	f7ff f9ec 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(21,20);
 80013e4:	2214      	movs	r2, #20
 80013e6:	2115      	movs	r1, #21
 80013e8:	48c1      	ldr	r0, [pc, #772]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 80013ea:	f7ff f9e7 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(91,20);
 80013ee:	2214      	movs	r2, #20
 80013f0:	215b      	movs	r1, #91	; 0x5b
 80013f2:	48c0      	ldr	r0, [pc, #768]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 80013f4:	f7ff f9e2 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(101,20);
 80013f8:	2214      	movs	r2, #20
 80013fa:	2165      	movs	r1, #101	; 0x65
 80013fc:	48be      	ldr	r0, [pc, #760]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 80013fe:	f7ff f9dd 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(81,52);
 8001402:	2234      	movs	r2, #52	; 0x34
 8001404:	2151      	movs	r1, #81	; 0x51
 8001406:	48bd      	ldr	r0, [pc, #756]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 8001408:	f7ff f9d8 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(91,52);
 800140c:	2234      	movs	r2, #52	; 0x34
 800140e:	215b      	movs	r1, #91	; 0x5b
 8001410:	48bb      	ldr	r0, [pc, #748]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 8001412:	f7ff f9d3 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(101,52);
 8001416:	2234      	movs	r2, #52	; 0x34
 8001418:	2165      	movs	r1, #101	; 0x65
 800141a:	48ba      	ldr	r0, [pc, #744]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 800141c:	f7ff f9ce 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(111,52);
 8001420:	2234      	movs	r2, #52	; 0x34
 8001422:	216f      	movs	r1, #111	; 0x6f
 8001424:	48b8      	ldr	r0, [pc, #736]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 8001426:	f7ff f9c9 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,20);
 800142a:	2214      	movs	r2, #20
 800142c:	2146      	movs	r1, #70	; 0x46
 800142e:	48b7      	ldr	r0, [pc, #732]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 8001430:	f7ff f9c4 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=31;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	221f      	movs	r2, #31
 8001438:	601a      	str	r2, [r3, #0]
Block_1_B=81;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2251      	movs	r2, #81	; 0x51
 800143e:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(91, 44);
 8001440:	222c      	movs	r2, #44	; 0x2c
 8001442:	215b      	movs	r1, #91	; 0x5b
 8001444:	48b2      	ldr	r0, [pc, #712]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001446:	f7ff fc74 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800144a:	4bb1      	ldr	r3, [pc, #708]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 800144c:	2201      	movs	r2, #1
 800144e:	605a      	str	r2, [r3, #4]
Mob_1_A=90;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	225a      	movs	r2, #90	; 0x5a
 8001454:	601a      	str	r2, [r3, #0]
Mob_1_B=120;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	2278      	movs	r2, #120	; 0x78
 800145a:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(2, 14);
 800145c:	220e      	movs	r2, #14
 800145e:	2102      	movs	r1, #2
 8001460:	48ac      	ldr	r0, [pc, #688]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 8001462:	f7ff fe59 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(7, 14);
 8001466:	220e      	movs	r2, #14
 8001468:	2107      	movs	r1, #7
 800146a:	48ab      	ldr	r0, [pc, #684]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 800146c:	f7ff fe54 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(81, 26);
 8001470:	221a      	movs	r2, #26
 8001472:	2151      	movs	r1, #81	; 0x51
 8001474:	48a9      	ldr	r0, [pc, #676]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 8001476:	f7ff fe4f 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(86, 26);
 800147a:	221a      	movs	r2, #26
 800147c:	2156      	movs	r1, #86	; 0x56
 800147e:	48a8      	ldr	r0, [pc, #672]	; (8001720 <_Z10change_mapRiS_S_S_S_S_4Coin+0x384>)
 8001480:	f7ff fe4a 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(122, 16);
 8001484:	2210      	movs	r2, #16
 8001486:	217a      	movs	r1, #122	; 0x7a
 8001488:	48a6      	ldr	r0, [pc, #664]	; (8001724 <_Z10change_mapRiS_S_S_S_S_4Coin+0x388>)
 800148a:	f7ff fe45 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(122, 48);
 800148e:	2230      	movs	r2, #48	; 0x30
 8001490:	217a      	movs	r1, #122	; 0x7a
 8001492:	48a5      	ldr	r0, [pc, #660]	; (8001728 <_Z10change_mapRiS_S_S_S_S_4Coin+0x38c>)
 8001494:	f7ff fe40 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(82,44);
 8001498:	222c      	movs	r2, #44	; 0x2c
 800149a:	2152      	movs	r1, #82	; 0x52
 800149c:	48a3      	ldr	r0, [pc, #652]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 800149e:	f7ff fab8 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 80014a2:	4ba2      	ldr	r3, [pc, #648]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	609a      	str	r2, [r3, #8]
//cur_map++;
}
if(cur_map==3){// map 3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d170      	bne.n	8001592 <_Z10change_mapRiS_S_S_S_S_4Coin+0x1f6>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(2, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2102      	movs	r1, #2
 80014b4:	488b      	ldr	r0, [pc, #556]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 80014b6:	f7ff fd23 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,20);
 80014ba:	2214      	movs	r2, #20
 80014bc:	2101      	movs	r1, #1
 80014be:	488a      	ldr	r0, [pc, #552]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 80014c0:	f7ff f97c 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(26,20);
 80014c4:	2214      	movs	r2, #20
 80014c6:	211a      	movs	r1, #26
 80014c8:	4888      	ldr	r0, [pc, #544]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80014ca:	f7ff f977 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(31,58);
 80014ce:	223a      	movs	r2, #58	; 0x3a
 80014d0:	211f      	movs	r1, #31
 80014d2:	4887      	ldr	r0, [pc, #540]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 80014d4:	f7ff f972 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(56,58);
 80014d8:	223a      	movs	r2, #58	; 0x3a
 80014da:	2138      	movs	r1, #56	; 0x38
 80014dc:	4885      	ldr	r0, [pc, #532]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 80014de:	f7ff f96d 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(86,58);
 80014e2:	223a      	movs	r2, #58	; 0x3a
 80014e4:	2156      	movs	r1, #86	; 0x56
 80014e6:	4884      	ldr	r0, [pc, #528]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 80014e8:	f7ff f968 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(96,58);
 80014ec:	223a      	movs	r2, #58	; 0x3a
 80014ee:	2160      	movs	r1, #96	; 0x60
 80014f0:	4882      	ldr	r0, [pc, #520]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 80014f2:	f7ff f963 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(106,58);
 80014f6:	223a      	movs	r2, #58	; 0x3a
 80014f8:	216a      	movs	r1, #106	; 0x6a
 80014fa:	4881      	ldr	r0, [pc, #516]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 80014fc:	f7ff f95e 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(116,58);
 8001500:	223a      	movs	r2, #58	; 0x3a
 8001502:	2174      	movs	r1, #116	; 0x74
 8001504:	487f      	ldr	r0, [pc, #508]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 8001506:	f7ff f959 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(21,58);
 800150a:	223a      	movs	r2, #58	; 0x3a
 800150c:	2115      	movs	r1, #21
 800150e:	487e      	ldr	r0, [pc, #504]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 8001510:	f7ff f954 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,20);
 8001514:	2214      	movs	r2, #20
 8001516:	2146      	movs	r1, #70	; 0x46
 8001518:	487c      	ldr	r0, [pc, #496]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 800151a:	f7ff f94f 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=36;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2224      	movs	r2, #36	; 0x24
 8001522:	601a      	str	r2, [r3, #0]
Block_1_B=96;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2260      	movs	r2, #96	; 0x60
 8001528:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(91, 50);
 800152a:	2232      	movs	r2, #50	; 0x32
 800152c:	215b      	movs	r1, #91	; 0x5b
 800152e:	4878      	ldr	r0, [pc, #480]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001530:	f7ff fbff 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001536:	2201      	movs	r2, #1
 8001538:	605a      	str	r2, [r3, #4]
Mob_1_A=86;
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2256      	movs	r2, #86	; 0x56
 800153e:	601a      	str	r2, [r3, #0]
Mob_1_B=126;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	227e      	movs	r2, #126	; 0x7e
 8001544:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(18, 32);
 8001546:	2220      	movs	r2, #32
 8001548:	2112      	movs	r1, #18
 800154a:	4872      	ldr	r0, [pc, #456]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 800154c:	f7ff fde4 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(40, 32);
 8001550:	2220      	movs	r2, #32
 8001552:	2128      	movs	r1, #40	; 0x28
 8001554:	4870      	ldr	r0, [pc, #448]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 8001556:	f7ff fddf 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(47, 32);
 800155a:	2220      	movs	r2, #32
 800155c:	212f      	movs	r1, #47	; 0x2f
 800155e:	486f      	ldr	r0, [pc, #444]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 8001560:	f7ff fdda 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(54, 32);
 8001564:	2220      	movs	r2, #32
 8001566:	2136      	movs	r1, #54	; 0x36
 8001568:	486d      	ldr	r0, [pc, #436]	; (8001720 <_Z10change_mapRiS_S_S_S_S_4Coin+0x384>)
 800156a:	f7ff fdd5 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(61, 32);
 800156e:	2220      	movs	r2, #32
 8001570:	213d      	movs	r1, #61	; 0x3d
 8001572:	486c      	ldr	r0, [pc, #432]	; (8001724 <_Z10change_mapRiS_S_S_S_S_4Coin+0x388>)
 8001574:	f7ff fdd0 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(96, 32);
 8001578:	2220      	movs	r2, #32
 800157a:	2160      	movs	r1, #96	; 0x60
 800157c:	486a      	ldr	r0, [pc, #424]	; (8001728 <_Z10change_mapRiS_S_S_S_S_4Coin+0x38c>)
 800157e:	f7ff fdcb 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(32,45);
 8001582:	222d      	movs	r2, #45	; 0x2d
 8001584:	2120      	movs	r1, #32
 8001586:	4869      	ldr	r0, [pc, #420]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 8001588:	f7ff fa43 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 800158c:	4b67      	ldr	r3, [pc, #412]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 800158e:	2201      	movs	r2, #1
 8001590:	609a      	str	r2, [r3, #8]
//cur_map++;
 }

if(cur_map==4){// map 4
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d170      	bne.n	800167c <_Z10change_mapRiS_S_S_S_S_4Coin+0x2e0>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(5, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2105      	movs	r1, #5
 800159e:	4851      	ldr	r0, [pc, #324]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 80015a0:	f7ff fcae 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,46);
 80015a4:	222e      	movs	r2, #46	; 0x2e
 80015a6:	2101      	movs	r1, #1
 80015a8:	484f      	ldr	r0, [pc, #316]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 80015aa:	f7ff f907 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(31,56);
 80015ae:	2238      	movs	r2, #56	; 0x38
 80015b0:	211f      	movs	r1, #31
 80015b2:	484e      	ldr	r0, [pc, #312]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80015b4:	f7ff f902 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(41,56);
 80015b8:	2238      	movs	r2, #56	; 0x38
 80015ba:	2129      	movs	r1, #41	; 0x29
 80015bc:	484c      	ldr	r0, [pc, #304]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 80015be:	f7ff f8fd 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(51,56);
 80015c2:	2238      	movs	r2, #56	; 0x38
 80015c4:	2133      	movs	r1, #51	; 0x33
 80015c6:	484b      	ldr	r0, [pc, #300]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 80015c8:	f7ff f8f8 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(61,56);
 80015cc:	2238      	movs	r2, #56	; 0x38
 80015ce:	213d      	movs	r1, #61	; 0x3d
 80015d0:	4849      	ldr	r0, [pc, #292]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 80015d2:	f7ff f8f3 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(71,56);
 80015d6:	2238      	movs	r2, #56	; 0x38
 80015d8:	2147      	movs	r1, #71	; 0x47
 80015da:	4848      	ldr	r0, [pc, #288]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 80015dc:	f7ff f8ee 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(96,52);
 80015e0:	2234      	movs	r2, #52	; 0x34
 80015e2:	2160      	movs	r1, #96	; 0x60
 80015e4:	4846      	ldr	r0, [pc, #280]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 80015e6:	f7ff f8e9 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(106,42);
 80015ea:	222a      	movs	r2, #42	; 0x2a
 80015ec:	216a      	movs	r1, #106	; 0x6a
 80015ee:	4845      	ldr	r0, [pc, #276]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 80015f0:	f7ff f8e4 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(31,30);
 80015f4:	221e      	movs	r2, #30
 80015f6:	211f      	movs	r1, #31
 80015f8:	4843      	ldr	r0, [pc, #268]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 80015fa:	f7ff f8df 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,36);
 80015fe:	2224      	movs	r2, #36	; 0x24
 8001600:	2146      	movs	r1, #70	; 0x46
 8001602:	4842      	ldr	r0, [pc, #264]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 8001604:	f7ff f8da 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=41;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2229      	movs	r2, #41	; 0x29
 800160c:	601a      	str	r2, [r3, #0]
Block_1_B=106;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	226a      	movs	r2, #106	; 0x6a
 8001612:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(60, 48);
 8001614:	2230      	movs	r2, #48	; 0x30
 8001616:	213c      	movs	r1, #60	; 0x3c
 8001618:	483d      	ldr	r0, [pc, #244]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 800161a:	f7ff fb8a 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001620:	2201      	movs	r2, #1
 8001622:	605a      	str	r2, [r3, #4]
Mob_1_A=31;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	221f      	movs	r2, #31
 8001628:	601a      	str	r2, [r3, #0]
Mob_1_B=81;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2251      	movs	r2, #81	; 0x51
 800162e:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(21, 60);
 8001630:	223c      	movs	r2, #60	; 0x3c
 8001632:	2115      	movs	r1, #21
 8001634:	4837      	ldr	r0, [pc, #220]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 8001636:	f7ff fd6f 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(26, 60);
 800163a:	223c      	movs	r2, #60	; 0x3c
 800163c:	211a      	movs	r1, #26
 800163e:	4836      	ldr	r0, [pc, #216]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 8001640:	f7ff fd6a 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(81, 60);
 8001644:	223c      	movs	r2, #60	; 0x3c
 8001646:	2151      	movs	r1, #81	; 0x51
 8001648:	4834      	ldr	r0, [pc, #208]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 800164a:	f7ff fd65 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(86, 60);
 800164e:	223c      	movs	r2, #60	; 0x3c
 8001650:	2156      	movs	r1, #86	; 0x56
 8001652:	4833      	ldr	r0, [pc, #204]	; (8001720 <_Z10change_mapRiS_S_S_S_S_4Coin+0x384>)
 8001654:	f7ff fd60 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(91, 60);
 8001658:	223c      	movs	r2, #60	; 0x3c
 800165a:	215b      	movs	r1, #91	; 0x5b
 800165c:	4831      	ldr	r0, [pc, #196]	; (8001724 <_Z10change_mapRiS_S_S_S_S_4Coin+0x388>)
 800165e:	f7ff fd5b 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(120, 35);
 8001662:	2223      	movs	r2, #35	; 0x23
 8001664:	2178      	movs	r1, #120	; 0x78
 8001666:	4830      	ldr	r0, [pc, #192]	; (8001728 <_Z10change_mapRiS_S_S_S_S_4Coin+0x38c>)
 8001668:	f7ff fd56 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(32,20);
 800166c:	2214      	movs	r2, #20
 800166e:	2120      	movs	r1, #32
 8001670:	482e      	ldr	r0, [pc, #184]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 8001672:	f7ff f9ce 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 8001678:	2201      	movs	r2, #1
 800167a:	609a      	str	r2, [r3, #8]
//cur_map++;
 }
if(cur_map==5){// map 5
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b05      	cmp	r3, #5
 8001682:	f040 8099 	bne.w	80017b8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x41c>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(111, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	216f      	movs	r1, #111	; 0x6f
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 800168c:	f7ff fc38 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(111,30);
 8001690:	221e      	movs	r2, #30
 8001692:	216f      	movs	r1, #111	; 0x6f
 8001694:	4814      	ldr	r0, [pc, #80]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 8001696:	f7ff f891 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(86,30);
 800169a:	221e      	movs	r2, #30
 800169c:	2156      	movs	r1, #86	; 0x56
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80016a0:	f7ff f88c 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(66,20);
 80016a4:	2214      	movs	r2, #20
 80016a6:	2142      	movs	r1, #66	; 0x42
 80016a8:	4811      	ldr	r0, [pc, #68]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 80016aa:	f7ff f887 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(1,52);
 80016ae:	2234      	movs	r2, #52	; 0x34
 80016b0:	2101      	movs	r1, #1
 80016b2:	4810      	ldr	r0, [pc, #64]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 80016b4:	f7ff f882 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(21,52);
 80016b8:	2234      	movs	r2, #52	; 0x34
 80016ba:	2115      	movs	r1, #21
 80016bc:	480e      	ldr	r0, [pc, #56]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 80016be:	f7ff f87d 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(46,52);
 80016c2:	2234      	movs	r2, #52	; 0x34
 80016c4:	212e      	movs	r1, #46	; 0x2e
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 80016c8:	f7ff f878 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(46,30);
 80016cc:	221e      	movs	r2, #30
 80016ce:	212e      	movs	r1, #46	; 0x2e
 80016d0:	480b      	ldr	r0, [pc, #44]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 80016d2:	f7ff f873 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(101,58);
 80016d6:	223a      	movs	r2, #58	; 0x3a
 80016d8:	2165      	movs	r1, #101	; 0x65
 80016da:	480a      	ldr	r0, [pc, #40]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 80016dc:	f7ff f86e 	bl	80007bc <_ZN5Block15Change_positionEii>
 80016e0:	e026      	b.n	8001730 <_Z10change_mapRiS_S_S_S_S_4Coin+0x394>
 80016e2:	bf00      	nop
 80016e4:	20000190 	.word	0x20000190
 80016e8:	200001c0 	.word	0x200001c0
 80016ec:	200001f4 	.word	0x200001f4
 80016f0:	20000228 	.word	0x20000228
 80016f4:	2000025c 	.word	0x2000025c
 80016f8:	20000290 	.word	0x20000290
 80016fc:	200002c4 	.word	0x200002c4
 8001700:	200002f8 	.word	0x200002f8
 8001704:	20000360 	.word	0x20000360
 8001708:	20000394 	.word	0x20000394
 800170c:	2000032c 	.word	0x2000032c
 8001710:	200003c8 	.word	0x200003c8
 8001714:	200003fc 	.word	0x200003fc
 8001718:	20000424 	.word	0x20000424
 800171c:	2000044c 	.word	0x2000044c
 8001720:	20000474 	.word	0x20000474
 8001724:	2000049c 	.word	0x2000049c
 8001728:	200004c4 	.word	0x200004c4
 800172c:	200004ec 	.word	0x200004ec
B[9].Change_position(121,58);
 8001730:	223a      	movs	r2, #58	; 0x3a
 8001732:	2179      	movs	r1, #121	; 0x79
 8001734:	4822      	ldr	r0, [pc, #136]	; (80017c0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x424>)
 8001736:	f7ff f841 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(46,16);
 800173a:	2210      	movs	r2, #16
 800173c:	212e      	movs	r1, #46	; 0x2e
 800173e:	4821      	ldr	r0, [pc, #132]	; (80017c4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x428>)
 8001740:	f7ff f83c 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=21;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2215      	movs	r2, #21
 8001748:	601a      	str	r2, [r3, #0]
Block_1_B=66;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2242      	movs	r2, #66	; 0x42
 800174e:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(21, 44);
 8001750:	222c      	movs	r2, #44	; 0x2c
 8001752:	2115      	movs	r1, #21
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x42c>)
 8001756:	f7ff faec 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x42c>)
 800175c:	2201      	movs	r2, #1
 800175e:	605a      	str	r2, [r3, #4]
Mob_1_A=1;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
Mob_1_B=46;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	222e      	movs	r2, #46	; 0x2e
 800176a:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(11, 20);
 800176c:	2214      	movs	r2, #20
 800176e:	210b      	movs	r1, #11
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <_Z10change_mapRiS_S_S_S_S_4Coin+0x430>)
 8001772:	f7ff fcd1 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(17, 20);
 8001776:	2214      	movs	r2, #20
 8001778:	2111      	movs	r1, #17
 800177a:	4815      	ldr	r0, [pc, #84]	; (80017d0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x434>)
 800177c:	f7ff fccc 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(26, 30);
 8001780:	221e      	movs	r2, #30
 8001782:	211a      	movs	r1, #26
 8001784:	4813      	ldr	r0, [pc, #76]	; (80017d4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x438>)
 8001786:	f7ff fcc7 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(31, 30);
 800178a:	221e      	movs	r2, #30
 800178c:	211f      	movs	r1, #31
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x43c>)
 8001790:	f7ff fcc2 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(46, 24);
 8001794:	2218      	movs	r2, #24
 8001796:	212e      	movs	r1, #46	; 0x2e
 8001798:	4810      	ldr	r0, [pc, #64]	; (80017dc <_Z10change_mapRiS_S_S_S_S_4Coin+0x440>)
 800179a:	f7ff fcbd 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(51,24);
 800179e:	2218      	movs	r2, #24
 80017a0:	2133      	movs	r1, #51	; 0x33
 80017a2:	480f      	ldr	r0, [pc, #60]	; (80017e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x444>)
 80017a4:	f7ff fcb8 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(48,44);
 80017a8:	222c      	movs	r2, #44	; 0x2c
 80017aa:	2130      	movs	r1, #48	; 0x30
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x448>)
 80017ae:	f7ff f930 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x448>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	609a      	str	r2, [r3, #8]
//cur_map++;
 }
}
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000394 	.word	0x20000394
 80017c4:	2000032c 	.word	0x2000032c
 80017c8:	200003c8 	.word	0x200003c8
 80017cc:	200003fc 	.word	0x200003fc
 80017d0:	20000424 	.word	0x20000424
 80017d4:	2000044c 	.word	0x2000044c
 80017d8:	20000474 	.word	0x20000474
 80017dc:	2000049c 	.word	0x2000049c
 80017e0:	200004c4 	.word	0x200004c4
 80017e4:	200004ec 	.word	0x200004ec

080017e8 <_Z10easter_eggv>:
/*-------------------Easter egg----------------------------------------------*/
//Its easter egg on map 5 on the right bottom corner of the map
void easter_egg(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	if((boxi.pos_x>=124)&&(boxi.pos_y>=40)&&(current_map==5)){
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <_Z10easter_eggv+0xac>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b7b      	cmp	r3, #123	; 0x7b
 80017f2:	dd4d      	ble.n	8001890 <_Z10easter_eggv+0xa8>
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <_Z10easter_eggv+0xac>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b27      	cmp	r3, #39	; 0x27
 80017fa:	dd49      	ble.n	8001890 <_Z10easter_eggv+0xa8>
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <_Z10easter_eggv+0xb0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d145      	bne.n	8001890 <_Z10easter_eggv+0xa8>
	  //--CHANGE POSINTIONS--//
	  boxi.Change_position(80,34);
 8001804:	2222      	movs	r2, #34	; 0x22
 8001806:	2150      	movs	r1, #80	; 0x50
 8001808:	4822      	ldr	r0, [pc, #136]	; (8001894 <_Z10easter_eggv+0xac>)
 800180a:	f7ff fb79 	bl	8000f00 <_ZN6Player15Change_positionEii>
	  m1.Change_position(80,43);
 800180e:	222b      	movs	r2, #43	; 0x2b
 8001810:	2150      	movs	r1, #80	; 0x50
 8001812:	4822      	ldr	r0, [pc, #136]	; (800189c <_Z10easter_eggv+0xb4>)
 8001814:	f7ff fa8d 	bl	8000d32 <_ZN3Mob15Change_positionEii>
	  B[0].Change_position(80,52);
 8001818:	2234      	movs	r2, #52	; 0x34
 800181a:	2150      	movs	r1, #80	; 0x50
 800181c:	4820      	ldr	r0, [pc, #128]	; (80018a0 <_Z10easter_eggv+0xb8>)
 800181e:	f7fe ffcd 	bl	80007bc <_ZN5Block15Change_positionEii>
	  //--DISPLAY--//
	  ssd1306_Fill(Black);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 fd60 	bl	80022e8 <ssd1306_Fill>
	  boxi.Display_Player();
 8001828:	481a      	ldr	r0, [pc, #104]	; (8001894 <_Z10easter_eggv+0xac>)
 800182a:	f7ff fadb 	bl	8000de4 <_ZN6Player14Display_PlayerEv>
	  m1.Display_mob();
 800182e:	481b      	ldr	r0, [pc, #108]	; (800189c <_Z10easter_eggv+0xb4>)
 8001830:	f7ff fa5f 	bl	8000cf2 <_ZN3Mob11Display_mobEv>
	  B[0].Display_Block();
 8001834:	481a      	ldr	r0, [pc, #104]	; (80018a0 <_Z10easter_eggv+0xb8>)
 8001836:	f7fe feb9 	bl	80005ac <_ZN5Block13Display_BlockEv>
	  easter_egg_map.Display_map();
 800183a:	481a      	ldr	r0, [pc, #104]	; (80018a4 <_Z10easter_eggv+0xbc>)
 800183c:	f7ff f93e 	bl	8000abc <_ZN3Map11Display_mapEv>
	  ssd1306_SetCursor(30, 34);
 8001840:	2122      	movs	r1, #34	; 0x22
 8001842:	201e      	movs	r0, #30
 8001844:	f000 fe9e 	bl	8002584 <ssd1306_SetCursor>
	  ssd1306_WriteString(Szymon_string, Font_6x8, White);
 8001848:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <_Z10easter_eggv+0xc0>)
 800184a:	2301      	movs	r3, #1
 800184c:	ca06      	ldmia	r2, {r1, r2}
 800184e:	4817      	ldr	r0, [pc, #92]	; (80018ac <_Z10easter_eggv+0xc4>)
 8001850:	f000 fe72 	bl	8002538 <ssd1306_WriteString>
	  ssd1306_SetCursor(30, 43);
 8001854:	212b      	movs	r1, #43	; 0x2b
 8001856:	201e      	movs	r0, #30
 8001858:	f000 fe94 	bl	8002584 <ssd1306_SetCursor>
	  ssd1306_WriteString(Nyderek_string, Font_6x8, White);
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_Z10easter_eggv+0xc0>)
 800185e:	2301      	movs	r3, #1
 8001860:	ca06      	ldmia	r2, {r1, r2}
 8001862:	4813      	ldr	r0, [pc, #76]	; (80018b0 <_Z10easter_eggv+0xc8>)
 8001864:	f000 fe68 	bl	8002538 <ssd1306_WriteString>
	  ssd1306_SetCursor(30,54);
 8001868:	2136      	movs	r1, #54	; 0x36
 800186a:	201e      	movs	r0, #30
 800186c:	f000 fe8a 	bl	8002584 <ssd1306_SetCursor>
	  ssd1306_WriteString(year_string, Font_6x8, White);
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <_Z10easter_eggv+0xc0>)
 8001872:	2301      	movs	r3, #1
 8001874:	ca06      	ldmia	r2, {r1, r2}
 8001876:	480f      	ldr	r0, [pc, #60]	; (80018b4 <_Z10easter_eggv+0xcc>)
 8001878:	f000 fe5e 	bl	8002538 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800187c:	f000 fd58 	bl	8002330 <ssd1306_UpdateScreen>
	  HAL_Delay(10000);
 8001880:	f242 7010 	movw	r0, #10000	; 0x2710
 8001884:	f001 f8d8 	bl	8002a38 <HAL_Delay>
	  //---WIN----//
	  boxi.Player_coins=3000;
 8001888:	4b02      	ldr	r3, [pc, #8]	; (8001894 <_Z10easter_eggv+0xac>)
 800188a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800188e:	609a      	str	r2, [r3, #8]
	}
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000190 	.word	0x20000190
 8001898:	20000520 	.word	0x20000520
 800189c:	200003c8 	.word	0x200003c8
 80018a0:	200001c0 	.word	0x200001c0
 80018a4:	20000178 	.word	0x20000178
 80018a8:	20000050 	.word	0x20000050
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000014 	.word	0x20000014
 80018b4:	20000028 	.word	0x20000028

080018b8 <_Z8WIN_GAMEv>:
/*-------------------WIN FUNCTION-------------------------------------------*/
void WIN_GAME(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af02      	add	r7, sp, #8
	if(boxi.Player_coins>=5){
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <_Z8WIN_GAMEv+0xc8>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	dd58      	ble.n	8001978 <_Z8WIN_GAMEv+0xc0>
	boxi.Change_position(3,54);
 80018c6:	2236      	movs	r2, #54	; 0x36
 80018c8:	2103      	movs	r1, #3
 80018ca:	482d      	ldr	r0, [pc, #180]	; (8001980 <_Z8WIN_GAMEv+0xc8>)
 80018cc:	f7ff fb18 	bl	8000f00 <_ZN6Player15Change_positionEii>
	//----go to the castle-----//
	for(int i=0;i<=45;i++){//display boxi going to the castle
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b2d      	cmp	r3, #45	; 0x2d
 80018d8:	dc13      	bgt.n	8001902 <_Z8WIN_GAMEv+0x4a>
		boxi.pos_x++;
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <_Z8WIN_GAMEv+0xc8>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <_Z8WIN_GAMEv+0xc8>)
 80018e2:	60d3      	str	r3, [r2, #12]
		ssd1306_Fill(Black);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 fcff 	bl	80022e8 <ssd1306_Fill>
		castle_map.Display_map();
 80018ea:	4826      	ldr	r0, [pc, #152]	; (8001984 <_Z8WIN_GAMEv+0xcc>)
 80018ec:	f7ff f8e6 	bl	8000abc <_ZN3Map11Display_mapEv>
        boxi.Display_Player();
 80018f0:	4823      	ldr	r0, [pc, #140]	; (8001980 <_Z8WIN_GAMEv+0xc8>)
 80018f2:	f7ff fa77 	bl	8000de4 <_ZN6Player14Display_PlayerEv>
        ssd1306_UpdateScreen();
 80018f6:	f000 fd1b 	bl	8002330 <ssd1306_UpdateScreen>
	for(int i=0;i<=45;i++){//display boxi going to the castle
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3301      	adds	r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	e7e8      	b.n	80018d4 <_Z8WIN_GAMEv+0x1c>
	}
	  ssd1306_Fill(Black);
 8001902:	2000      	movs	r0, #0
 8001904:	f000 fcf0 	bl	80022e8 <ssd1306_Fill>
	  castle_map.Display_map();
 8001908:	481e      	ldr	r0, [pc, #120]	; (8001984 <_Z8WIN_GAMEv+0xcc>)
 800190a:	f7ff f8d7 	bl	8000abc <_ZN3Map11Display_mapEv>
	  ssd1306_UpdateScreen();
 800190e:	f000 fd0f 	bl	8002330 <ssd1306_UpdateScreen>
	  HAL_Delay(4500);
 8001912:	f241 1094 	movw	r0, #4500	; 0x1194
 8001916:	f001 f88f 	bl	8002a38 <HAL_Delay>
	//---WIN SCREEN---//
	for(int i=0;i>=0;i++){
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db29      	blt.n	8001978 <_Z8WIN_GAMEv+0xc0>
	 ssd1306_Fill(White);
 8001924:	2001      	movs	r0, #1
 8001926:	f000 fcdf 	bl	80022e8 <ssd1306_Fill>
     ssd1306_DrawBitmap(0, 0, Bitmap_win, 128, 64, Black);
 800192a:	2300      	movs	r3, #0
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2340      	movs	r3, #64	; 0x40
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <_Z8WIN_GAMEv+0xd0>)
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f000 fe3b 	bl	80025b4 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 800193e:	f000 fcf7 	bl	8002330 <ssd1306_UpdateScreen>
     HAL_Delay(700);
 8001942:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001946:	f001 f877 	bl	8002a38 <HAL_Delay>
     ssd1306_Fill(Black);
 800194a:	2000      	movs	r0, #0
 800194c:	f000 fccc 	bl	80022e8 <ssd1306_Fill>
     ssd1306_DrawBitmap(0, 0, Bitmap_win, 128, 64,White);
 8001950:	2301      	movs	r3, #1
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2340      	movs	r3, #64	; 0x40
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <_Z8WIN_GAMEv+0xd0>)
 800195c:	2100      	movs	r1, #0
 800195e:	2000      	movs	r0, #0
 8001960:	f000 fe28 	bl	80025b4 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 8001964:	f000 fce4 	bl	8002330 <ssd1306_UpdateScreen>
     HAL_Delay(700);
 8001968:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800196c:	f001 f864 	bl	8002a38 <HAL_Delay>
	for(int i=0;i>=0;i++){
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	e7d2      	b.n	800191e <_Z8WIN_GAMEv+0x66>
	}
	}
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000190 	.word	0x20000190
 8001984:	20000148 	.word	0x20000148
 8001988:	080061a0 	.word	0x080061a0

0800198c <_Z4JumpR6PlayerRiS1_>:
/*-------------------jump function------------------------------------------*/
	void Jump(Player &player,int &jump_height,int &barrier){
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]

	 if((jump_height>0)&&(barrier==true))
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dd1a      	ble.n	80019d6 <_Z4JumpR6PlayerRiS1_+0x4a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d116      	bne.n	80019d6 <_Z4JumpR6PlayerRiS1_+0x4a>
	 {
		player.pos_y--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	611a      	str	r2, [r3, #16]
	    jump_height--;   /////////////////////////////////////////////////////
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	601a      	str	r2, [r3, #0]
		player.pos_y--; /* if gravitation is off we can jump on Jump_height */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	611a      	str	r2, [r3, #16]
		jump_height--; /*     in jump we are losing Jump_height             */
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1e5a      	subs	r2, r3, #1
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	601a      	str	r2, [r3, #0]
		barrier=true; /*    when we are jumping gravitation is off          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
                     /////////////////////////////////////////////////////////
		}
	 if(jump_height==0){
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <_Z4JumpR6PlayerRiS1_+0x58>
		 barrier=false;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
	 }
	 }
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_Z11GravitationR6PlayeriRi>:

/*---------------------gravitation function-----------------------------------*/
	void Gravitation(Player &player,int ground_level,int &barrier){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]

	  player.generateHIT();//generating actual hit box of player
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff fa5f 	bl	8000ec0 <_ZN6Player11generateHITEv>

	 if(player.BHIT>=ground_level){
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dc07      	bgt.n	8001a1c <_Z11GravitationR6PlayeriRi+0x2c>
		barrier=true;// if player hit the ground
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
		player.Player_live--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
	 }

	if(barrier==false){ // if player is in free air we are falling fastest
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d109      	bne.n	8001a38 <_Z11GravitationR6PlayeriRi+0x48>
		player.pos_y++;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
		player.pos_y++;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	611a      	str	r2, [r3, #16]
	 }
	}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_Z13Check_buttonsR6Playeri>:

/*----------------------checking buttons---------------------------------------*/
	void Check_buttons(Player &player,int barrier){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
		player.generateHIT();//generating actual hit box of player
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fa38 	bl	8000ec0 <_ZN6Player11generateHITEv>

		if((HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0)&&(barrier==true))//jumping
 8001a50:	2120      	movs	r1, #32
 8001a52:	4820      	ldr	r0, [pc, #128]	; (8001ad4 <_Z13Check_buttonsR6Playeri+0x94>)
 8001a54:	f001 fa78 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d104      	bne.n	8001a68 <_Z13Check_buttonsR6Playeri+0x28>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <_Z13Check_buttonsR6Playeri+0x28>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <_Z13Check_buttonsR6Playeri+0x2a>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <_Z13Check_buttonsR6Playeri+0x42>
		{
          if((Jump_height==0)&&(barrier==true)){//checking if player has end his jump
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <_Z13Check_buttonsR6Playeri+0x98>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <_Z13Check_buttonsR6Playeri+0x42>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d102      	bne.n	8001a82 <_Z13Check_buttonsR6Playeri+0x42>
        	  Jump_height=18;                   // and if he is on something that he jump of
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <_Z13Check_buttonsR6Playeri+0x98>)
 8001a7e:	2212      	movs	r2, #18
 8001a80:	601a      	str	r2, [r3, #0]
          }
		}

		if(HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin)==0){ //go into right side
 8001a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8a:	f001 fa5d 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <_Z13Check_buttonsR6Playeri+0x68>
			player.pos_x++;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]
		}
		if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin)==0){//go into left side
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <_Z13Check_buttonsR6Playeri+0x94>)
 8001aac:	f001 fa4c 	bl	8002f48 <HAL_GPIO_ReadPin>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <_Z13Check_buttonsR6Playeri+0x8a>
			player.pos_x--;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	1e5a      	subs	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60da      	str	r2, [r3, #12]
		}
		}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	20000524 	.word	0x20000524

08001adc <_Z19Display_Over_Screenv>:
/*-----------------------------GAME OVER SCREEN--------------------------------*/
	void Display_Over_Screen(){//displaying a 128x64 game over bitmap function
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af02      	add	r7, sp, #8
		ssd1306_Fill(Black);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 fc00 	bl	80022e8 <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, Bitmap_game_over, 128, 64, White);
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	2340      	movs	r3, #64	; 0x40
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <_Z19Display_Over_Screenv+0x34>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 fd5c 	bl	80025b4 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 8001afc:	f000 fc18 	bl	8002330 <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 8001b00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b04:	f000 ff98 	bl	8002a38 <HAL_Delay>
	}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	080055a0 	.word	0x080055a0

08001b14 <_ZN4CoinC1ERKS_>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"

class Coin {
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <_ZN4CoinC1ERKS_+0x78>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	621a      	str	r2, [r3, #32]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	08005550 	.word	0x08005550

08001b90 <_Z4Game6PlayerRiS0_>:

/*-----------------------------GAME LOOP----------------------------------------*/
	void Game(Player player,int &barrier,int &Jump_height){//main loop of boxi game
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b098      	sub	sp, #96	; 0x60
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
	if(player.Player_live>0){//if player is alive
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f340 80ac 	ble.w	8001cfe <_Z4Game6PlayerRiS0_+0x16e>

		//---------DISPLAYING LAST FRAME-----------//
		//displaying all objects//
		  ssd1306_Fill(Black);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 fb9e 	bl	80022e8 <ssd1306_Fill>
		  boxi.Display_Player_hearts();
 8001bac:	4857      	ldr	r0, [pc, #348]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001bae:	f7ff f935 	bl	8000e1c <_ZN6Player21Display_Player_heartsEv>
		  map1.Display_map();
 8001bb2:	4857      	ldr	r0, [pc, #348]	; (8001d10 <_Z4Game6PlayerRiS0_+0x180>)
 8001bb4:	f7fe ff82 	bl	8000abc <_ZN3Map11Display_mapEv>
          c1.Display_Coin();
 8001bb8:	4856      	ldr	r0, [pc, #344]	; (8001d14 <_Z4Game6PlayerRiS0_+0x184>)
 8001bba:	f7fe ff0a 	bl	80009d2 <_ZN4Coin12Display_CoinEv>

		  for(int i=0; i<=9; i++){//displaying blocks
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc4:	2b09      	cmp	r3, #9
 8001bc6:	dc0c      	bgt.n	8001be2 <_Z4Game6PlayerRiS0_+0x52>
			  B[i].Display_Block();
 8001bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bca:	2234      	movs	r2, #52	; 0x34
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <_Z4Game6PlayerRiS0_+0x188>)
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fce9 	bl	80005ac <_ZN5Block13Display_BlockEv>
		  for(int i=0; i<=9; i++){//displaying blocks
 8001bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bdc:	3301      	adds	r3, #1
 8001bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be0:	e7ef      	b.n	8001bc2 <_Z4Game6PlayerRiS0_+0x32>
		  }

		  for(int i=0; i<=5; i++){//displaying spikes
 8001be2:	2300      	movs	r3, #0
 8001be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	dc0d      	bgt.n	8001c08 <_Z4Game6PlayerRiS0_+0x78>
		      S[i].Display_Spike();
 8001bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <_Z4Game6PlayerRiS0_+0x18c>)
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fa70 	bl	80010e0 <_ZN5Spike13Display_SpikeEv>
		  for(int i=0; i<=5; i++){//displaying spikes
 8001c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c02:	3301      	adds	r3, #1
 8001c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c06:	e7ee      	b.n	8001be6 <_Z4Game6PlayerRiS0_+0x56>
		   }

		  m1.Display_mob();//displaying mob
 8001c08:	4845      	ldr	r0, [pc, #276]	; (8001d20 <_Z4Game6PlayerRiS0_+0x190>)
 8001c0a:	f7ff f872 	bl	8000cf2 <_ZN3Mob11Display_mobEv>

		  boxi.Display_Player();//displaying boxi
 8001c0e:	483f      	ldr	r0, [pc, #252]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c10:	f7ff f8e8 	bl	8000de4 <_ZN6Player14Display_PlayerEv>

		  //updating the screen//
		  ssd1306_UpdateScreen();
 8001c14:	f000 fb8c 	bl	8002330 <ssd1306_UpdateScreen>

		  //----------MOVING BLOCKS------------------//
		  B[7].Move_Block(Block_1_A, Block_1_B, barrier,boxi);
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <_Z4Game6PlayerRiS0_+0x194>)
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <_Z4Game6PlayerRiS0_+0x198>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4841      	ldr	r0, [pc, #260]	; (8001d2c <_Z4Game6PlayerRiS0_+0x19c>)
 8001c28:	f7fe fd65 	bl	80006f6 <_ZN5Block10Move_BlockEiiRiR6Player>

		  //----------MOVING MOBS-------------------//
		  m1.Move_mob(Mob_1_A,Mob_1_B);
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <_Z4Game6PlayerRiS0_+0x1a0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a40      	ldr	r2, [pc, #256]	; (8001d34 <_Z4Game6PlayerRiS0_+0x1a4>)
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	483a      	ldr	r0, [pc, #232]	; (8001d20 <_Z4Game6PlayerRiS0_+0x190>)
 8001c38:	f7ff f822 	bl	8000c80 <_ZN3Mob8Move_mobEii>

		  //--------CHECKING BARRIERS----------------//
		  c1.Check(boxi,current_map);
 8001c3c:	4a3e      	ldr	r2, [pc, #248]	; (8001d38 <_Z4Game6PlayerRiS0_+0x1a8>)
 8001c3e:	4933      	ldr	r1, [pc, #204]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c40:	4834      	ldr	r0, [pc, #208]	; (8001d14 <_Z4Game6PlayerRiS0_+0x184>)
 8001c42:	f7fe fe13 	bl	800086c <_ZN4Coin5CheckER6PlayerRi>
		  m1.check(boxi);
 8001c46:	4931      	ldr	r1, [pc, #196]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c48:	4835      	ldr	r0, [pc, #212]	; (8001d20 <_Z4Game6PlayerRiS0_+0x190>)
 8001c4a:	f7fe ffbf 	bl	8000bcc <_ZN3Mob5checkER6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 8001c4e:	2300      	movs	r3, #0
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
 8001c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	dc0f      	bgt.n	8001c78 <_Z4Game6PlayerRiS0_+0xe8>
		  	 S[i].Check(barrier, boxi);
 8001c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <_Z4Game6PlayerRiS0_+0x18c>)
 8001c64:	4413      	add	r3, r2
 8001c66:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f9bc 	bl	8000fe8 <_ZN5Spike5CheckERiR6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 8001c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c72:	3301      	adds	r3, #1
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
 8001c76:	e7ec      	b.n	8001c52 <_Z4Game6PlayerRiS0_+0xc2>
		  }


		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001c78:	2300      	movs	r3, #0
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7e:	2b09      	cmp	r3, #9
 8001c80:	dc0e      	bgt.n	8001ca0 <_Z4Game6PlayerRiS0_+0x110>
		  	B[i].Check(barrier, boxi);
 8001c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c84:	2234      	movs	r2, #52	; 0x34
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <_Z4Game6PlayerRiS0_+0x188>)
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fca6 	bl	80005e4 <_ZN5Block5CheckERiR6Player>
		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c9e:	e7ed      	b.n	8001c7c <_Z4Game6PlayerRiS0_+0xec>
		  }

		  //----------GRAVITATION FUNCTION----------//
		  Gravitation(boxi, ground_level,barrier);
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <_Z4Game6PlayerRiS0_+0x1ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4818      	ldr	r0, [pc, #96]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001caa:	f7ff fea1 	bl	80019f0 <_Z11GravitationR6PlayeriRi>
		  //--------BUTTONS CHECKING ---------------//
	      Check_buttons(boxi,barrier);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4815      	ldr	r0, [pc, #84]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001cb6:	f7ff fec3 	bl	8001a40 <_Z13Check_buttonsR6Playeri>
	      //----------JUMPING FUNCTION--------------//
	      Jump(boxi,Jump_height,barrier);
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4813      	ldr	r0, [pc, #76]	; (8001d0c <_Z4Game6PlayerRiS0_+0x17c>)
 8001cc0:	f7ff fe64 	bl	800198c <_Z4JumpR6PlayerRiS1_>
	      //-----------CHANGE MAP FUNCTION----------//
	      change_map(current_map,is_map_changed,Block_1_A,Block_1_B,Mob_1_A,Mob_1_B,c1);
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4912      	ldr	r1, [pc, #72]	; (8001d14 <_Z4Game6PlayerRiS0_+0x184>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff22 	bl	8001b14 <_ZN4CoinC1ERKS_>
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <_Z4Game6PlayerRiS0_+0x1a4>)
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_Z4Game6PlayerRiS0_+0x1a0>)
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <_Z4Game6PlayerRiS0_+0x198>)
 8001ce0:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <_Z4Game6PlayerRiS0_+0x194>)
 8001ce2:	4917      	ldr	r1, [pc, #92]	; (8001d40 <_Z4Game6PlayerRiS0_+0x1b0>)
 8001ce4:	4814      	ldr	r0, [pc, #80]	; (8001d38 <_Z4Game6PlayerRiS0_+0x1a8>)
 8001ce6:	f7ff fb59 	bl	800139c <_Z10change_mapRiS_S_S_S_S_4Coin>
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fea2 	bl	8000a38 <_ZN4CoinD1Ev>
	      //------------WIN FUNCTION----------------//
	      WIN_GAME();
 8001cf4:	f7ff fde0 	bl	80018b8 <_Z8WIN_GAMEv>
	      //-------------easter egg----------------//
	      easter_egg();
 8001cf8:	f7ff fd76 	bl	80017e8 <_Z10easter_eggv>

	}
	else {
		Display_Over_Screen();
	}
}
 8001cfc:	e001      	b.n	8001d02 <_Z4Game6PlayerRiS0_+0x172>
		Display_Over_Screen();
 8001cfe:	f7ff feed 	bl	8001adc <_Z19Display_Over_Screenv>
}
 8001d02:	bf00      	nop
 8001d04:	3750      	adds	r7, #80	; 0x50
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000190 	.word	0x20000190
 8001d10:	20000130 	.word	0x20000130
 8001d14:	200004ec 	.word	0x200004ec
 8001d18:	200001c0 	.word	0x200001c0
 8001d1c:	200003fc 	.word	0x200003fc
 8001d20:	200003c8 	.word	0x200003c8
 8001d24:	20000048 	.word	0x20000048
 8001d28:	2000004c 	.word	0x2000004c
 8001d2c:	2000032c 	.word	0x2000032c
 8001d30:	20000040 	.word	0x20000040
 8001d34:	20000044 	.word	0x20000044
 8001d38:	20000520 	.word	0x20000520
 8001d3c:	2000003c 	.word	0x2000003c
 8001d40:	2000051c 	.word	0x2000051c

08001d44 <_ZN6PlayerC1ERKS_>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#ifndef INC_PLAYER_H_
#define INC_PLAYER_H_

class Player {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <_ZN6PlayerC1ERKS_+0x78>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	615a      	str	r2, [r3, #20]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	61da      	str	r2, [r3, #28]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	621a      	str	r2, [r3, #32]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	08005588 	.word	0x08005588

08001dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	; 0x30
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc6:	f000 fdc6 	bl	8002956 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dca:	f000 f89d 	bl	8001f08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dce:	f7ff f9d5 	bl	800117c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dd2:	f000 fcf3 	bl	80027bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001dd6:	f7ff fa2b 	bl	8001230 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  //Initialize  of libraries//
  	  ssd1306_Init();
 8001dda:	f000 fa1b 	bl	8002214 <ssd1306_Init>

  	  //fill black the display
  	  ssd1306_Fill(Black);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f000 fa82 	bl	80022e8 <ssd1306_Fill>
  	  ssd1306_UpdateScreen();
 8001de4:	f000 faa4 	bl	8002330 <ssd1306_UpdateScreen>
  	//-----POSITIONING OBJECTS-----//
     //--------BLOCKS------------//
  	  B[0].Change_position(1,52);
 8001de8:	2234      	movs	r2, #52	; 0x34
 8001dea:	2101      	movs	r1, #1
 8001dec:	4832      	ldr	r0, [pc, #200]	; (8001eb8 <main+0xf8>)
 8001dee:	f7fe fce5 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[1].Change_position(11,52);
 8001df2:	2234      	movs	r2, #52	; 0x34
 8001df4:	210b      	movs	r1, #11
 8001df6:	4831      	ldr	r0, [pc, #196]	; (8001ebc <main+0xfc>)
 8001df8:	f7fe fce0 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[2].Change_position(21,52);
 8001dfc:	2234      	movs	r2, #52	; 0x34
 8001dfe:	2115      	movs	r1, #21
 8001e00:	482f      	ldr	r0, [pc, #188]	; (8001ec0 <main+0x100>)
 8001e02:	f7fe fcdb 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[3].Change_position(41,42);
 8001e06:	222a      	movs	r2, #42	; 0x2a
 8001e08:	2129      	movs	r1, #41	; 0x29
 8001e0a:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <main+0x104>)
 8001e0c:	f7fe fcd6 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[4].Change_position(41,52);
 8001e10:	2234      	movs	r2, #52	; 0x34
 8001e12:	2129      	movs	r1, #41	; 0x29
 8001e14:	482c      	ldr	r0, [pc, #176]	; (8001ec8 <main+0x108>)
 8001e16:	f7fe fcd1 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[5].Change_position(71,42);
 8001e1a:	222a      	movs	r2, #42	; 0x2a
 8001e1c:	2147      	movs	r1, #71	; 0x47
 8001e1e:	482b      	ldr	r0, [pc, #172]	; (8001ecc <main+0x10c>)
 8001e20:	f7fe fccc 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[6].Change_position(71,52);
 8001e24:	2234      	movs	r2, #52	; 0x34
 8001e26:	2147      	movs	r1, #71	; 0x47
 8001e28:	4829      	ldr	r0, [pc, #164]	; (8001ed0 <main+0x110>)
 8001e2a:	f7fe fcc7 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[7].Change_position(91,42);
 8001e2e:	222a      	movs	r2, #42	; 0x2a
 8001e30:	215b      	movs	r1, #91	; 0x5b
 8001e32:	4828      	ldr	r0, [pc, #160]	; (8001ed4 <main+0x114>)
 8001e34:	f7fe fcc2 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[8].Change_position(117,42);
 8001e38:	222a      	movs	r2, #42	; 0x2a
 8001e3a:	2175      	movs	r1, #117	; 0x75
 8001e3c:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <main+0x118>)
 8001e3e:	f7fe fcbd 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[9].Change_position(117,52);
 8001e42:	2234      	movs	r2, #52	; 0x34
 8001e44:	2175      	movs	r1, #117	; 0x75
 8001e46:	4825      	ldr	r0, [pc, #148]	; (8001edc <main+0x11c>)
 8001e48:	f7fe fcb8 	bl	80007bc <_ZN5Block15Change_positionEii>
  	 //--------SPIKES--------------//
  	  S[0].Change_position(51, 56);
 8001e4c:	2238      	movs	r2, #56	; 0x38
 8001e4e:	2133      	movs	r1, #51	; 0x33
 8001e50:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <main+0x120>)
 8001e52:	f7ff f961 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[1].Change_position(56, 56);
 8001e56:	2238      	movs	r2, #56	; 0x38
 8001e58:	2138      	movs	r1, #56	; 0x38
 8001e5a:	4822      	ldr	r0, [pc, #136]	; (8001ee4 <main+0x124>)
 8001e5c:	f7ff f95c 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[2].Change_position(61, 56);
 8001e60:	2238      	movs	r2, #56	; 0x38
 8001e62:	213d      	movs	r1, #61	; 0x3d
 8001e64:	4820      	ldr	r0, [pc, #128]	; (8001ee8 <main+0x128>)
 8001e66:	f7ff f957 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[3].Change_position(66, 56);
 8001e6a:	2238      	movs	r2, #56	; 0x38
 8001e6c:	2142      	movs	r1, #66	; 0x42
 8001e6e:	481f      	ldr	r0, [pc, #124]	; (8001eec <main+0x12c>)
 8001e70:	f7ff f952 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[4].Change_position(31, 56);
 8001e74:	2238      	movs	r2, #56	; 0x38
 8001e76:	211f      	movs	r1, #31
 8001e78:	481d      	ldr	r0, [pc, #116]	; (8001ef0 <main+0x130>)
 8001e7a:	f7ff f94d 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[5].Change_position(36, 56);
 8001e7e:	2238      	movs	r2, #56	; 0x38
 8001e80:	2124      	movs	r1, #36	; 0x24
 8001e82:	481c      	ldr	r0, [pc, #112]	; (8001ef4 <main+0x134>)
 8001e84:	f7ff f948 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  c1.Change_position(119, 36);
 8001e88:	2224      	movs	r2, #36	; 0x24
 8001e8a:	2177      	movs	r1, #119	; 0x77
 8001e8c:	481a      	ldr	r0, [pc, #104]	; (8001ef8 <main+0x138>)
 8001e8e:	f7fe fdc0 	bl	8000a12 <_ZN4Coin15Change_positionEii>
  	 /* Initialize random number generator */
  	    TM_RNG_Init();
 8001e92:	f000 fc7b 	bl	800278c <_Z11TM_RNG_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Game(boxi,barrier,Jump_height); //Game loop
 8001e96:	463b      	mov	r3, r7
 8001e98:	4918      	ldr	r1, [pc, #96]	; (8001efc <main+0x13c>)
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff52 	bl	8001d44 <_ZN6PlayerC1ERKS_>
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <main+0x140>)
 8001ea4:	4917      	ldr	r1, [pc, #92]	; (8001f04 <main+0x144>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fe72 	bl	8001b90 <_Z4Game6PlayerRiS0_>
 8001eac:	463b      	mov	r3, r7
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f838 	bl	8000f24 <_ZN6PlayerD1Ev>
 8001eb4:	e7ef      	b.n	8001e96 <main+0xd6>
 8001eb6:	bf00      	nop
 8001eb8:	200001c0 	.word	0x200001c0
 8001ebc:	200001f4 	.word	0x200001f4
 8001ec0:	20000228 	.word	0x20000228
 8001ec4:	2000025c 	.word	0x2000025c
 8001ec8:	20000290 	.word	0x20000290
 8001ecc:	200002c4 	.word	0x200002c4
 8001ed0:	200002f8 	.word	0x200002f8
 8001ed4:	2000032c 	.word	0x2000032c
 8001ed8:	20000360 	.word	0x20000360
 8001edc:	20000394 	.word	0x20000394
 8001ee0:	200003fc 	.word	0x200003fc
 8001ee4:	20000424 	.word	0x20000424
 8001ee8:	2000044c 	.word	0x2000044c
 8001eec:	20000474 	.word	0x20000474
 8001ef0:	2000049c 	.word	0x2000049c
 8001ef4:	200004c4 	.word	0x200004c4
 8001ef8:	200004ec 	.word	0x200004ec
 8001efc:	20000190 	.word	0x20000190
 8001f00:	20000524 	.word	0x20000524
 8001f04:	20000528 	.word	0x20000528

08001f08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	; 0x50
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	2238      	movs	r2, #56	; 0x38
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 faa0 	bl	800545c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f001 fcca 	bl	80038c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3a:	2340      	movs	r3, #64	; 0x40
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f42:	2302      	movs	r3, #2
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001f46:	2304      	movs	r3, #4
 8001f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001f4a:	2355      	movs	r3, #85	; 0x55
 8001f4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f56:	2302      	movs	r3, #2
 8001f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5a:	f107 0318 	add.w	r3, r7, #24
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 fd54 	bl	8003a0c <HAL_RCC_OscConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001f74:	f000 f81d 	bl	8001fb2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f78:	230f      	movs	r3, #15
 8001f7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2104      	movs	r1, #4
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 f853 	bl	800403c <HAL_RCC_ClockConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001fa6:	f000 f804 	bl	8001fb2 <Error_Handler>
  }
}
 8001faa:	bf00      	nop
 8001fac:	3750      	adds	r7, #80	; 0x50
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb6:	b672      	cpsid	i
}
 8001fb8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fba:	e7fe      	b.n	8001fba <Error_Handler+0x8>

08001fbc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af06      	add	r7, sp, #24
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d17c      	bne.n	80020c6 <_Z41__static_initialization_and_destruction_0ii+0x10a>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d177      	bne.n	80020c6 <_Z41__static_initialization_and_destruction_0ii+0x10a>
#include"string.h"
#include "Spike.h"
#include "Coin.h"

 // creating a map//
Map map1(Bitmap_map);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2340      	movs	r3, #64	; 0x40
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	4953      	ldr	r1, [pc, #332]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8001fe4:	4853      	ldr	r0, [pc, #332]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8001fe6:	f7fe fd47 	bl	8000a78 <_ZN3MapC1EPKhiiii>
Map castle_map(Bitmap_castle);
 8001fea:	2300      	movs	r3, #0
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2340      	movs	r3, #64	; 0x40
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	4950      	ldr	r1, [pc, #320]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8001ff8:	4850      	ldr	r0, [pc, #320]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8001ffa:	f7fe fd3d 	bl	8000a78 <_ZN3MapC1EPKhiiii>
Map Win_map(Bitmap_win);
 8001ffe:	2300      	movs	r3, #0
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	2300      	movs	r3, #0
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2340      	movs	r3, #64	; 0x40
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	494d      	ldr	r1, [pc, #308]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800200c:	484d      	ldr	r0, [pc, #308]	; (8002144 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 800200e:	f7fe fd33 	bl	8000a78 <_ZN3MapC1EPKhiiii>
Map easter_egg_map(Bitmap_easter_egg);
 8002012:	2300      	movs	r3, #0
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	2300      	movs	r3, #0
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2340      	movs	r3, #64	; 0x40
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	494a      	ldr	r1, [pc, #296]	; (8002148 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002020:	484a      	ldr	r0, [pc, #296]	; (800214c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8002022:	f7fe fd29 	bl	8000a78 <_ZN3MapC1EPKhiiii>
// creating the player//
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 8002026:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	2303      	movs	r3, #3
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	2308      	movs	r3, #8
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2308      	movs	r3, #8
 8002034:	2204      	movs	r2, #4
 8002036:	210a      	movs	r1, #10
 8002038:	4846      	ldr	r0, [pc, #280]	; (8002154 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800203a:	f7fe fead 	bl	8000d98 <_ZN6PlayerC1EiiiiiPKh>

//creating blocks//
Block B[10];
 800203e:	4b46      	ldr	r3, [pc, #280]	; (8002158 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002040:	2409      	movs	r4, #9
 8002042:	461d      	mov	r5, r3
 8002044:	2c00      	cmp	r4, #0
 8002046:	db10      	blt.n	800206a <_Z41__static_initialization_and_destruction_0ii+0xae>
 8002048:	2301      	movs	r3, #1
 800204a:	9303      	str	r3, [sp, #12]
 800204c:	2300      	movs	r3, #0
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	4b42      	ldr	r3, [pc, #264]	; (800215c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	230a      	movs	r3, #10
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	230a      	movs	r3, #10
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	4628      	mov	r0, r5
 8002060:	f7fe fa5c 	bl	800051c <_ZN5BlockC1EiiiiPKhii>
 8002064:	3534      	adds	r5, #52	; 0x34
 8002066:	3c01      	subs	r4, #1
 8002068:	e7ec      	b.n	8002044 <_Z41__static_initialization_and_destruction_0ii+0x88>

//creating Mobs//
Mob m1(95,54);
 800206a:	2300      	movs	r3, #0
 800206c:	9304      	str	r3, [sp, #16]
 800206e:	2301      	movs	r3, #1
 8002070:	9303      	str	r3, [sp, #12]
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	2308      	movs	r3, #8
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	2308      	movs	r3, #8
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2301      	movs	r3, #1
 8002080:	2236      	movs	r2, #54	; 0x36
 8002082:	215f      	movs	r1, #95	; 0x5f
 8002084:	4837      	ldr	r0, [pc, #220]	; (8002164 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8002086:	f7fe fd55 	bl	8000b34 <_ZN3MobC1EiiiiiPKhii>

//creating spikes//
Spike S[6];
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800208c:	2405      	movs	r4, #5
 800208e:	461d      	mov	r5, r3
 8002090:	2c00      	cmp	r4, #0
 8002092:	db0c      	blt.n	80020ae <_Z41__static_initialization_and_destruction_0ii+0xf2>
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	2305      	movs	r3, #5
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2305      	movs	r3, #5
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	4628      	mov	r0, r5
 80020a4:	f7fe ff5e 	bl	8000f64 <_ZN5SpikeC1EiiiiPKh>
 80020a8:	3528      	adds	r5, #40	; 0x28
 80020aa:	3c01      	subs	r4, #1
 80020ac:	e7f0      	b.n	8002090 <_Z41__static_initialization_and_destruction_0ii+0xd4>

//creating coins
Coin c1(119,36);
 80020ae:	2301      	movs	r3, #1
 80020b0:	9302      	str	r3, [sp, #8]
 80020b2:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	2306      	movs	r3, #6
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2306      	movs	r3, #6
 80020bc:	2224      	movs	r2, #36	; 0x24
 80020be:	2177      	movs	r1, #119	; 0x77
 80020c0:	482c      	ldr	r0, [pc, #176]	; (8002174 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80020c2:	f7fe fbad 	bl	8000820 <_ZN4CoinC1EiiiiPKhi>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d12d      	bne.n	8002128 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d128      	bne.n	8002128 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 80020d6:	4827      	ldr	r0, [pc, #156]	; (8002174 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80020d8:	f7fe fcae 	bl	8000a38 <_ZN4CoinD1Ev>
Spike S[6];
 80020dc:	4c26      	ldr	r4, [pc, #152]	; (8002178 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 80020e0:	429c      	cmp	r4, r3
 80020e2:	d005      	beq.n	80020f0 <_Z41__static_initialization_and_destruction_0ii+0x134>
 80020e4:	3c28      	subs	r4, #40	; 0x28
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4620      	mov	r0, r4
 80020ec:	4798      	blx	r3
 80020ee:	e7f6      	b.n	80020de <_Z41__static_initialization_and_destruction_0ii+0x122>
Mob m1(95,54);
 80020f0:	481c      	ldr	r0, [pc, #112]	; (8002164 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 80020f2:	f7fe fe31 	bl	8000d58 <_ZN3MobD1Ev>
Block B[10];
 80020f6:	4c21      	ldr	r4, [pc, #132]	; (800217c <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 80020fa:	429c      	cmp	r4, r3
 80020fc:	d005      	beq.n	800210a <_Z41__static_initialization_and_destruction_0ii+0x14e>
 80020fe:	3c34      	subs	r4, #52	; 0x34
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4620      	mov	r0, r4
 8002106:	4798      	blx	r3
 8002108:	e7f6      	b.n	80020f8 <_Z41__static_initialization_and_destruction_0ii+0x13c>
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 800210a:	4812      	ldr	r0, [pc, #72]	; (8002154 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800210c:	f7fe ff0a 	bl	8000f24 <_ZN6PlayerD1Ev>
Map easter_egg_map(Bitmap_easter_egg);
 8002110:	480e      	ldr	r0, [pc, #56]	; (800214c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8002112:	f7fe fcef 	bl	8000af4 <_ZN3MapD1Ev>
Map Win_map(Bitmap_win);
 8002116:	480b      	ldr	r0, [pc, #44]	; (8002144 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8002118:	f7fe fcec 	bl	8000af4 <_ZN3MapD1Ev>
Map castle_map(Bitmap_castle);
 800211c:	4807      	ldr	r0, [pc, #28]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800211e:	f7fe fce9 	bl	8000af4 <_ZN3MapD1Ev>
Map map1(Bitmap_map);
 8002122:	4804      	ldr	r0, [pc, #16]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002124:	f7fe fce6 	bl	8000af4 <_ZN3MapD1Ev>
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
 8002130:	080059a0 	.word	0x080059a0
 8002134:	20000130 	.word	0x20000130
 8002138:	08005da0 	.word	0x08005da0
 800213c:	20000148 	.word	0x20000148
 8002140:	080061a0 	.word	0x080061a0
 8002144:	20000160 	.word	0x20000160
 8002148:	080065a0 	.word	0x080065a0
 800214c:	20000178 	.word	0x20000178
 8002150:	080069a0 	.word	0x080069a0
 8002154:	20000190 	.word	0x20000190
 8002158:	200001c0 	.word	0x200001c0
 800215c:	080069a8 	.word	0x080069a8
 8002160:	080069bc 	.word	0x080069bc
 8002164:	200003c8 	.word	0x200003c8
 8002168:	200003fc 	.word	0x200003fc
 800216c:	080069c4 	.word	0x080069c4
 8002170:	080069cc 	.word	0x080069cc
 8002174:	200004ec 	.word	0x200004ec
 8002178:	200004ec 	.word	0x200004ec
 800217c:	200003c8 	.word	0x200003c8

08002180 <_GLOBAL__sub_I_map1>:
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
 8002184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff ff17 	bl	8001fbc <_Z41__static_initialization_and_destruction_0ii>
 800218e:	bd80      	pop	{r7, pc}

08002190 <_GLOBAL__sub_D_map1>:
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
 8002194:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff ff0f 	bl	8001fbc <_Z41__static_initialization_and_destruction_0ii>
 800219e:	bd80      	pop	{r7, pc}

080021a0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af04      	add	r7, sp, #16
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	1dfb      	adds	r3, r7, #7
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2301      	movs	r3, #1
 80021ca:	2200      	movs	r2, #0
 80021cc:	2178      	movs	r1, #120	; 0x78
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <ssd1306_WriteCommand+0x2c>)
 80021d0:	f000 ff7a 	bl	80030c8 <HAL_I2C_Mem_Write>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200000e4 	.word	0x200000e4

080021e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	f04f 32ff 	mov.w	r2, #4294967295
 80021f2:	9202      	str	r2, [sp, #8]
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2301      	movs	r3, #1
 80021fc:	2240      	movs	r2, #64	; 0x40
 80021fe:	2178      	movs	r1, #120	; 0x78
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <ssd1306_WriteData+0x30>)
 8002202:	f000 ff61 	bl	80030c8 <HAL_I2C_Mem_Write>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200000e4 	.word	0x200000e4

08002214 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002218:	f7ff ffc2 	bl	80021a0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800221c:	2064      	movs	r0, #100	; 0x64
 800221e:	f000 fc0b 	bl	8002a38 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002222:	2000      	movs	r0, #0
 8002224:	f000 fa34 	bl	8002690 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002228:	2020      	movs	r0, #32
 800222a:	f7ff ffc1 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff ffbe 	bl	80021b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002234:	20b0      	movs	r0, #176	; 0xb0
 8002236:	f7ff ffbb 	bl	80021b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800223a:	20c8      	movs	r0, #200	; 0xc8
 800223c:	f7ff ffb8 	bl	80021b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002240:	2000      	movs	r0, #0
 8002242:	f7ff ffb5 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002246:	2010      	movs	r0, #16
 8002248:	f7ff ffb2 	bl	80021b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800224c:	2040      	movs	r0, #64	; 0x40
 800224e:	f7ff ffaf 	bl	80021b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002252:	20ff      	movs	r0, #255	; 0xff
 8002254:	f000 fa09 	bl	800266a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002258:	20a1      	movs	r0, #161	; 0xa1
 800225a:	f7ff ffa9 	bl	80021b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800225e:	20a6      	movs	r0, #166	; 0xa6
 8002260:	f7ff ffa6 	bl	80021b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002264:	20a8      	movs	r0, #168	; 0xa8
 8002266:	f7ff ffa3 	bl	80021b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800226a:	203f      	movs	r0, #63	; 0x3f
 800226c:	f7ff ffa0 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002270:	20a4      	movs	r0, #164	; 0xa4
 8002272:	f7ff ff9d 	bl	80021b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002276:	20d3      	movs	r0, #211	; 0xd3
 8002278:	f7ff ff9a 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff ff97 	bl	80021b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002282:	20d5      	movs	r0, #213	; 0xd5
 8002284:	f7ff ff94 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002288:	20f0      	movs	r0, #240	; 0xf0
 800228a:	f7ff ff91 	bl	80021b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800228e:	20d9      	movs	r0, #217	; 0xd9
 8002290:	f7ff ff8e 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002294:	2022      	movs	r0, #34	; 0x22
 8002296:	f7ff ff8b 	bl	80021b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800229a:	20da      	movs	r0, #218	; 0xda
 800229c:	f7ff ff88 	bl	80021b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80022a0:	2012      	movs	r0, #18
 80022a2:	f7ff ff85 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80022a6:	20db      	movs	r0, #219	; 0xdb
 80022a8:	f7ff ff82 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80022ac:	2020      	movs	r0, #32
 80022ae:	f7ff ff7f 	bl	80021b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80022b2:	208d      	movs	r0, #141	; 0x8d
 80022b4:	f7ff ff7c 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80022b8:	2014      	movs	r0, #20
 80022ba:	f7ff ff79 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 f9e6 	bl	8002690 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f000 f80f 	bl	80022e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80022ca:	f000 f831 	bl	8002330 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <ssd1306_Init+0xd0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <ssd1306_Init+0xd0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80022da:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <ssd1306_Init+0xd0>)
 80022dc:	2201      	movs	r2, #1
 80022de:	711a      	strb	r2, [r3, #4]
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000092c 	.word	0x2000092c

080022e8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e00d      	b.n	8002314 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <ssd1306_Fill+0x1a>
 80022fe:	2100      	movs	r1, #0
 8002300:	e000      	b.n	8002304 <ssd1306_Fill+0x1c>
 8002302:	21ff      	movs	r1, #255	; 0xff
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <ssd1306_Fill+0x44>)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	460a      	mov	r2, r1
 800230c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3301      	adds	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d3ed      	bcc.n	80022f8 <ssd1306_Fill+0x10>
    }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	2000052c 	.word	0x2000052c

08002330 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	e016      	b.n	800236a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	3b50      	subs	r3, #80	; 0x50
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff34 	bl	80021b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff ff31 	bl	80021b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800234e:	2010      	movs	r0, #16
 8002350:	f7ff ff2e 	bl	80021b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	01db      	lsls	r3, r3, #7
 8002358:	4a08      	ldr	r2, [pc, #32]	; (800237c <ssd1306_UpdateScreen+0x4c>)
 800235a:	4413      	add	r3, r2
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff3e 	bl	80021e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	3301      	adds	r3, #1
 8002368:	71fb      	strb	r3, [r7, #7]
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b07      	cmp	r3, #7
 800236e:	d9e5      	bls.n	800233c <ssd1306_UpdateScreen+0xc>
    }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000052c 	.word	0x2000052c

08002380 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	460b      	mov	r3, r1
 800238c:	71bb      	strb	r3, [r7, #6]
 800238e:	4613      	mov	r3, r2
 8002390:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db3d      	blt.n	8002416 <ssd1306_DrawPixel+0x96>
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	2b3f      	cmp	r3, #63	; 0x3f
 800239e:	d83a      	bhi.n	8002416 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80023a0:	797b      	ldrb	r3, [r7, #5]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d11a      	bne.n	80023dc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80023a6:	79fa      	ldrb	r2, [r7, #7]
 80023a8:	79bb      	ldrb	r3, [r7, #6]
 80023aa:	08db      	lsrs	r3, r3, #3
 80023ac:	b2d8      	uxtb	r0, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	01db      	lsls	r3, r3, #7
 80023b2:	4413      	add	r3, r2
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <ssd1306_DrawPixel+0xa4>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	b25a      	sxtb	r2, r3
 80023ba:	79bb      	ldrb	r3, [r7, #6]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b259      	sxtb	r1, r3
 80023cc:	79fa      	ldrb	r2, [r7, #7]
 80023ce:	4603      	mov	r3, r0
 80023d0:	01db      	lsls	r3, r3, #7
 80023d2:	4413      	add	r3, r2
 80023d4:	b2c9      	uxtb	r1, r1
 80023d6:	4a13      	ldr	r2, [pc, #76]	; (8002424 <ssd1306_DrawPixel+0xa4>)
 80023d8:	54d1      	strb	r1, [r2, r3]
 80023da:	e01d      	b.n	8002418 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80023dc:	79fa      	ldrb	r2, [r7, #7]
 80023de:	79bb      	ldrb	r3, [r7, #6]
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	b2d8      	uxtb	r0, r3
 80023e4:	4603      	mov	r3, r0
 80023e6:	01db      	lsls	r3, r3, #7
 80023e8:	4413      	add	r3, r2
 80023ea:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <ssd1306_DrawPixel+0xa4>)
 80023ec:	5cd3      	ldrb	r3, [r2, r3]
 80023ee:	b25a      	sxtb	r2, r3
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	b25b      	sxtb	r3, r3
 8002402:	4013      	ands	r3, r2
 8002404:	b259      	sxtb	r1, r3
 8002406:	79fa      	ldrb	r2, [r7, #7]
 8002408:	4603      	mov	r3, r0
 800240a:	01db      	lsls	r3, r3, #7
 800240c:	4413      	add	r3, r2
 800240e:	b2c9      	uxtb	r1, r1
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <ssd1306_DrawPixel+0xa4>)
 8002412:	54d1      	strb	r1, [r2, r3]
 8002414:	e000      	b.n	8002418 <ssd1306_DrawPixel+0x98>
        return;
 8002416:	bf00      	nop
    }
}
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000052c 	.word	0x2000052c

08002428 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	4604      	mov	r4, r0
 8002430:	1d38      	adds	r0, r7, #4
 8002432:	e880 0006 	stmia.w	r0, {r1, r2}
 8002436:	461a      	mov	r2, r3
 8002438:	4623      	mov	r3, r4
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	4613      	mov	r3, r2
 800243e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b1f      	cmp	r3, #31
 8002444:	d902      	bls.n	800244c <ssd1306_WriteChar+0x24>
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	2b7e      	cmp	r3, #126	; 0x7e
 800244a:	d901      	bls.n	8002450 <ssd1306_WriteChar+0x28>
        return 0;
 800244c:	2300      	movs	r3, #0
 800244e:	e06d      	b.n	800252c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002450:	4b38      	ldr	r3, [pc, #224]	; (8002534 <ssd1306_WriteChar+0x10c>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	793b      	ldrb	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	dc06      	bgt.n	800246c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <ssd1306_WriteChar+0x10c>)
 8002460:	885b      	ldrh	r3, [r3, #2]
 8002462:	461a      	mov	r2, r3
 8002464:	797b      	ldrb	r3, [r7, #5]
 8002466:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	dd01      	ble.n	8002470 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800246c:	2300      	movs	r3, #0
 800246e:	e05d      	b.n	800252c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	e04c      	b.n	8002510 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	3b20      	subs	r3, #32
 800247c:	7979      	ldrb	r1, [r7, #5]
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4619      	mov	r1, r3
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	440b      	add	r3, r1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	e034      	b.n	8002500 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d012      	beq.n	80024cc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <ssd1306_WriteChar+0x10c>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <ssd1306_WriteChar+0x10c>)
 80024b6:	885b      	ldrh	r3, [r3, #2]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4413      	add	r3, r2
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	7bba      	ldrb	r2, [r7, #14]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7ff ff5b 	bl	8002380 <ssd1306_DrawPixel>
 80024ca:	e016      	b.n	80024fa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <ssd1306_WriteChar+0x10c>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	b2d8      	uxtb	r0, r3
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <ssd1306_WriteChar+0x10c>)
 80024dc:	885b      	ldrh	r3, [r3, #2]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	b2d9      	uxtb	r1, r3
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	f7ff ff43 	bl	8002380 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	793b      	ldrb	r3, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	4293      	cmp	r3, r2
 8002508:	d3c5      	bcc.n	8002496 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	797b      	ldrb	r3, [r7, #5]
 8002512:	461a      	mov	r2, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4293      	cmp	r3, r2
 8002518:	d3ad      	bcc.n	8002476 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <ssd1306_WriteChar+0x10c>)
 800251c:	881a      	ldrh	r2, [r3, #0]
 800251e:	793b      	ldrb	r3, [r7, #4]
 8002520:	b29b      	uxth	r3, r3
 8002522:	4413      	add	r3, r2
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b03      	ldr	r3, [pc, #12]	; (8002534 <ssd1306_WriteChar+0x10c>)
 8002528:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3724      	adds	r7, #36	; 0x24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	2000092c 	.word	0x2000092c

08002538 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	1d38      	adds	r0, r7, #4
 8002542:	e880 0006 	stmia.w	r0, {r1, r2}
 8002546:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002548:	e012      	b.n	8002570 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	7818      	ldrb	r0, [r3, #0]
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	1d3a      	adds	r2, r7, #4
 8002552:	ca06      	ldmia	r2, {r1, r2}
 8002554:	f7ff ff68 	bl	8002428 <ssd1306_WriteChar>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d002      	beq.n	800256a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	e008      	b.n	800257c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3301      	adds	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e8      	bne.n	800254a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	781b      	ldrb	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	460a      	mov	r2, r1
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	4613      	mov	r3, r2
 8002592:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <ssd1306_SetCursor+0x2c>)
 800259a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800259c:	79bb      	ldrb	r3, [r7, #6]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <ssd1306_SetCursor+0x2c>)
 80025a2:	805a      	strh	r2, [r3, #2]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	2000092c 	.word	0x2000092c

080025b4 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	603a      	str	r2, [r7, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	460b      	mov	r3, r1
 80025c4:	71bb      	strb	r3, [r7, #6]
 80025c6:	4613      	mov	r3, r2
 80025c8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80025ca:	797b      	ldrb	r3, [r7, #5]
 80025cc:	3307      	adds	r3, #7
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	da00      	bge.n	80025d4 <ssd1306_DrawBitmap+0x20>
 80025d2:	3307      	adds	r3, #7
 80025d4:	10db      	asrs	r3, r3, #3
 80025d6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db3e      	blt.n	8002662 <ssd1306_DrawBitmap+0xae>
 80025e4:	79bb      	ldrb	r3, [r7, #6]
 80025e6:	2b3f      	cmp	r3, #63	; 0x3f
 80025e8:	d83b      	bhi.n	8002662 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80025ea:	2300      	movs	r3, #0
 80025ec:	73bb      	strb	r3, [r7, #14]
 80025ee:	e033      	b.n	8002658 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80025f0:	2300      	movs	r3, #0
 80025f2:	737b      	strb	r3, [r7, #13]
 80025f4:	e026      	b.n	8002644 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 80025f6:	7b7b      	ldrb	r3, [r7, #13]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e00d      	b.n	8002624 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002608:	7bbb      	ldrb	r3, [r7, #14]
 800260a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	7b7a      	ldrb	r2, [r7, #13]
 8002614:	08d2      	lsrs	r2, r2, #3
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	4413      	add	r3, r2
 800261a:	461a      	mov	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8002624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	da08      	bge.n	800263e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800262c:	79fa      	ldrb	r2, [r7, #7]
 800262e:	7b7b      	ldrb	r3, [r7, #13]
 8002630:	4413      	add	r3, r2
 8002632:	b2db      	uxtb	r3, r3
 8002634:	7f3a      	ldrb	r2, [r7, #28]
 8002636:	79b9      	ldrb	r1, [r7, #6]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fea1 	bl	8002380 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	3301      	adds	r3, #1
 8002642:	737b      	strb	r3, [r7, #13]
 8002644:	7b7a      	ldrb	r2, [r7, #13]
 8002646:	797b      	ldrb	r3, [r7, #5]
 8002648:	429a      	cmp	r2, r3
 800264a:	d3d4      	bcc.n	80025f6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	3301      	adds	r3, #1
 8002650:	73bb      	strb	r3, [r7, #14]
 8002652:	79bb      	ldrb	r3, [r7, #6]
 8002654:	3301      	adds	r3, #1
 8002656:	71bb      	strb	r3, [r7, #6]
 8002658:	7bba      	ldrb	r2, [r7, #14]
 800265a:	7e3b      	ldrb	r3, [r7, #24]
 800265c:	429a      	cmp	r2, r3
 800265e:	d3c7      	bcc.n	80025f0 <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 8002660:	e000      	b.n	8002664 <ssd1306_DrawBitmap+0xb0>
        return;
 8002662:	bf00      	nop
}
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002674:	2381      	movs	r3, #129	; 0x81
 8002676:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fd98 	bl	80021b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd94 	bl	80021b0 <ssd1306_WriteCommand>
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80026a0:	23af      	movs	r3, #175	; 0xaf
 80026a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <ssd1306_SetDisplayOn+0x38>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	715a      	strb	r2, [r3, #5]
 80026aa:	e004      	b.n	80026b6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80026ac:	23ae      	movs	r3, #174	; 0xae
 80026ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <ssd1306_SetDisplayOn+0x38>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fd79 	bl	80021b0 <ssd1306_WriteCommand>
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000092c 	.word	0x2000092c

080026cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_MspInit+0x44>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_MspInit+0x44>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6613      	str	r3, [r2, #96]	; 0x60
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_MspInit+0x44>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_MspInit+0x44>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <HAL_MspInit+0x44>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_MspInit+0x44>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <NMI_Handler+0x4>

0800271a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <HardFault_Handler+0x4>

08002720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <MemManage_Handler+0x4>

08002726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <BusFault_Handler+0x4>

0800272c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <UsageFault_Handler+0x4>

08002732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002760:	f000 f94c 	bl	80029fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}

08002768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <SystemInit+0x20>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <SystemInit+0x20>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <_Z11TM_RNG_Initv>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_rng.h"

void TM_RNG_Init(void) {
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
	/* Enable RNG clock source */
	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <_Z11TM_RNG_Initv+0x28>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <_Z11TM_RNG_Initv+0x28>)
 8002796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800279a:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	/* RNG Peripheral enable */
	RNG->CR |= RNG_CR_RNGEN;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <_Z11TM_RNG_Initv+0x2c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <_Z11TM_RNG_Initv+0x2c>)
 80027a2:	f043 0304 	orr.w	r3, r3, #4
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	50060800 	.word	0x50060800

080027bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027c2:	4a23      	ldr	r2, [pc, #140]	; (8002850 <MX_USART2_UART_Init+0x94>)
 80027c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027e2:	220c      	movs	r2, #12
 80027e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <MX_USART2_UART_Init+0x90>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <MX_USART2_UART_Init+0x90>)
 8002800:	2200      	movs	r2, #0
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002804:	4811      	ldr	r0, [pc, #68]	; (800284c <MX_USART2_UART_Init+0x90>)
 8002806:	f002 f825 	bl	8004854 <HAL_UART_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002810:	f7ff fbcf 	bl	8001fb2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002814:	2100      	movs	r1, #0
 8002816:	480d      	ldr	r0, [pc, #52]	; (800284c <MX_USART2_UART_Init+0x90>)
 8002818:	f002 fd26 	bl	8005268 <HAL_UARTEx_SetTxFifoThreshold>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002822:	f7ff fbc6 	bl	8001fb2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002826:	2100      	movs	r1, #0
 8002828:	4808      	ldr	r0, [pc, #32]	; (800284c <MX_USART2_UART_Init+0x90>)
 800282a:	f002 fd5b 	bl	80052e4 <HAL_UARTEx_SetRxFifoThreshold>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002834:	f7ff fbbd 	bl	8001fb2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002838:	4804      	ldr	r0, [pc, #16]	; (800284c <MX_USART2_UART_Init+0x90>)
 800283a:	f002 fcdc 	bl	80051f6 <HAL_UARTEx_DisableFifoMode>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002844:	f7ff fbb5 	bl	8001fb2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000934 	.word	0x20000934
 8002850:	40004400 	.word	0x40004400

08002854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b09a      	sub	sp, #104	; 0x68
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	2244      	movs	r2, #68	; 0x44
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fdf1 	bl	800545c <memset>
  if(uartHandle->Instance==USART2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_UART_MspInit+0xa8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d136      	bne.n	80028f2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002884:	2302      	movs	r3, #2
 8002886:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f001 fdef 	bl	8004474 <HAL_RCCEx_PeriphCLKConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800289c:	f7ff fb89 	bl	8001fb2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_UART_MspInit+0xac>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_UART_MspInit+0xac>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_UART_MspInit+0xac>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_UART_MspInit+0xac>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_UART_MspInit+0xac>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_UART_MspInit+0xac>)
 80028c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80028d0:	230c      	movs	r3, #12
 80028d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028e0:	2307      	movs	r3, #7
 80028e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f000 f9a9 	bl	8002c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028f2:	bf00      	nop
 80028f4:	3768      	adds	r7, #104	; 0x68
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40004400 	.word	0x40004400
 8002900:	40021000 	.word	0x40021000

08002904 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002906:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <LoopForever+0x6>)
  ldr r1, =_edata
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <LoopForever+0xa>)
  ldr r2, =_sidata
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <LoopForever+0xe>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002920:	4c0b      	ldr	r4, [pc, #44]	; (8002950 <LoopForever+0x16>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800292e:	f7ff ff1b 	bl	8002768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002932:	f002 fd67 	bl	8005404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002936:	f7ff fa43 	bl	8001dc0 <main>

0800293a <LoopForever>:

LoopForever:
    b LoopForever
 800293a:	e7fe      	b.n	800293a <LoopForever>
  ldr   r0, =_estack
 800293c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002944:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002948:	0800701c 	.word	0x0800701c
  ldr r2, =_sbss
 800294c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002950:	200009d0 	.word	0x200009d0

08002954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC1_2_IRQHandler>

08002956 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002960:	2003      	movs	r0, #3
 8002962:	f000 f93d 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002966:	2000      	movs	r0, #0
 8002968:	f000 f80e 	bl	8002988 <HAL_InitTick>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	71fb      	strb	r3, [r7, #7]
 8002976:	e001      	b.n	800297c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002978:	f7ff fea8 	bl	80026cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800297c:	79fb      	ldrb	r3, [r7, #7]

}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002994:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_InitTick+0x68>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d022      	beq.n	80029e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800299c:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_InitTick+0x6c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_InitTick+0x68>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f93a 	bl	8002c2a <HAL_SYSTICK_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10f      	bne.n	80029dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	d809      	bhi.n	80029d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c2:	2200      	movs	r2, #0
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ca:	f000 f914 	bl	8002bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_InitTick+0x70>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e007      	b.n	80029e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e004      	b.n	80029e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e001      	b.n	80029e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000060 	.word	0x20000060
 80029f4:	20000058 	.word	0x20000058
 80029f8:	2000005c 	.word	0x2000005c

080029fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_IncTick+0x1c>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_IncTick+0x20>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_IncTick+0x1c>)
 8002a0c:	6013      	str	r3, [r2, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	200009c4 	.word	0x200009c4
 8002a1c:	20000060 	.word	0x20000060

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	200009c4 	.word	0x200009c4

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d004      	beq.n	8002a5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_Delay+0x40>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5c:	bf00      	nop
 8002a5e:	f7ff ffdf 	bl	8002a20 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d8f7      	bhi.n	8002a5e <HAL_Delay+0x26>
  {
  }
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000060 	.word	0x20000060

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff47 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff5e 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff90 	bl	8002b34 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5f 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffb2 	bl	8002b9c <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c52:	e15a      	b.n	8002f0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 814c 	beq.w	8002f04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d005      	beq.n	8002c84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d130      	bne.n	8002ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cba:	2201      	movs	r2, #1
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0201 	and.w	r2, r3, #1
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d017      	beq.n	8002d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d123      	bne.n	8002d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3208      	adds	r2, #8
 8002d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	08da      	lsrs	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3208      	adds	r2, #8
 8002d70:	6939      	ldr	r1, [r7, #16]
 8002d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0203 	and.w	r2, r3, #3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80a6 	beq.w	8002f04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db8:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_GPIO_Init+0x2e4>)
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <HAL_GPIO_Init+0x2e4>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc4:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <HAL_GPIO_Init+0x2e4>)
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd0:	4a56      	ldr	r2, [pc, #344]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dfa:	d01f      	beq.n	8002e3c <HAL_GPIO_Init+0x1f8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a4c      	ldr	r2, [pc, #304]	; (8002f30 <HAL_GPIO_Init+0x2ec>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d019      	beq.n	8002e38 <HAL_GPIO_Init+0x1f4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <HAL_GPIO_Init+0x2f0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <HAL_GPIO_Init+0x1f0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <HAL_GPIO_Init+0x2f4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00d      	beq.n	8002e30 <HAL_GPIO_Init+0x1ec>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a49      	ldr	r2, [pc, #292]	; (8002f3c <HAL_GPIO_Init+0x2f8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_Init+0x1e8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a48      	ldr	r2, [pc, #288]	; (8002f40 <HAL_GPIO_Init+0x2fc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_GPIO_Init+0x1e4>
 8002e24:	2305      	movs	r3, #5
 8002e26:	e00a      	b.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e28:	2306      	movs	r3, #6
 8002e2a:	e008      	b.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	e006      	b.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e30:	2303      	movs	r3, #3
 8002e32:	e004      	b.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e002      	b.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	f002 0203 	and.w	r2, r2, #3
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4093      	lsls	r3, r2
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e4e:	4937      	ldr	r1, [pc, #220]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e5c:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e80:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e86:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eaa:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002efe:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f47f ae9d 	bne.w	8002c54 <HAL_GPIO_Init+0x10>
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	48000400 	.word	0x48000400
 8002f34:	48000800 	.word	0x48000800
 8002f38:	48000c00 	.word	0x48000c00
 8002f3c:	48001000 	.word	0x48001000
 8002f40:	48001400 	.word	0x48001400
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e001      	b.n	8002f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e081      	b.n	80030be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe f96e 	bl	80012b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	e006      	b.n	8003030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800302e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d104      	bne.n	8003042 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69d9      	ldr	r1, [r3, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	817b      	strh	r3, [r7, #10]
 80030da:	460b      	mov	r3, r1
 80030dc:	813b      	strh	r3, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	f040 80f9 	bne.w	80032e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_I2C_Mem_Write+0x34>
 80030f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0ed      	b.n	80032e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Mem_Write+0x4e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0e6      	b.n	80032e4 <HAL_I2C_Mem_Write+0x21c>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800311e:	f7ff fc7f 	bl	8002a20 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2319      	movs	r3, #25
 800312a:	2201      	movs	r2, #1
 800312c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f955 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0d1      	b.n	80032e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2221      	movs	r2, #33	; 0x21
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2240      	movs	r2, #64	; 0x40
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a3a      	ldr	r2, [r7, #32]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003168:	88f8      	ldrh	r0, [r7, #6]
 800316a:	893a      	ldrh	r2, [r7, #8]
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	4603      	mov	r3, r0
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f8b9 	bl	80032f0 <I2C_RequestMemoryWrite>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0a9      	b.n	80032e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2bff      	cmp	r3, #255	; 0xff
 8003198:	d90e      	bls.n	80031b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	8979      	ldrh	r1, [r7, #10]
 80031a8:	2300      	movs	r3, #0
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fabd 	bl	8003730 <I2C_TransferConfig>
 80031b6:	e00f      	b.n	80031d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	8979      	ldrh	r1, [r7, #10]
 80031ca:	2300      	movs	r3, #0
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 faac 	bl	8003730 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f93f 	bl	8003460 <I2C_WaitOnTXISFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e07b      	b.n	80032e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d034      	beq.n	8003290 <HAL_I2C_Mem_Write+0x1c8>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	2b00      	cmp	r3, #0
 800322c:	d130      	bne.n	8003290 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	2200      	movs	r2, #0
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f8d1 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e04d      	b.n	80032e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2bff      	cmp	r3, #255	; 0xff
 8003250:	d90e      	bls.n	8003270 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	b2da      	uxtb	r2, r3
 800325e:	8979      	ldrh	r1, [r7, #10]
 8003260:	2300      	movs	r3, #0
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fa61 	bl	8003730 <I2C_TransferConfig>
 800326e:	e00f      	b.n	8003290 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	b2da      	uxtb	r2, r3
 8003280:	8979      	ldrh	r1, [r7, #10]
 8003282:	2300      	movs	r3, #0
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fa50 	bl	8003730 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d19e      	bne.n	80031d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f91e 	bl	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e01a      	b.n	80032e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2220      	movs	r2, #32
 80032b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_I2C_Mem_Write+0x224>)
 80032c2:	400b      	ands	r3, r1
 80032c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e000      	b.n	80032e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
  }
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	fe00e800 	.word	0xfe00e800

080032f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	4608      	mov	r0, r1
 80032fa:	4611      	mov	r1, r2
 80032fc:	461a      	mov	r2, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	817b      	strh	r3, [r7, #10]
 8003302:	460b      	mov	r3, r1
 8003304:	813b      	strh	r3, [r7, #8]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	8979      	ldrh	r1, [r7, #10]
 8003310:	4b20      	ldr	r3, [pc, #128]	; (8003394 <I2C_RequestMemoryWrite+0xa4>)
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fa09 	bl	8003730 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f89c 	bl	8003460 <I2C_WaitOnTXISFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e02c      	b.n	800338c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003338:	893b      	ldrh	r3, [r7, #8]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
 8003342:	e015      	b.n	8003370 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	69b9      	ldr	r1, [r7, #24]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f882 	bl	8003460 <I2C_WaitOnTXISFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e012      	b.n	800338c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003366:	893b      	ldrh	r3, [r7, #8]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2200      	movs	r2, #0
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f830 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	80002000 	.word	0x80002000

08003398 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d103      	bne.n	80033b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d007      	beq.n	80033d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	619a      	str	r2, [r3, #24]
  }
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f0:	e022      	b.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d01e      	beq.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7ff fb11 	bl	8002a20 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnFlagUntilTimeout+0x30>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d113      	bne.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e00f      	b.n	8003458 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	429a      	cmp	r2, r3
 8003454:	d0cd      	beq.n	80033f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800346c:	e02c      	b.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f870 	bl	8003558 <I2C_IsErrorOccurred>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e02a      	b.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d01e      	beq.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7ff fac9 	bl	8002a20 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d1cb      	bne.n	800346e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ec:	e028      	b.n	8003540 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f830 	bl	8003558 <I2C_IsErrorOccurred>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e026      	b.n	8003550 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7ff fa8d 	bl	8002a20 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e007      	b.n	8003550 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b20      	cmp	r3, #32
 800354c:	d1cf      	bne.n	80034ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d075      	beq.n	8003670 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2210      	movs	r2, #16
 800358a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800358c:	e056      	b.n	800363c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d052      	beq.n	800363c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7ff fa43 	bl	8002a20 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_IsErrorOccurred+0x54>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d147      	bne.n	800363c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ce:	d12e      	bne.n	800362e <I2C_IsErrorOccurred+0xd6>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d6:	d02a      	beq.n	800362e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d027      	beq.n	800362e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035ee:	f7ff fa17 	bl	8002a20 <HAL_GetTick>
 80035f2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f4:	e01b      	b.n	800362e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035f6:	f7ff fa13 	bl	8002a20 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b19      	cmp	r3, #25
 8003602:	d914      	bls.n	800362e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b20      	cmp	r3, #32
 800363a:	d1dc      	bne.n	80035f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d003      	beq.n	8003652 <I2C_IsErrorOccurred+0xfa>
 800364a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364e:	2b00      	cmp	r3, #0
 8003650:	d09d      	beq.n	800358e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2220      	movs	r2, #32
 8003660:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003692:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	f043 0308 	orr.w	r3, r3, #8
 80036aa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01c      	beq.n	8003720 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fe56 	bl	8003398 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <I2C_IsErrorOccurred+0x1d4>)
 80036f8:	400b      	ands	r3, r1
 80036fa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	431a      	orrs	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003724:	4618      	mov	r0, r3
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	fe00e800 	.word	0xfe00e800

08003730 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	4613      	mov	r3, r2
 8003740:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003748:	7a7b      	ldrb	r3, [r7, #9]
 800374a:	041b      	lsls	r3, r3, #16
 800374c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003750:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	4313      	orrs	r3, r2
 800375a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800375e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	0d5b      	lsrs	r3, r3, #21
 800376a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <I2C_TransferConfig+0x60>)
 8003770:	430b      	orrs	r3, r1
 8003772:	43db      	mvns	r3, r3
 8003774:	ea02 0103 	and.w	r1, r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	03ff63ff 	.word	0x03ff63ff

08003794 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d138      	bne.n	800381c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e032      	b.n	800381e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800381c:	2302      	movs	r3, #2
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b20      	cmp	r3, #32
 800383e:	d139      	bne.n	80038b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800384a:	2302      	movs	r3, #2
 800384c:	e033      	b.n	80038b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2224      	movs	r2, #36	; 0x24
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800387c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
  }
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d141      	bne.n	8003956 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038d2:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	d131      	bne.n	8003944 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038e0:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e6:	4a46      	ldr	r2, [pc, #280]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038f0:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038f8:	4a41      	ldr	r2, [pc, #260]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003900:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2232      	movs	r2, #50	; 0x32
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	4a3f      	ldr	r2, [pc, #252]	; (8003a08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	0c9b      	lsrs	r3, r3, #18
 8003912:	3301      	adds	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003916:	e002      	b.n	800391e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3b01      	subs	r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800391e:	4b38      	ldr	r3, [pc, #224]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392a:	d102      	bne.n	8003932 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f2      	bne.n	8003918 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003932:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d158      	bne.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e057      	b.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003944:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800394a:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003950:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003954:	e04d      	b.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395c:	d141      	bne.n	80039e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800395e:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396a:	d131      	bne.n	80039d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003972:	4a23      	ldr	r2, [pc, #140]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800397c:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003984:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800398a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2232      	movs	r2, #50	; 0x32
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	0c9b      	lsrs	r3, r3, #18
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a2:	e002      	b.n	80039aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d102      	bne.n	80039be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f2      	bne.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ca:	d112      	bne.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e011      	b.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d6:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039e0:	e007      	b.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039ea:	4a05      	ldr	r2, [pc, #20]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40007000 	.word	0x40007000
 8003a04:	20000058 	.word	0x20000058
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e306      	b.n	800402c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d075      	beq.n	8003b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a2a:	4b97      	ldr	r3, [pc, #604]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a34:	4b94      	ldr	r3, [pc, #592]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	d102      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3e>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d002      	beq.n	8003a50 <HAL_RCC_OscConfig+0x44>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	4b8d      	ldr	r3, [pc, #564]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d05b      	beq.n	8003b14 <HAL_RCC_OscConfig+0x108>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d157      	bne.n	8003b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e2e1      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x74>
 8003a72:	4b85      	ldr	r3, [pc, #532]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a84      	ldr	r2, [pc, #528]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e01d      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x98>
 8003a8a:	4b7f      	ldr	r3, [pc, #508]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7e      	ldr	r2, [pc, #504]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b7c      	ldr	r3, [pc, #496]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7b      	ldr	r2, [pc, #492]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003aa4:	4b78      	ldr	r3, [pc, #480]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a77      	ldr	r2, [pc, #476]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b75      	ldr	r3, [pc, #468]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a74      	ldr	r2, [pc, #464]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe ffac 	bl	8002a20 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fe ffa8 	bl	8002a20 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e2a6      	b.n	800402c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ade:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xc0>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe ff98 	bl	8002a20 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe ff94 	bl	8002a20 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e292      	b.n	800402c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b06:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0xe8>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d075      	beq.n	8003c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b22:	4b59      	ldr	r3, [pc, #356]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b2c:	4b56      	ldr	r3, [pc, #344]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_OscConfig+0x136>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d002      	beq.n	8003b48 <HAL_RCC_OscConfig+0x13c>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d11f      	bne.n	8003b88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b48:	4b4f      	ldr	r3, [pc, #316]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_OscConfig+0x154>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e265      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b60:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	4946      	ldr	r1, [pc, #280]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b74:	4b45      	ldr	r3, [pc, #276]	; (8003c8c <HAL_RCC_OscConfig+0x280>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe ff05 	bl	8002988 <HAL_InitTick>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d043      	beq.n	8003c0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e251      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d023      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b90:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe ff40 	bl	8002a20 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fe ff3c 	bl	8002a20 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e23a      	b.n	800402c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb6:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	492d      	ldr	r1, [pc, #180]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
 8003bd6:	e01a      	b.n	8003c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe ff1c 	bl	8002a20 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe ff18 	bl	8002a20 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e216      	b.n	800402c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1e0>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d041      	beq.n	8003c9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c22:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c28:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fe fef5 	bl	8002a20 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7fe fef1 	bl	8002a20 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1ef      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ef      	beq.n	8003c3a <HAL_RCC_OscConfig+0x22e>
 8003c5a:	e020      	b.n	8003c9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_RCC_OscConfig+0x27c>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fe fed8 	bl	8002a20 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c72:	e00d      	b.n	8003c90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7fe fed4 	bl	8002a20 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d906      	bls.n	8003c90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e1d2      	b.n	800402c <HAL_RCC_OscConfig+0x620>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c90:	4b8c      	ldr	r3, [pc, #560]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ea      	bne.n	8003c74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 80a6 	beq.w	8003df8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cac:	2300      	movs	r3, #0
 8003cae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cb0:	4b84      	ldr	r3, [pc, #528]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x2b4>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCC_OscConfig+0x2b6>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	4b7f      	ldr	r3, [pc, #508]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	4a7e      	ldr	r2, [pc, #504]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd2:	4b7c      	ldr	r3, [pc, #496]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce2:	4b79      	ldr	r3, [pc, #484]	; (8003ec8 <HAL_RCC_OscConfig+0x4bc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d118      	bne.n	8003d20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCC_OscConfig+0x4bc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a75      	ldr	r2, [pc, #468]	; (8003ec8 <HAL_RCC_OscConfig+0x4bc>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fe91 	bl	8002a20 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fe fe8d 	bl	8002a20 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e18b      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d14:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <HAL_RCC_OscConfig+0x4bc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d108      	bne.n	8003d3a <HAL_RCC_OscConfig+0x32e>
 8003d28:	4b66      	ldr	r3, [pc, #408]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	4a65      	ldr	r2, [pc, #404]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d38:	e024      	b.n	8003d84 <HAL_RCC_OscConfig+0x378>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d110      	bne.n	8003d64 <HAL_RCC_OscConfig+0x358>
 8003d42:	4b60      	ldr	r3, [pc, #384]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	4a5e      	ldr	r2, [pc, #376]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d52:	4b5c      	ldr	r3, [pc, #368]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	4a5a      	ldr	r2, [pc, #360]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d62:	e00f      	b.n	8003d84 <HAL_RCC_OscConfig+0x378>
 8003d64:	4b57      	ldr	r3, [pc, #348]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	4a56      	ldr	r2, [pc, #344]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d74:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	4a52      	ldr	r2, [pc, #328]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d016      	beq.n	8003dba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fe fe48 	bl	8002a20 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fe fe44 	bl	8002a20 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e140      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003daa:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ed      	beq.n	8003d94 <HAL_RCC_OscConfig+0x388>
 8003db8:	e015      	b.n	8003de6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fe fe31 	bl	8002a20 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fe2d 	bl	8002a20 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e129      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dd8:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ed      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dec:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03c      	beq.n	8003e7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01c      	beq.n	8003e46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e12:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fe fe00 	bl	8002a20 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e24:	f7fe fdfc 	bl	8002a20 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0fa      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e36:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ef      	beq.n	8003e24 <HAL_RCC_OscConfig+0x418>
 8003e44:	e01b      	b.n	8003e7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e46:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fe fde3 	bl	8002a20 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e5e:	f7fe fddf 	bl	8002a20 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e0dd      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ef      	bne.n	8003e5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80d1 	beq.w	800402a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	f000 808b 	beq.w	8003fac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d15e      	bne.n	8003f5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <HAL_RCC_OscConfig+0x4b8>)
 8003ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7fe fdb9 	bl	8002a20 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb0:	e00c      	b.n	8003ecc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fe fdb5 	bl	8002a20 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d905      	bls.n	8003ecc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0b3      	b.n	800402c <HAL_RCC_OscConfig+0x620>
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ecc:	4b59      	ldr	r3, [pc, #356]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ec      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed8:	4b56      	ldr	r3, [pc, #344]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	4b56      	ldr	r3, [pc, #344]	; (8004038 <HAL_RCC_OscConfig+0x62c>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6a11      	ldr	r1, [r2, #32]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee8:	3a01      	subs	r2, #1
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ef2:	0212      	lsls	r2, r2, #8
 8003ef4:	4311      	orrs	r1, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003efa:	0852      	lsrs	r2, r2, #1
 8003efc:	3a01      	subs	r2, #1
 8003efe:	0552      	lsls	r2, r2, #21
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	0652      	lsls	r2, r2, #25
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f12:	06d2      	lsls	r2, r2, #27
 8003f14:	430a      	orrs	r2, r1
 8003f16:	4947      	ldr	r1, [pc, #284]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1c:	4b45      	ldr	r3, [pc, #276]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a44      	ldr	r2, [pc, #272]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f28:	4b42      	ldr	r3, [pc, #264]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a41      	ldr	r2, [pc, #260]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fd74 	bl	8002a20 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fe fd70 	bl	8002a20 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e06e      	b.n	800402c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f4e:	4b39      	ldr	r3, [pc, #228]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x530>
 8003f5a:	e066      	b.n	800402a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5c:	4b35      	ldr	r3, [pc, #212]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a34      	ldr	r2, [pc, #208]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f66:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f68:	4b32      	ldr	r3, [pc, #200]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a31      	ldr	r2, [pc, #196]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f74:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a2e      	ldr	r2, [pc, #184]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003f7a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fd4c 	bl	8002a20 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fe fd48 	bl	8002a20 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e046      	b.n	800402c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9e:	4b25      	ldr	r3, [pc, #148]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x580>
 8003faa:	e03e      	b.n	800402a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e039      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <HAL_RCC_OscConfig+0x628>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 0203 	and.w	r2, r3, #3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d12c      	bne.n	8004026 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d123      	bne.n	8004026 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d11b      	bne.n	8004026 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d113      	bne.n	8004026 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	3b01      	subs	r3, #1
 800400c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d109      	bne.n	8004026 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	019f800c 	.word	0x019f800c

0800403c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e11e      	b.n	8004292 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004054:	4b91      	ldr	r3, [pc, #580]	; (800429c <HAL_RCC_ClockConfig+0x260>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d910      	bls.n	8004084 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b8e      	ldr	r3, [pc, #568]	; (800429c <HAL_RCC_ClockConfig+0x260>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 020f 	bic.w	r2, r3, #15
 800406a:	498c      	ldr	r1, [pc, #560]	; (800429c <HAL_RCC_ClockConfig+0x260>)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b8a      	ldr	r3, [pc, #552]	; (800429c <HAL_RCC_ClockConfig+0x260>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e106      	b.n	8004292 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d073      	beq.n	8004178 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d129      	bne.n	80040ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004098:	4b81      	ldr	r3, [pc, #516]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0f4      	b.n	8004292 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040a8:	f000 f99e 	bl	80043e8 <RCC_GetSysClockFreqFromPLLSource>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4a7c      	ldr	r2, [pc, #496]	; (80042a4 <HAL_RCC_ClockConfig+0x268>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d93f      	bls.n	8004136 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040b6:	4b7a      	ldr	r3, [pc, #488]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d033      	beq.n	8004136 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d12f      	bne.n	8004136 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040d6:	4b72      	ldr	r3, [pc, #456]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040de:	4a70      	ldr	r2, [pc, #448]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80040e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e024      	b.n	8004136 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f4:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0c6      	b.n	8004292 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004104:	4b66      	ldr	r3, [pc, #408]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0be      	b.n	8004292 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004114:	f000 f8ce 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004118:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4a61      	ldr	r2, [pc, #388]	; (80042a4 <HAL_RCC_ClockConfig+0x268>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d909      	bls.n	8004136 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004122:	4b5f      	ldr	r3, [pc, #380]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800412a:	4a5d      	ldr	r2, [pc, #372]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 800412c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004130:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004136:	4b5a      	ldr	r3, [pc, #360]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 0203 	bic.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4957      	ldr	r1, [pc, #348]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004144:	4313      	orrs	r3, r2
 8004146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004148:	f7fe fc6a 	bl	8002a20 <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414e:	e00a      	b.n	8004166 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004150:	f7fe fc66 	bl	8002a20 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e095      	b.n	8004292 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004166:	4b4e      	ldr	r3, [pc, #312]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 020c 	and.w	r2, r3, #12
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	429a      	cmp	r2, r3
 8004176:	d1eb      	bne.n	8004150 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d023      	beq.n	80041cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b43      	ldr	r3, [pc, #268]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a42      	ldr	r2, [pc, #264]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800419a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041a8:	4b3d      	ldr	r3, [pc, #244]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041b0:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80041b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4936      	ldr	r1, [pc, #216]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
 80041ca:	e008      	b.n	80041de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d105      	bne.n	80041de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041d2:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4a32      	ldr	r2, [pc, #200]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 80041d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041de:	4b2f      	ldr	r3, [pc, #188]	; (800429c <HAL_RCC_ClockConfig+0x260>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d21d      	bcs.n	8004228 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ec:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_RCC_ClockConfig+0x260>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 020f 	bic.w	r2, r3, #15
 80041f4:	4929      	ldr	r1, [pc, #164]	; (800429c <HAL_RCC_ClockConfig+0x260>)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041fc:	f7fe fc10 	bl	8002a20 <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	e00a      	b.n	800421a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004204:	f7fe fc0c 	bl	8002a20 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e03b      	b.n	8004292 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_RCC_ClockConfig+0x260>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d1ed      	bne.n	8004204 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004234:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4917      	ldr	r1, [pc, #92]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	490f      	ldr	r1, [pc, #60]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004266:	f000 f825 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 800426a:	4602      	mov	r2, r0
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <HAL_RCC_ClockConfig+0x264>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	490c      	ldr	r1, [pc, #48]	; (80042a8 <HAL_RCC_ClockConfig+0x26c>)
 8004278:	5ccb      	ldrb	r3, [r1, r3]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x270>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_RCC_ClockConfig+0x274>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fb7c 	bl	8002988 <HAL_InitTick>
 8004290:	4603      	mov	r3, r0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40022000 	.word	0x40022000
 80042a0:	40021000 	.word	0x40021000
 80042a4:	04c4b400 	.word	0x04c4b400
 80042a8:	08006fc4 	.word	0x08006fc4
 80042ac:	20000058 	.word	0x20000058
 80042b0:	2000005c 	.word	0x2000005c

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042ba:	4b2c      	ldr	r3, [pc, #176]	; (800436c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d102      	bne.n	80042cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042c6:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e047      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042cc:	4b27      	ldr	r3, [pc, #156]	; (800436c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d102      	bne.n	80042de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	e03e      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b0c      	cmp	r3, #12
 80042e8:	d136      	bne.n	8004358 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	3301      	adds	r3, #1
 8004300:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d10c      	bne.n	8004322 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004308:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <HAL_RCC_GetSysClockFreq+0xc0>)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	4a16      	ldr	r2, [pc, #88]	; (800436c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004312:	68d2      	ldr	r2, [r2, #12]
 8004314:	0a12      	lsrs	r2, r2, #8
 8004316:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
      break;
 8004320:	e00c      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004322:	4a13      	ldr	r2, [pc, #76]	; (8004370 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	4a10      	ldr	r2, [pc, #64]	; (800436c <HAL_RCC_GetSysClockFreq+0xb8>)
 800432c:	68d2      	ldr	r2, [r2, #12]
 800432e:	0a12      	lsrs	r2, r2, #8
 8004330:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
      break;
 800433a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_GetSysClockFreq+0xb8>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	0e5b      	lsrs	r3, r3, #25
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	3301      	adds	r3, #1
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	e001      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800435c:	693b      	ldr	r3, [r7, #16]
}
 800435e:	4618      	mov	r0, r3
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	00f42400 	.word	0x00f42400
 8004374:	007a1200 	.word	0x007a1200

08004378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <HAL_RCC_GetHCLKFreq+0x14>)
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000058 	.word	0x20000058

08004390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004394:	f7ff fff0 	bl	8004378 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4904      	ldr	r1, [pc, #16]	; (80043b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000
 80043b8:	08006fd4 	.word	0x08006fd4

080043bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043c0:	f7ff ffda 	bl	8004378 <HAL_RCC_GetHCLKFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	0adb      	lsrs	r3, r3, #11
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	4904      	ldr	r1, [pc, #16]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043dc:	4618      	mov	r0, r3
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000
 80043e4:	08006fd4 	.word	0x08006fd4

080043e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ee:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d10c      	bne.n	8004426 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	4a14      	ldr	r2, [pc, #80]	; (8004468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004416:	68d2      	ldr	r2, [r2, #12]
 8004418:	0a12      	lsrs	r2, r2, #8
 800441a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	617b      	str	r3, [r7, #20]
    break;
 8004424:	e00c      	b.n	8004440 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004426:	4a12      	ldr	r2, [pc, #72]	; (8004470 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004430:	68d2      	ldr	r2, [r2, #12]
 8004432:	0a12      	lsrs	r2, r2, #8
 8004434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	617b      	str	r3, [r7, #20]
    break;
 800443e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	0e5b      	lsrs	r3, r3, #25
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	3301      	adds	r3, #1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800445a:	687b      	ldr	r3, [r7, #4]
}
 800445c:	4618      	mov	r0, r3
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40021000 	.word	0x40021000
 800446c:	007a1200 	.word	0x007a1200
 8004470:	00f42400 	.word	0x00f42400

08004474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800447c:	2300      	movs	r3, #0
 800447e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004480:	2300      	movs	r3, #0
 8004482:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8098 	beq.w	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004492:	2300      	movs	r3, #0
 8004494:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004496:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a2:	4b40      	ldr	r3, [pc, #256]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	4a3f      	ldr	r2, [pc, #252]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6593      	str	r3, [r2, #88]	; 0x58
 80044ae:	4b3d      	ldr	r3, [pc, #244]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ba:	2301      	movs	r3, #1
 80044bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044be:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a39      	ldr	r2, [pc, #228]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ca:	f7fe faa9 	bl	8002a20 <HAL_GetTick>
 80044ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044d0:	e009      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d2:	f7fe faa5 	bl	8002a20 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d902      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	74fb      	strb	r3, [r7, #19]
        break;
 80044e4:	e005      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e6:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0ef      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044f2:	7cfb      	ldrb	r3, [r7, #19]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d159      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044f8:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004502:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01e      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	d019      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004514:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004530:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004540:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fe fa65 	bl	8002a20 <HAL_GetTick>
 8004556:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004558:	e00b      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fe fa61 	bl	8002a20 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d902      	bls.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	74fb      	strb	r3, [r7, #19]
            break;
 8004570:	e006      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ec      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	4903      	ldr	r1, [pc, #12]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800459c:	e008      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	74bb      	strb	r3, [r7, #18]
 80045a2:	e005      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b0:	7c7b      	ldrb	r3, [r7, #17]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b6:	4ba6      	ldr	r3, [pc, #664]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	4aa5      	ldr	r2, [pc, #660]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ce:	4ba0      	ldr	r3, [pc, #640]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f023 0203 	bic.w	r2, r3, #3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	499c      	ldr	r1, [pc, #624]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045f0:	4b97      	ldr	r3, [pc, #604]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f023 020c 	bic.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	4994      	ldr	r1, [pc, #592]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004612:	4b8f      	ldr	r3, [pc, #572]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	498b      	ldr	r1, [pc, #556]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004634:	4b86      	ldr	r3, [pc, #536]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	4983      	ldr	r1, [pc, #524]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004656:	4b7e      	ldr	r3, [pc, #504]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	497a      	ldr	r1, [pc, #488]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004678:	4b75      	ldr	r3, [pc, #468]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	4972      	ldr	r1, [pc, #456]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800469a:	4b6d      	ldr	r3, [pc, #436]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	4969      	ldr	r1, [pc, #420]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046bc:	4b64      	ldr	r3, [pc, #400]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	4961      	ldr	r1, [pc, #388]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046de:	4b5c      	ldr	r3, [pc, #368]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	4958      	ldr	r1, [pc, #352]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d015      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004700:	4b53      	ldr	r3, [pc, #332]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	4950      	ldr	r1, [pc, #320]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800471e:	d105      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004720:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4a4a      	ldr	r2, [pc, #296]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004738:	4b45      	ldr	r3, [pc, #276]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	4942      	ldr	r1, [pc, #264]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004756:	d105      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004758:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a3c      	ldr	r2, [pc, #240]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004762:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004770:	4b37      	ldr	r3, [pc, #220]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	4934      	ldr	r1, [pc, #208]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800478e:	d105      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a2e      	ldr	r2, [pc, #184]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d015      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a8:	4b29      	ldr	r3, [pc, #164]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	4926      	ldr	r1, [pc, #152]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c6:	d105      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	4918      	ldr	r1, [pc, #96]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047fe:	d105      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a12      	ldr	r2, [pc, #72]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d015      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	490a      	ldr	r1, [pc, #40]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004836:	d105      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a04      	ldr	r2, [pc, #16]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004842:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004844:	7cbb      	ldrb	r3, [r7, #18]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000

08004854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e042      	b.n	80048ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fd ffeb 	bl	8002854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2224      	movs	r2, #36	; 0x24
 8004882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f82c 	bl	80048f4 <UART_SetConfig>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e022      	b.n	80048ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 faec 	bl	8004e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb73 	bl	8004fd0 <UART_CheckIdleState>
 80048ea:	4603      	mov	r3, r0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f8:	b08c      	sub	sp, #48	; 0x30
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	431a      	orrs	r2, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	431a      	orrs	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	4313      	orrs	r3, r2
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4bab      	ldr	r3, [pc, #684]	; (8004bd0 <UART_SetConfig+0x2dc>)
 8004924:	4013      	ands	r3, r2
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800492c:	430b      	orrs	r3, r1
 800492e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4aa0      	ldr	r2, [pc, #640]	; (8004bd4 <UART_SetConfig+0x2e0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800495c:	4313      	orrs	r3, r2
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800496a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004974:	430b      	orrs	r3, r1
 8004976:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	f023 010f 	bic.w	r1, r3, #15
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a91      	ldr	r2, [pc, #580]	; (8004bd8 <UART_SetConfig+0x2e4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d125      	bne.n	80049e4 <UART_SetConfig+0xf0>
 8004998:	4b90      	ldr	r3, [pc, #576]	; (8004bdc <UART_SetConfig+0x2e8>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d81a      	bhi.n	80049dc <UART_SetConfig+0xe8>
 80049a6:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0xb8>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049bd 	.word	0x080049bd
 80049b0:	080049cd 	.word	0x080049cd
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049d5 	.word	0x080049d5
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c2:	e0d6      	b.n	8004b72 <UART_SetConfig+0x27e>
 80049c4:	2302      	movs	r3, #2
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e0d2      	b.n	8004b72 <UART_SetConfig+0x27e>
 80049cc:	2304      	movs	r3, #4
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d2:	e0ce      	b.n	8004b72 <UART_SetConfig+0x27e>
 80049d4:	2308      	movs	r3, #8
 80049d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049da:	e0ca      	b.n	8004b72 <UART_SetConfig+0x27e>
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e2:	e0c6      	b.n	8004b72 <UART_SetConfig+0x27e>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7d      	ldr	r2, [pc, #500]	; (8004be0 <UART_SetConfig+0x2ec>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d138      	bne.n	8004a60 <UART_SetConfig+0x16c>
 80049ee:	4b7b      	ldr	r3, [pc, #492]	; (8004bdc <UART_SetConfig+0x2e8>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d82d      	bhi.n	8004a58 <UART_SetConfig+0x164>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0x110>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a59 	.word	0x08004a59
 8004a0c:	08004a59 	.word	0x08004a59
 8004a10:	08004a59 	.word	0x08004a59
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004a59 	.word	0x08004a59
 8004a1c:	08004a59 	.word	0x08004a59
 8004a20:	08004a59 	.word	0x08004a59
 8004a24:	08004a41 	.word	0x08004a41
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3e:	e098      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004a40:	2302      	movs	r3, #2
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a46:	e094      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4e:	e090      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004a50:	2308      	movs	r3, #8
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a56:	e08c      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5e:	e088      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <UART_SetConfig+0x2f0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d125      	bne.n	8004ab6 <UART_SetConfig+0x1c2>
 8004a6a:	4b5c      	ldr	r3, [pc, #368]	; (8004bdc <UART_SetConfig+0x2e8>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a74:	2b30      	cmp	r3, #48	; 0x30
 8004a76:	d016      	beq.n	8004aa6 <UART_SetConfig+0x1b2>
 8004a78:	2b30      	cmp	r3, #48	; 0x30
 8004a7a:	d818      	bhi.n	8004aae <UART_SetConfig+0x1ba>
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d00a      	beq.n	8004a96 <UART_SetConfig+0x1a2>
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d814      	bhi.n	8004aae <UART_SetConfig+0x1ba>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <UART_SetConfig+0x19a>
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d008      	beq.n	8004a9e <UART_SetConfig+0x1aa>
 8004a8c:	e00f      	b.n	8004aae <UART_SetConfig+0x1ba>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a94:	e06d      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004a96:	2302      	movs	r3, #2
 8004a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a9c:	e069      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa4:	e065      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aac:	e061      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004aae:	2310      	movs	r3, #16
 8004ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab4:	e05d      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a4b      	ldr	r2, [pc, #300]	; (8004be8 <UART_SetConfig+0x2f4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d125      	bne.n	8004b0c <UART_SetConfig+0x218>
 8004ac0:	4b46      	ldr	r3, [pc, #280]	; (8004bdc <UART_SetConfig+0x2e8>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aca:	2bc0      	cmp	r3, #192	; 0xc0
 8004acc:	d016      	beq.n	8004afc <UART_SetConfig+0x208>
 8004ace:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad0:	d818      	bhi.n	8004b04 <UART_SetConfig+0x210>
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d00a      	beq.n	8004aec <UART_SetConfig+0x1f8>
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d814      	bhi.n	8004b04 <UART_SetConfig+0x210>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <UART_SetConfig+0x1f0>
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d008      	beq.n	8004af4 <UART_SetConfig+0x200>
 8004ae2:	e00f      	b.n	8004b04 <UART_SetConfig+0x210>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aea:	e042      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004aec:	2302      	movs	r3, #2
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af2:	e03e      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004af4:	2304      	movs	r3, #4
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afa:	e03a      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004afc:	2308      	movs	r3, #8
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b02:	e036      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b0a:	e032      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a30      	ldr	r2, [pc, #192]	; (8004bd4 <UART_SetConfig+0x2e0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d12a      	bne.n	8004b6c <UART_SetConfig+0x278>
 8004b16:	4b31      	ldr	r3, [pc, #196]	; (8004bdc <UART_SetConfig+0x2e8>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b24:	d01a      	beq.n	8004b5c <UART_SetConfig+0x268>
 8004b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b2a:	d81b      	bhi.n	8004b64 <UART_SetConfig+0x270>
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b30:	d00c      	beq.n	8004b4c <UART_SetConfig+0x258>
 8004b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b36:	d815      	bhi.n	8004b64 <UART_SetConfig+0x270>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <UART_SetConfig+0x250>
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b40:	d008      	beq.n	8004b54 <UART_SetConfig+0x260>
 8004b42:	e00f      	b.n	8004b64 <UART_SetConfig+0x270>
 8004b44:	2300      	movs	r3, #0
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	e012      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b52:	e00e      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5a:	e00a      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b62:	e006      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6a:	e002      	b.n	8004b72 <UART_SetConfig+0x27e>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a17      	ldr	r2, [pc, #92]	; (8004bd4 <UART_SetConfig+0x2e0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f040 80a8 	bne.w	8004cce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d834      	bhi.n	8004bf0 <UART_SetConfig+0x2fc>
 8004b86:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0x298>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bf1 	.word	0x08004bf1
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004bf1 	.word	0x08004bf1
 8004b9c:	08004bbf 	.word	0x08004bbf
 8004ba0:	08004bf1 	.word	0x08004bf1
 8004ba4:	08004bf1 	.word	0x08004bf1
 8004ba8:	08004bf1 	.word	0x08004bf1
 8004bac:	08004bc7 	.word	0x08004bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7ff fbee 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb6:	e021      	b.n	8004bfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <UART_SetConfig+0x2f8>)
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bbc:	e01e      	b.n	8004bfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bbe:	f7ff fb79 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bc4:	e01a      	b.n	8004bfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bcc:	e016      	b.n	8004bfc <UART_SetConfig+0x308>
 8004bce:	bf00      	nop
 8004bd0:	cfff69f3 	.word	0xcfff69f3
 8004bd4:	40008000 	.word	0x40008000
 8004bd8:	40013800 	.word	0x40013800
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40004400 	.word	0x40004400
 8004be4:	40004800 	.word	0x40004800
 8004be8:	40004c00 	.word	0x40004c00
 8004bec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 812a 	beq.w	8004e58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	4a9e      	ldr	r2, [pc, #632]	; (8004e84 <UART_SetConfig+0x590>)
 8004c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	4413      	add	r3, r2
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d305      	bcc.n	8004c34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d903      	bls.n	8004c3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c3a:	e10d      	b.n	8004e58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	2200      	movs	r2, #0
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	60fa      	str	r2, [r7, #12]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	4a8e      	ldr	r2, [pc, #568]	; (8004e84 <UART_SetConfig+0x590>)
 8004c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2200      	movs	r2, #0
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c5e:	f7fb fadb 	bl	8000218 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	020b      	lsls	r3, r1, #8
 8004c74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c78:	0202      	lsls	r2, r0, #8
 8004c7a:	6979      	ldr	r1, [r7, #20]
 8004c7c:	6849      	ldr	r1, [r1, #4]
 8004c7e:	0849      	lsrs	r1, r1, #1
 8004c80:	2000      	movs	r0, #0
 8004c82:	460c      	mov	r4, r1
 8004c84:	4605      	mov	r5, r0
 8004c86:	eb12 0804 	adds.w	r8, r2, r4
 8004c8a:	eb43 0905 	adc.w	r9, r3, r5
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	469a      	mov	sl, r3
 8004c96:	4693      	mov	fp, r2
 8004c98:	4652      	mov	r2, sl
 8004c9a:	465b      	mov	r3, fp
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	f7fb faba 	bl	8000218 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb2:	d308      	bcc.n	8004cc6 <UART_SetConfig+0x3d2>
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cba:	d204      	bcs.n	8004cc6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	60da      	str	r2, [r3, #12]
 8004cc4:	e0c8      	b.n	8004e58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ccc:	e0c4      	b.n	8004e58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd6:	d167      	bne.n	8004da8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004cd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d828      	bhi.n	8004d32 <UART_SetConfig+0x43e>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <UART_SetConfig+0x3f4>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	08004d33 	.word	0x08004d33
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d33 	.word	0x08004d33
 8004d04:	08004d33 	.word	0x08004d33
 8004d08:	08004d2b 	.word	0x08004d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7ff fb40 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8004d10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d12:	e014      	b.n	8004d3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d14:	f7ff fb52 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 8004d18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d1a:	e010      	b.n	8004d3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b5a      	ldr	r3, [pc, #360]	; (8004e88 <UART_SetConfig+0x594>)
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d20:	e00d      	b.n	8004d3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7ff fac7 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d28:	e009      	b.n	8004d3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d30:	e005      	b.n	8004d3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8089 	beq.w	8004e58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	4a4e      	ldr	r2, [pc, #312]	; (8004e84 <UART_SetConfig+0x590>)
 8004d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d50:	461a      	mov	r2, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d58:	005a      	lsls	r2, r3, #1
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	441a      	add	r2, r3
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b0f      	cmp	r3, #15
 8004d70:	d916      	bls.n	8004da0 <UART_SetConfig+0x4ac>
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d78:	d212      	bcs.n	8004da0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f023 030f 	bic.w	r3, r3, #15
 8004d82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	8bfb      	ldrh	r3, [r7, #30]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	8bfa      	ldrh	r2, [r7, #30]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e05b      	b.n	8004e58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004da6:	e057      	b.n	8004e58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004da8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d828      	bhi.n	8004e02 <UART_SetConfig+0x50e>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0x4c4>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004ded 	.word	0x08004ded
 8004dc4:	08004e03 	.word	0x08004e03
 8004dc8:	08004df3 	.word	0x08004df3
 8004dcc:	08004e03 	.word	0x08004e03
 8004dd0:	08004e03 	.word	0x08004e03
 8004dd4:	08004e03 	.word	0x08004e03
 8004dd8:	08004dfb 	.word	0x08004dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7ff fad8 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 8004de0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004de2:	e014      	b.n	8004e0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de4:	f7ff faea 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dea:	e010      	b.n	8004e0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dec:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <UART_SetConfig+0x594>)
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004df0:	e00d      	b.n	8004e0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df2:	f7ff fa5f 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004df8:	e009      	b.n	8004e0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e00:	e005      	b.n	8004e0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d021      	beq.n	8004e58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <UART_SetConfig+0x590>)
 8004e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	441a      	add	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	2b0f      	cmp	r3, #15
 8004e3c:	d909      	bls.n	8004e52 <UART_SetConfig+0x55e>
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d205      	bcs.n	8004e52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60da      	str	r2, [r3, #12]
 8004e50:	e002      	b.n	8004e58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2200      	movs	r2, #0
 8004e72:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004e74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3730      	adds	r7, #48	; 0x30
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e82:	bf00      	nop
 8004e84:	08006fdc 	.word	0x08006fdc
 8004e88:	00f42400 	.word	0x00f42400

08004e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8a:	d10a      	bne.n	8004fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fe0:	f7fd fd1e 	bl	8002a20 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d10e      	bne.n	8005012 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f82f 	bl	8005066 <UART_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e025      	b.n	800505e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b04      	cmp	r3, #4
 800501e:	d10e      	bne.n	800503e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f819 	bl	8005066 <UART_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e00f      	b.n	800505e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b09c      	sub	sp, #112	; 0x70
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005076:	e0a9      	b.n	80051cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	f000 80a5 	beq.w	80051cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005082:	f7fd fccd 	bl	8002a20 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800508e:	429a      	cmp	r2, r3
 8005090:	d302      	bcc.n	8005098 <UART_WaitOnFlagUntilTimeout+0x32>
 8005092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005094:	2b00      	cmp	r3, #0
 8005096:	d140      	bne.n	800511a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ac:	667b      	str	r3, [r7, #100]	; 0x64
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e6      	bne.n	8005098 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	663b      	str	r3, [r7, #96]	; 0x60
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80050ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e069      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d051      	beq.n	80051cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005136:	d149      	bne.n	80051cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005140:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005156:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
 8005162:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e6      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3308      	adds	r3, #8
 800517a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	613b      	str	r3, [r7, #16]
   return(result);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f023 0301 	bic.w	r3, r3, #1
 800518a:	66bb      	str	r3, [r7, #104]	; 0x68
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005194:	623a      	str	r2, [r7, #32]
 8005196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	69f9      	ldr	r1, [r7, #28]
 800519a:	6a3a      	ldr	r2, [r7, #32]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e010      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4013      	ands	r3, r2
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	429a      	cmp	r2, r3
 80051da:	bf0c      	ite	eq
 80051dc:	2301      	moveq	r3, #1
 80051de:	2300      	movne	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	f43f af46 	beq.w	8005078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3770      	adds	r7, #112	; 0x70
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_UARTEx_DisableFifoMode+0x16>
 8005208:	2302      	movs	r3, #2
 800520a:	e027      	b.n	800525c <HAL_UARTEx_DisableFifoMode+0x66>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	; 0x24
 8005218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800523a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e02d      	b.n	80052dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0201 	bic.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f84f 	bl	8005360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e02d      	b.n	8005358 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	; 0x24
 8005308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0201 	bic.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f811 	bl	8005360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005380:	e031      	b.n	80053e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005382:	2308      	movs	r3, #8
 8005384:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005386:	2308      	movs	r3, #8
 8005388:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	0e5b      	lsrs	r3, r3, #25
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	0f5b      	lsrs	r3, r3, #29
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053aa:	7bbb      	ldrb	r3, [r7, #14]
 80053ac:	7b3a      	ldrb	r2, [r7, #12]
 80053ae:	4911      	ldr	r1, [pc, #68]	; (80053f4 <UARTEx_SetNbDataToProcess+0x94>)
 80053b0:	5c8a      	ldrb	r2, [r1, r2]
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053b6:	7b3a      	ldrb	r2, [r7, #12]
 80053b8:	490f      	ldr	r1, [pc, #60]	; (80053f8 <UARTEx_SetNbDataToProcess+0x98>)
 80053ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	7b7a      	ldrb	r2, [r7, #13]
 80053cc:	4909      	ldr	r1, [pc, #36]	; (80053f4 <UARTEx_SetNbDataToProcess+0x94>)
 80053ce:	5c8a      	ldrb	r2, [r1, r2]
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053d4:	7b7a      	ldrb	r2, [r7, #13]
 80053d6:	4908      	ldr	r1, [pc, #32]	; (80053f8 <UARTEx_SetNbDataToProcess+0x98>)
 80053d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053da:	fb93 f3f2 	sdiv	r3, r3, r2
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	08006ff4 	.word	0x08006ff4
 80053f8:	08006ffc 	.word	0x08006ffc

080053fc <_ZdlPvj>:
 80053fc:	f000 b800 	b.w	8005400 <_ZdlPv>

08005400 <_ZdlPv>:
 8005400:	f000 b824 	b.w	800544c <free>

08005404 <__libc_init_array>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	4d0d      	ldr	r5, [pc, #52]	; (800543c <__libc_init_array+0x38>)
 8005408:	4c0d      	ldr	r4, [pc, #52]	; (8005440 <__libc_init_array+0x3c>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	2600      	movs	r6, #0
 8005410:	42a6      	cmp	r6, r4
 8005412:	d109      	bne.n	8005428 <__libc_init_array+0x24>
 8005414:	4d0b      	ldr	r5, [pc, #44]	; (8005444 <__libc_init_array+0x40>)
 8005416:	4c0c      	ldr	r4, [pc, #48]	; (8005448 <__libc_init_array+0x44>)
 8005418:	f000 f882 	bl	8005520 <_init>
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	2600      	movs	r6, #0
 8005422:	42a6      	cmp	r6, r4
 8005424:	d105      	bne.n	8005432 <__libc_init_array+0x2e>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	f855 3b04 	ldr.w	r3, [r5], #4
 800542c:	4798      	blx	r3
 800542e:	3601      	adds	r6, #1
 8005430:	e7ee      	b.n	8005410 <__libc_init_array+0xc>
 8005432:	f855 3b04 	ldr.w	r3, [r5], #4
 8005436:	4798      	blx	r3
 8005438:	3601      	adds	r6, #1
 800543a:	e7f2      	b.n	8005422 <__libc_init_array+0x1e>
 800543c:	0800700c 	.word	0x0800700c
 8005440:	0800700c 	.word	0x0800700c
 8005444:	0800700c 	.word	0x0800700c
 8005448:	08007014 	.word	0x08007014

0800544c <free>:
 800544c:	4b02      	ldr	r3, [pc, #8]	; (8005458 <free+0xc>)
 800544e:	4601      	mov	r1, r0
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	f000 b80b 	b.w	800546c <_free_r>
 8005456:	bf00      	nop
 8005458:	20000064 	.word	0x20000064

0800545c <memset>:
 800545c:	4402      	add	r2, r0
 800545e:	4603      	mov	r3, r0
 8005460:	4293      	cmp	r3, r2
 8005462:	d100      	bne.n	8005466 <memset+0xa>
 8005464:	4770      	bx	lr
 8005466:	f803 1b01 	strb.w	r1, [r3], #1
 800546a:	e7f9      	b.n	8005460 <memset+0x4>

0800546c <_free_r>:
 800546c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800546e:	2900      	cmp	r1, #0
 8005470:	d044      	beq.n	80054fc <_free_r+0x90>
 8005472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005476:	9001      	str	r0, [sp, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f1a1 0404 	sub.w	r4, r1, #4
 800547e:	bfb8      	it	lt
 8005480:	18e4      	addlt	r4, r4, r3
 8005482:	f000 f83f 	bl	8005504 <__malloc_lock>
 8005486:	4a1e      	ldr	r2, [pc, #120]	; (8005500 <_free_r+0x94>)
 8005488:	9801      	ldr	r0, [sp, #4]
 800548a:	6813      	ldr	r3, [r2, #0]
 800548c:	b933      	cbnz	r3, 800549c <_free_r+0x30>
 800548e:	6063      	str	r3, [r4, #4]
 8005490:	6014      	str	r4, [r2, #0]
 8005492:	b003      	add	sp, #12
 8005494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005498:	f000 b83a 	b.w	8005510 <__malloc_unlock>
 800549c:	42a3      	cmp	r3, r4
 800549e:	d908      	bls.n	80054b2 <_free_r+0x46>
 80054a0:	6825      	ldr	r5, [r4, #0]
 80054a2:	1961      	adds	r1, r4, r5
 80054a4:	428b      	cmp	r3, r1
 80054a6:	bf01      	itttt	eq
 80054a8:	6819      	ldreq	r1, [r3, #0]
 80054aa:	685b      	ldreq	r3, [r3, #4]
 80054ac:	1949      	addeq	r1, r1, r5
 80054ae:	6021      	streq	r1, [r4, #0]
 80054b0:	e7ed      	b.n	800548e <_free_r+0x22>
 80054b2:	461a      	mov	r2, r3
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	b10b      	cbz	r3, 80054bc <_free_r+0x50>
 80054b8:	42a3      	cmp	r3, r4
 80054ba:	d9fa      	bls.n	80054b2 <_free_r+0x46>
 80054bc:	6811      	ldr	r1, [r2, #0]
 80054be:	1855      	adds	r5, r2, r1
 80054c0:	42a5      	cmp	r5, r4
 80054c2:	d10b      	bne.n	80054dc <_free_r+0x70>
 80054c4:	6824      	ldr	r4, [r4, #0]
 80054c6:	4421      	add	r1, r4
 80054c8:	1854      	adds	r4, r2, r1
 80054ca:	42a3      	cmp	r3, r4
 80054cc:	6011      	str	r1, [r2, #0]
 80054ce:	d1e0      	bne.n	8005492 <_free_r+0x26>
 80054d0:	681c      	ldr	r4, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	6053      	str	r3, [r2, #4]
 80054d6:	4421      	add	r1, r4
 80054d8:	6011      	str	r1, [r2, #0]
 80054da:	e7da      	b.n	8005492 <_free_r+0x26>
 80054dc:	d902      	bls.n	80054e4 <_free_r+0x78>
 80054de:	230c      	movs	r3, #12
 80054e0:	6003      	str	r3, [r0, #0]
 80054e2:	e7d6      	b.n	8005492 <_free_r+0x26>
 80054e4:	6825      	ldr	r5, [r4, #0]
 80054e6:	1961      	adds	r1, r4, r5
 80054e8:	428b      	cmp	r3, r1
 80054ea:	bf04      	itt	eq
 80054ec:	6819      	ldreq	r1, [r3, #0]
 80054ee:	685b      	ldreq	r3, [r3, #4]
 80054f0:	6063      	str	r3, [r4, #4]
 80054f2:	bf04      	itt	eq
 80054f4:	1949      	addeq	r1, r1, r5
 80054f6:	6021      	streq	r1, [r4, #0]
 80054f8:	6054      	str	r4, [r2, #4]
 80054fa:	e7ca      	b.n	8005492 <_free_r+0x26>
 80054fc:	b003      	add	sp, #12
 80054fe:	bd30      	pop	{r4, r5, pc}
 8005500:	200009c8 	.word	0x200009c8

08005504 <__malloc_lock>:
 8005504:	4801      	ldr	r0, [pc, #4]	; (800550c <__malloc_lock+0x8>)
 8005506:	f000 b809 	b.w	800551c <__retarget_lock_acquire_recursive>
 800550a:	bf00      	nop
 800550c:	200009cc 	.word	0x200009cc

08005510 <__malloc_unlock>:
 8005510:	4801      	ldr	r0, [pc, #4]	; (8005518 <__malloc_unlock+0x8>)
 8005512:	f000 b804 	b.w	800551e <__retarget_lock_release_recursive>
 8005516:	bf00      	nop
 8005518:	200009cc 	.word	0x200009cc

0800551c <__retarget_lock_acquire_recursive>:
 800551c:	4770      	bx	lr

0800551e <__retarget_lock_release_recursive>:
 800551e:	4770      	bx	lr

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
