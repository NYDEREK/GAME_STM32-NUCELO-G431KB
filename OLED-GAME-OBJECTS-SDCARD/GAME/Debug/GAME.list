
GAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000566c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001acc  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007310  08007310  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007318  08007318  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08007328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  200000c8  080073f0  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  080073f0  000209e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152f7  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3e  00000000  00000000  000353ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00038f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00039f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218cc  00000000  00000000  0003ae10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c8d  00000000  00000000  0005c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc111  00000000  00000000  00073369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f47a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004240  00000000  00000000  0012f4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000c8 	.word	0x200000c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800582c 	.word	0x0800582c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000cc 	.word	0x200000cc
 8000214:	0800582c 	.word	0x0800582c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_ZN5BlockC1EiiiiPKhii>:
#include "Block.h"
#include"Player.h"
#define true 1
#define false 0

Block::Block(int x, int y,int w,int h,const unsigned char* b,int ml,int mr) {//writing primary data to spike object
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <_ZN5BlockC1EiiiiPKhii+0x4c>)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
	width=w;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	60da      	str	r2, [r3, #12]
	height=h;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	611a      	str	r2, [r3, #16]
    bitmap=b;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
    moveL=ml;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6a3a      	ldr	r2, [r7, #32]
 8000552:	619a      	str	r2, [r3, #24]
    moveR=mr;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000558:	615a      	str	r2, [r3, #20]
}
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	0800584c 	.word	0x0800584c

0800056c <_ZN5Block11generateHITEv>:
void Block::generateHIT(){ // it generates the hit box for this block
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	441a      	add	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZN5Block13Display_BlockEv>:
void Block::Display_Block(){
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	b2d8      	uxtb	r0, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	b2d9      	uxtb	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	b2dc      	uxtb	r4, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2501      	movs	r5, #1
 80005d2:	9501      	str	r5, [sp, #4]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4623      	mov	r3, r4
 80005d8:	f002 f85e 	bl	8002698 <ssd1306_DrawBitmap>

}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bdb0      	pop	{r4, r5, r7, pc}

080005e4 <_ZN5Block5CheckERiR6Player>:

void Block::Check(int &barrier,Player &player){ // it checks if player hit this block (int b is int barrier for gravitation function)
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
player.generateHIT();
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 fc65 	bl	8000ec0 <_ZN6Player11generateHITEv>
generateHIT();
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f7ff ffb8 	bl	800056c <_ZN5Block11generateHITEv>
if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a1a      	ldr	r2, [r3, #32]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	429a      	cmp	r2, r3
 8000606:	dd0e      	ble.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	429a      	cmp	r2, r3
 8000612:	da08      	bge.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800061c:	429a      	cmp	r2, r3
 800061e:	d102      	bne.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
barrier=1; //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
}

if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of block
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6a1a      	ldr	r2, [r3, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	429a      	cmp	r2, r3
 8000630:	db2b      	blt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800063a:	429a      	cmp	r2, r3
 800063c:	db05      	blt.n	800064a <_ZN5Block5CheckERiR6Player+0x66>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	429a      	cmp	r2, r3
 8000648:	dd0b      	ble.n	8000662 <_ZN5Block5CheckERiR6Player+0x7e>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	429a      	cmp	r2, r3
 8000654:	dc19      	bgt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065e:	429a      	cmp	r2, r3
 8000660:	dd13      	ble.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a1a      	ldr	r2, [r3, #32]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066a:	429a      	cmp	r2, r3
 800066c:	da0d      	bge.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60da      	str	r2, [r3, #12]

  if(is_block_moving==true){//because of this "if" moving block can move the moving player
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d104      	bne.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60da      	str	r2, [r3, #12]
  }

}

if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of block
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	429a      	cmp	r2, r3
 8000694:	dc2b      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069e:	429a      	cmp	r2, r3
 80006a0:	db05      	blt.n	80006ae <_ZN5Block5CheckERiR6Player+0xca>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dd0b      	ble.n	80006c6 <_ZN5Block5CheckERiR6Player+0xe2>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dc19      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dd13      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	69da      	ldr	r2, [r3, #28]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6a1b      	ldr	r3, [r3, #32]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dd0d      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]

 if(is_block_moving==true){//because of this "if" moving block can move the moving player
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d104      	bne.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60da      	str	r2, [r3, #12]
 }

 }
//TODO write function for hiting bottom of block
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZN5Block10Move_BlockEiiRiR6Player>:

void Block:: Move_Block(int point_A,int point_B,int &barrier,Player &player){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
    is_block_moving=true;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
	if(moveR==true){   //moving the block form point A to point B
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d104      	bne.n	800071c <_ZN5Block10Move_BlockEiiRiR6Player+0x26>
	   pos_x++;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	605a      	str	r2, [r3, #4]
	  }
	if(moveL==true){   //moving the block form point B to point A
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d104      	bne.n	800072e <_ZN5Block10Move_BlockEiiRiR6Player+0x38>
	   pos_x--;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	605a      	str	r2, [r3, #4]
	  }
	if(pos_x==point_A){//check if block hit the point_A
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	429a      	cmp	r2, r3
 8000736:	d105      	bne.n	8000744 <_ZN5Block10Move_BlockEiiRiR6Player+0x4e>
	   moveL=false;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
	   moveR=true;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
	  }
	if(RHIT==point_B){//check if block hit the ponit_B
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	d105      	bne.n	800075a <_ZN5Block10Move_BlockEiiRiR6Player+0x64>
	   moveL=true;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
	   moveR=false;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
 }
	//----moving character-----// /*<-- the player can ride on block (be on him and move with him without doing anything)*/
	player.generateHIT();
 800075a:	69b8      	ldr	r0, [r7, #24]
 800075c:	f000 fbb0 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff ff03 	bl	800056c <_ZN5Block11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	6a1a      	ldr	r2, [r3, #32]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	429a      	cmp	r2, r3
 8000770:	dd20      	ble.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	429a      	cmp	r2, r3
 800077c:	da1a      	bge.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	429a      	cmp	r2, r3
 8000788:	d114      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	barrier=1;  //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	if(moveR==true){
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d104      	bne.n	80007a2 <_ZN5Block10Move_BlockEiiRiR6Player+0xac>
		player.pos_x++;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	60da      	str	r2, [r3, #12]
	}
	if(moveL==true){
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d104      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	    player.pos_x--;
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	60da      	str	r2, [r3, #12]
	}
  }
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZN5Block15Change_positionEii>:
void Block::Change_position(int x,int y){
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	pos_x=x;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	605a      	str	r2, [r3, #4]
	pos_y=y;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_ZN5BlockD1Ev>:
Block::~Block() {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <_ZN5BlockD1Ev+0x1c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	0800584c 	.word	0x0800584c

08000800 <_ZN5BlockD0Ev>:
Block::~Block() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
}
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ffe9 	bl	80007e0 <_ZN5BlockD1Ev>
 800080e:	2134      	movs	r1, #52	; 0x34
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f004 ff79 	bl	8005708 <_ZdlPvj>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_ZN4CoinC1EiiiiPKhi>:
#include <Coin.h>
#define true 1
#define false 0


Coin::Coin(int x,int y,int w,int h,const unsigned char* b,int icl){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <_ZN4CoinC1EiiiiPKhi+0x48>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	60da      	str	r2, [r3, #12]
	pos_y=y;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]
	width=w;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	615a      	str	r2, [r3, #20]
	height=h;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	619a      	str	r2, [r3, #24]
	bitmap=b;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
	is_coin_alive=icl;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a3a      	ldr	r2, [r7, #32]
 8000856:	609a      	str	r2, [r3, #8]

}
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	0800585c 	.word	0x0800585c

0800086c <_ZN4Coin5CheckER6PlayerRi>:

void Coin::Check(Player &player,int &map){//checking if player(boxi) grab this coin
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
if(is_coin_alive==true){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 8084 	bne.w	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
is_coin_gathered=false;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
	player.generateHIT();
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f000 fb19 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f000 f87f 	bl	8000992 <_ZN4Coin11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	6a1a      	ldr	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	dd16      	ble.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6a1b      	ldr	r3, [r3, #32]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	da10      	bge.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d10a      	bne.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
	    player.Player_coins++;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	609a      	str	r2, [r3, #8]
	    //map++;
	   is_coin_alive=false;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	   is_coin_gathered=true;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2201      	movs	r2, #1
 80008cc:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of coin
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	6a1a      	ldr	r2, [r3, #32]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	db28      	blt.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	429a      	cmp	r2, r3
 80008e4:	db05      	blt.n	80008f2 <_ZN4Coin5CheckER6PlayerRi+0x86>
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dd0b      	ble.n	800090a <_ZN4Coin5CheckER6PlayerRi+0x9e>
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dc16      	bgt.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	429a      	cmp	r2, r3
 8000908:	dd10      	ble.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	6a1a      	ldr	r2, [r3, #32]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	429a      	cmp	r2, r3
 8000914:	da0a      	bge.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
	    player.Player_coins++;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	609a      	str	r2, [r3, #8]
	    //map++;
	    is_coin_alive=false;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
	    is_coin_gathered=true;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of coin
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	429a      	cmp	r2, r3
 8000936:	dc28      	bgt.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000940:	429a      	cmp	r2, r3
 8000942:	db05      	blt.n	8000950 <_ZN4Coin5CheckER6PlayerRi+0xe4>
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094c:	429a      	cmp	r2, r3
 800094e:	dd0b      	ble.n	8000968 <_ZN4Coin5CheckER6PlayerRi+0xfc>
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	429a      	cmp	r2, r3
 800095a:	dc16      	bgt.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000964:	429a      	cmp	r2, r3
 8000966:	dd10      	ble.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	429a      	cmp	r2, r3
 8000972:	dd0a      	ble.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
	    player.Player_coins++;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	609a      	str	r2, [r3, #8]
	    //map++;
	    is_coin_alive=false;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	    is_coin_gathered=true;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2201      	movs	r2, #1
 8000988:	605a      	str	r2, [r3, #4]

	 }
}
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_ZN4Coin11generateHITEv>:

void Coin::generateHIT(){ //generates hit box of coin
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	441a      	add	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691a      	ldr	r2, [r3, #16]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	441a      	add	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_ZN4Coin12Display_CoinEv>:

void Coin::Display_Coin(){//if coin is alive can be displayed
 80009d2:	b5b0      	push	{r4, r5, r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af02      	add	r7, sp, #8
 80009d8:	6078      	str	r0, [r7, #4]
	if(is_coin_alive==true){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d113      	bne.n	8000a0a <_ZN4Coin12Display_CoinEv+0x38>
		ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	b2d8      	uxtb	r0, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	b2d9      	uxtb	r1, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	b2dc      	uxtb	r4, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2501      	movs	r5, #1
 8000a00:	9501      	str	r5, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4623      	mov	r3, r4
 8000a06:	f001 fe47 	bl	8002698 <ssd1306_DrawBitmap>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdb0      	pop	{r4, r5, r7, pc}

08000a12 <_ZN4Coin15Change_positionEii>:
void Coin::Change_position(int x,int y){//repositioning
 8000a12:	b480      	push	{r7}
 8000a14:	b085      	sub	sp, #20
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <_ZN4CoinD1Ev>:
Coin::~Coin() {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <_ZN4CoinD1Ev+0x1c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	0800585c 	.word	0x0800585c

08000a58 <_ZN4CoinD0Ev>:
Coin::~Coin() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
}
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ffe9 	bl	8000a38 <_ZN4CoinD1Ev>
 8000a66:	2130      	movs	r1, #48	; 0x30
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f004 fe4d 	bl	8005708 <_ZdlPvj>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN3MapC1EPKhiiii>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Map.h>

Map::Map(const unsigned char* b ,int w ,int h, int x, int y){
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <_ZN3MapC1EPKhiiii+0x40>)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	69fa      	ldr	r2, [r7, #28]
 8000a96:	609a      	str	r2, [r3, #8]
	width=w;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	60da      	str	r2, [r3, #12]
	height=h;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	611a      	str	r2, [r3, #16]
	bitmap=b;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	615a      	str	r2, [r3, #20]
}
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	0800586c 	.word	0x0800586c

08000abc <_ZN3Map11Display_mapEv>:
void Map::Display_map(){
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
	//ssd1306_Fill(Black);
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height,White);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	b2d8      	uxtb	r0, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	b2d9      	uxtb	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	695a      	ldr	r2, [r3, #20]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	b2dc      	uxtb	r4, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2501      	movs	r5, #1
 8000ae2:	9501      	str	r5, [sp, #4]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	f001 fdd6 	bl	8002698 <ssd1306_DrawBitmap>
    //ssd1306_UpdateScreen();
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}

08000af4 <_ZN3MapD1Ev>:
Map::~Map() {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <_ZN3MapD1Ev+0x1c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	0800586c 	.word	0x0800586c

08000b14 <_ZN3MapD0Ev>:
Map::~Map() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
}
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffe9 	bl	8000af4 <_ZN3MapD1Ev>
 8000b22:	2118      	movs	r1, #24
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f004 fdef 	bl	8005708 <_ZdlPvj>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZN3MobC1EiiiiiPKhii>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>
#include <Mob.h>

Mob::Mob(int x,int y,int is_al,int w,int h,const unsigned char* b,int ml,int mr){
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <_ZN3MobC1EiiiiiPKhii+0x54>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	60da      	str	r2, [r3, #12]

	is_mob_alive=is_al;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	605a      	str	r2, [r3, #4]
	width=w;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	611a      	str	r2, [r3, #16]
	height=h;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	615a      	str	r2, [r3, #20]
	bitmap=b;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6a3a      	ldr	r2, [r7, #32]
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
	moveL=ml;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b70:	61da      	str	r2, [r3, #28]
	moveR=mr;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b76:	619a      	str	r2, [r3, #24]
}
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	0800587c 	.word	0x0800587c

08000b8c <_ZN3Mob11generateHITEv>:

void Mob::generateHIT(){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	441a      	add	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	441a      	add	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_ZN3Mob5checkER6Player>:

void Mob::check(Player &player){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
generateHIT();
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffd8 	bl	8000b8c <_ZN3Mob11generateHITEv>
player.generateHIT();
 8000bdc:	6838      	ldr	r0, [r7, #0]
 8000bde:	f000 f96f 	bl	8000ec0 <_ZN6Player11generateHITEv>
if(is_mob_alive==1){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d143      	bne.n	8000c72 <_ZN3Mob5checkER6Player+0xa6>

if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){//if player hit mob's head mob dies
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	6a1a      	ldr	r2, [r3, #32]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dd0e      	ble.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	69da      	ldr	r2, [r3, #28]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	da08      	bge.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d102      	bne.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
  is_mob_alive=0;//Mob dies
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]


if((player.LHIT<=RHIT)&&(player.BHIT>=BHIT)&&(player.BHIT<=THIT)){// if player hit the right side of Mob
  player.Player_live--;//player is loosing his hearts
  }*/
if((player.RHIT==LHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){//if player hit left side of Mob
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	6a1a      	ldr	r2, [r3, #32]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d110      	bne.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	db0a      	blt.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dc04      	bgt.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
  player.Player_live--;//player is loosing his hearts
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	1e5a      	subs	r2, r3, #1
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	605a      	str	r2, [r3, #4]
}


if((player.LHIT==RHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){// if player hit the right side of Mob
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	69da      	ldr	r2, [r3, #28]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d114      	bne.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	429a      	cmp	r2, r3
 8000c58:	db0e      	blt.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dc08      	bgt.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
  player.Player_live--;//player is loosing his hearts
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 }
else{
   pos_y=100;
   //throwing body of dead Mob out of the map
}
}
 8000c70:	e002      	b.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
   pos_y=100;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2264      	movs	r2, #100	; 0x64
 8000c76:	60da      	str	r2, [r3, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN3Mob8Move_mobEii>:

void Mob::Move_mob(int point_A, int point_B){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
	generateHIT();
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f7ff ff7d 	bl	8000b8c <_ZN3Mob11generateHITEv>
	if(is_mob_alive==1){
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d127      	bne.n	8000cea <_ZN3Mob8Move_mobEii+0x6a>
	if(moveR==true){   //moving  Mob form point A to point B
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d104      	bne.n	8000cac <_ZN3Mob8Move_mobEii+0x2c>
		   pos_x++;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	609a      	str	r2, [r3, #8]
		  }
		if(moveL==true){   //moving Mob form point B to point A
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <_ZN3Mob8Move_mobEii+0x3e>
		   pos_x--;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	609a      	str	r2, [r3, #8]
		  }
		if(pos_x==point_A){//check if Mob hit the point_A
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d105      	bne.n	8000cd4 <_ZN3Mob8Move_mobEii+0x54>
		   moveL=false;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
		   moveR=true;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	619a      	str	r2, [r3, #24]
		  }
		if(RHIT==point_B){//check if Mob hit the ponit_B
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d105      	bne.n	8000cea <_ZN3Mob8Move_mobEii+0x6a>
		   moveL=true;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	61da      	str	r2, [r3, #28]
		   moveR=false;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
          }
	}
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_ZN3Mob11Display_mobEv>:
void Mob::Display_mob(){
 8000cf2:	b5b0      	push	{r4, r5, r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	6078      	str	r0, [r7, #4]
	if(is_mob_alive==1){
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d113      	bne.n	8000d2a <_ZN3Mob11Display_mobEv+0x38>
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	b2d8      	uxtb	r0, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	b2d9      	uxtb	r1, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	b2dc      	uxtb	r4, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2501      	movs	r5, #1
 8000d20:	9501      	str	r5, [sp, #4]
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	4623      	mov	r3, r4
 8000d26:	f001 fcb7 	bl	8002698 <ssd1306_DrawBitmap>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}

08000d32 <_ZN3Mob15Change_positionEii>:
void Mob::Change_position(int x,int y){
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	60da      	str	r2, [r3, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <_ZN3MobD1Ev>:
Mob::~Mob() {
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <_ZN3MobD1Ev+0x1c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	0800587c 	.word	0x0800587c

08000d78 <_ZN3MobD0Ev>:
Mob::~Mob() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
}
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ffe9 	bl	8000d58 <_ZN3MobD1Ev>
 8000d86:	2134      	movs	r1, #52	; 0x34
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f004 fcbd 	bl	8005708 <_ZdlPvj>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN6PlayerC1EiiiiiPKh>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>

Player::Player(int x,int y,int w,int h,int p_l,const unsigned char* b) {//setting values and generating hit box
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <_ZN6PlayerC1EiiiiiPKh+0x48>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	611a      	str	r2, [r3, #16]
	width=w;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	615a      	str	r2, [r3, #20]
	height=h;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	619a      	str	r2, [r3, #24]
	bitmap=b;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a3a      	ldr	r2, [r7, #32]
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
    Player_live=p_l;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	605a      	str	r2, [r3, #4]
	generateHIT();
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f000 f875 	bl	8000ec0 <_ZN6Player11generateHITEv>
}
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	08005894 	.word	0x08005894

08000de4 <_ZN6Player14Display_PlayerEv>:
void Player::Display_Player(){ //drawing the player
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	6078      	str	r0, [r7, #4]

	ssd1306_DrawBitmap(pos_x, pos_y, bitmap,width, height, White);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	b2d8      	uxtb	r0, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	b2d9      	uxtb	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	b2dc      	uxtb	r4, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2501      	movs	r5, #1
 8000e0a:	9501      	str	r5, [sp, #4]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4623      	mov	r3, r4
 8000e10:	f001 fc42 	bl	8002698 <ssd1306_DrawBitmap>

}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}

08000e1c <_ZN6Player21Display_Player_heartsEv>:
void Player::Display_Player_hearts(){//drawing player's hearts
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]

	if(Player_live==3){//if player has all lives
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d11d      	bne.n	8000e68 <_ZN6Player21Display_Player_heartsEv+0x4c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	2305      	movs	r3, #5
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2305      	movs	r3, #5
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2079      	movs	r0, #121	; 0x79
 8000e3c:	f001 fc2c 	bl	8002698 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e40:	2301      	movs	r3, #1
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	2305      	movs	r3, #5
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2305      	movs	r3, #5
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2074      	movs	r0, #116	; 0x74
 8000e50:	f001 fc22 	bl	8002698 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(111,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	2305      	movs	r3, #5
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e60:	2100      	movs	r1, #0
 8000e62:	206f      	movs	r0, #111	; 0x6f
 8000e64:	f001 fc18 	bl	8002698 <ssd1306_DrawBitmap>
	}
	if(Player_live==2){//if player lose one heart
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d113      	bne.n	8000e98 <_ZN6Player21Display_Player_heartsEv+0x7c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e70:	2301      	movs	r3, #1
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	2305      	movs	r3, #5
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2305      	movs	r3, #5
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2079      	movs	r0, #121	; 0x79
 8000e80:	f001 fc0a 	bl	8002698 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e84:	2301      	movs	r3, #1
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	2305      	movs	r3, #5
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	2074      	movs	r0, #116	; 0x74
 8000e94:	f001 fc00 	bl	8002698 <ssd1306_DrawBitmap>
	}
	if(Player_live==1){//if player lose two hearts
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d109      	bne.n	8000eb4 <_ZN6Player21Display_Player_heartsEv+0x98>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	2079      	movs	r0, #121	; 0x79
 8000eb0:	f001 fbf2 	bl	8002698 <ssd1306_DrawBitmap>

	}

}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08005884 	.word	0x08005884

08000ec0 <_ZN6Player11generateHITEv>:
void Player::generateHIT(){ //generating hit box
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	441a      	add	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	441a      	add	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZN6Player15Change_positionEii>:
void Player::Change_position(int x,int y){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_ZN6PlayerD1Ev>:
Player::~Player() {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <_ZN6PlayerD1Ev+0x1c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	08005894 	.word	0x08005894

08000f44 <_ZN6PlayerD0Ev>:
Player::~Player() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
}
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffe9 	bl	8000f24 <_ZN6PlayerD1Ev>
 8000f52:	2130      	movs	r1, #48	; 0x30
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f004 fbd7 	bl	8005708 <_ZdlPvj>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN5SpikeC1EiiiiPKh>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"
#include <Spike.h>

Spike::Spike(int x,int y,int w, int h,const unsigned char* b) {//writing primary data to spike object
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <_ZN5SpikeC1EiiiiPKh+0x40>)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	601a      	str	r2, [r3, #0]
	 pos_x=x;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	605a      	str	r2, [r3, #4]
     pos_y=y;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
   	 width=w;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	60da      	str	r2, [r3, #12]
     height=h;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	611a      	str	r2, [r3, #16]
	 bitmap=b;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	080058a4 	.word	0x080058a4

08000fa8 <_ZN5Spike11generateHITEv>:

void Spike::generateHIT(){//generating hit box of spike
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]
	RHIT=pos_x+width;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	441a      	add	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
	THIT=pos_y;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	61da      	str	r2, [r3, #28]
	BHIT=pos_y+height;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	441a      	add	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	621a      	str	r2, [r3, #32]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_ZN5Spike5CheckERiR6Player>:

void Spike::Check(int &barrier,Player &player){//reacting on collisions with player
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	player.generateHIT();
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff63 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff ffd4 	bl	8000fa8 <_ZN5Spike11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	dd13      	ble.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	429a      	cmp	r2, r3
 8001016:	da0d      	bge.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	429a      	cmp	r2, r3
 8001022:	d107      	bne.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
	barrier=1; //function turn of our gravitation so we do not fall of this block b is barrier for gravitation
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
	player.Player_live--;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of spike
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	db22      	blt.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	429a      	cmp	r2, r3
 800104a:	db05      	blt.n	8001058 <_ZN5Spike5CheckERiR6Player+0x70>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	429a      	cmp	r2, r3
 8001056:	dd0b      	ble.n	8001070 <_ZN5Spike5CheckERiR6Player+0x88>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	429a      	cmp	r2, r3
 8001062:	dc10      	bgt.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd0a      	ble.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	429a      	cmp	r2, r3
 800107a:	da04      	bge.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
	  player.pos_x--;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60da      	str	r2, [r3, #12]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit right side of spike
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69da      	ldr	r2, [r3, #28]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	429a      	cmp	r2, r3
 8001090:	dc22      	bgt.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	429a      	cmp	r2, r3
 800109c:	db05      	blt.n	80010aa <_ZN5Spike5CheckERiR6Player+0xc2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dd0b      	ble.n	80010c2 <_ZN5Spike5CheckERiR6Player+0xda>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dc10      	bgt.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dd0a      	ble.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dd04      	ble.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
	 player.pos_x++;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60da      	str	r2, [r3, #12]
	 }
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_ZN5Spike13Display_SpikeEv>:
void Spike::Display_Spike(){//draws spike
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	b2d8      	uxtb	r0, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	b2dc      	uxtb	r4, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2501      	movs	r5, #1
 8001106:	9501      	str	r5, [sp, #4]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	f001 fac4 	bl	8002698 <ssd1306_DrawBitmap>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}

08001118 <_ZN5Spike15Change_positionEii>:
void Spike::Change_position(int x,int y){//changes position of spike
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	605a      	str	r2, [r3, #4]
	pos_y=y;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZN5SpikeD1Ev>:

Spike::~Spike() {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <_ZN5SpikeD1Ev+0x1c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	080058a4 	.word	0x080058a4

0800115c <_ZN5SpikeD0Ev>:
Spike::~Spike() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
}
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffe9 	bl	800113c <_ZN5SpikeD1Ev>
 800116a:	2128      	movs	r1, #40	; 0x28
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f004 facb 	bl	8005708 <_ZdlPvj>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_GPIO_Init+0xac>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a24      	ldr	r2, [pc, #144]	; (8001228 <MX_GPIO_Init+0xac>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_GPIO_Init+0xac>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_GPIO_Init+0xac>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <MX_GPIO_Init+0xac>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_GPIO_Init+0xac>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <MX_GPIO_Init+0xb0>)
 80011ca:	f001 ff65 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_Pin;
 80011ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f001 fdbd 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_Pin|UP_Pin;
 80011ea:	2330      	movs	r3, #48	; 0x30
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <MX_GPIO_Init+0xb0>)
 80011fe:	f001 fdb1 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_GPIO_Init+0xb0>)
 800121c:	f001 fda2 	bl	8002d64 <HAL_GPIO_Init>

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <MX_I2C1_Init+0x78>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E063FF;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_I2C1_Init+0x74>)
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <MX_I2C1_Init+0x7c>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001248:	2201      	movs	r2, #1
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <MX_I2C1_Init+0x74>)
 800126c:	f001 ff2c 	bl	80030c8 <HAL_I2C_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001276:	f000 febc 	bl	8001ff2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800127a:	2100      	movs	r1, #0
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x74>)
 800127e:	f002 fb19 	bl	80038b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001288:	f000 feb3 	bl	8001ff2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001290:	f002 fb5b 	bl	800394a <HAL_I2CEx_ConfigDigitalFilter>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800129a:	f000 feaa 	bl	8001ff2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000e4 	.word	0x200000e4
 80012a8:	40005400 	.word	0x40005400
 80012ac:	00e063ff 	.word	0x00e063ff

080012b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09c      	sub	sp, #112	; 0x70
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	2244      	movs	r2, #68	; 0x44
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fa49 	bl	8005768 <memset>
  if(i2cHandle->Instance==I2C1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_I2C_MspInit+0xe0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d153      	bne.n	8001388 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 f951 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012f8:	f000 fe7b 	bl	8001ff2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001330:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f001 fd0a 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <HAL_I2C_MspInit+0xe8>)
 800136c:	f001 fcfa 	bl	8002d64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	3770      	adds	r7, #112	; 0x70
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400

0800139c <_Z10change_mapRiS_S_S_S_S_4Coin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-------------------------------change map function---------------------------------------*/
void change_map(int &cur_map,int &is_map_changed,int &Block_1_A,int &Block_1_B,int &Mob_1_A,int &Mob_1_B,Coin coin){//maps~
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
if(coin.is_coin_gathered==true){//if coin gathered boxi is go to the next map
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	f040 8216 	bne.w	80017e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x444>
	//random number generation for choosing a map
	uint32_t random_num=0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
	HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	48c3      	ldr	r0, [pc, #780]	; (80016cc <_Z10change_mapRiS_S_S_S_S_4Coin+0x330>)
 80013c0:	f003 fb0d 	bl	80049de <HAL_RNG_GenerateRandomNumber>
	cur_map=random_num%5+1;
 80013c4:	6979      	ldr	r1, [r7, #20]
 80013c6:	4bc2      	ldr	r3, [pc, #776]	; (80016d0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x334>)
 80013c8:	fba3 2301 	umull	r2, r3, r3, r1
 80013cc:	089a      	lsrs	r2, r3, #2
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	1aca      	subs	r2, r1, r3
 80013d6:	1c53      	adds	r3, r2, #1
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	601a      	str	r2, [r3, #0]
	//cur_map++; //random map will be in future work in progress
if(cur_map==2){//map 2
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d170      	bne.n	80014c8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x12c>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(12, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210c      	movs	r1, #12
 80013ea:	48ba      	ldr	r0, [pc, #744]	; (80016d4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x338>)
 80013ec:	f7ff fd88 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,20);
 80013f0:	2214      	movs	r2, #20
 80013f2:	2101      	movs	r1, #1
 80013f4:	48b8      	ldr	r0, [pc, #736]	; (80016d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x33c>)
 80013f6:	f7ff f9e1 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(11,20);
 80013fa:	2214      	movs	r2, #20
 80013fc:	210b      	movs	r1, #11
 80013fe:	48b7      	ldr	r0, [pc, #732]	; (80016dc <_Z10change_mapRiS_S_S_S_S_4Coin+0x340>)
 8001400:	f7ff f9dc 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(21,20);
 8001404:	2214      	movs	r2, #20
 8001406:	2115      	movs	r1, #21
 8001408:	48b5      	ldr	r0, [pc, #724]	; (80016e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x344>)
 800140a:	f7ff f9d7 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(91,20);
 800140e:	2214      	movs	r2, #20
 8001410:	215b      	movs	r1, #91	; 0x5b
 8001412:	48b4      	ldr	r0, [pc, #720]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 8001414:	f7ff f9d2 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(101,20);
 8001418:	2214      	movs	r2, #20
 800141a:	2165      	movs	r1, #101	; 0x65
 800141c:	48b2      	ldr	r0, [pc, #712]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 800141e:	f7ff f9cd 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(81,52);
 8001422:	2234      	movs	r2, #52	; 0x34
 8001424:	2151      	movs	r1, #81	; 0x51
 8001426:	48b1      	ldr	r0, [pc, #708]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 8001428:	f7ff f9c8 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(91,52);
 800142c:	2234      	movs	r2, #52	; 0x34
 800142e:	215b      	movs	r1, #91	; 0x5b
 8001430:	48af      	ldr	r0, [pc, #700]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 8001432:	f7ff f9c3 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(101,52);
 8001436:	2234      	movs	r2, #52	; 0x34
 8001438:	2165      	movs	r1, #101	; 0x65
 800143a:	48ae      	ldr	r0, [pc, #696]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 800143c:	f7ff f9be 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(111,52);
 8001440:	2234      	movs	r2, #52	; 0x34
 8001442:	216f      	movs	r1, #111	; 0x6f
 8001444:	48ac      	ldr	r0, [pc, #688]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 8001446:	f7ff f9b9 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,20);
 800144a:	2214      	movs	r2, #20
 800144c:	2146      	movs	r1, #70	; 0x46
 800144e:	48ab      	ldr	r0, [pc, #684]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 8001450:	f7ff f9b4 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=31;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	221f      	movs	r2, #31
 8001458:	601a      	str	r2, [r3, #0]
Block_1_B=81;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2251      	movs	r2, #81	; 0x51
 800145e:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(91, 44);
 8001460:	222c      	movs	r2, #44	; 0x2c
 8001462:	215b      	movs	r1, #91	; 0x5b
 8001464:	48a6      	ldr	r0, [pc, #664]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 8001466:	f7ff fc64 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800146a:	4ba5      	ldr	r3, [pc, #660]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 800146c:	2201      	movs	r2, #1
 800146e:	605a      	str	r2, [r3, #4]
Mob_1_A=90;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	225a      	movs	r2, #90	; 0x5a
 8001474:	601a      	str	r2, [r3, #0]
Mob_1_B=120;
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	2278      	movs	r2, #120	; 0x78
 800147a:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(42, 34); //14
 800147c:	2222      	movs	r2, #34	; 0x22
 800147e:	212a      	movs	r1, #42	; 0x2a
 8001480:	48a0      	ldr	r0, [pc, #640]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 8001482:	f7ff fe49 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(57, 34);
 8001486:	2222      	movs	r2, #34	; 0x22
 8001488:	2139      	movs	r1, #57	; 0x39
 800148a:	489f      	ldr	r0, [pc, #636]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 800148c:	f7ff fe44 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(81, 26);
 8001490:	221a      	movs	r2, #26
 8001492:	2151      	movs	r1, #81	; 0x51
 8001494:	489d      	ldr	r0, [pc, #628]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 8001496:	f7ff fe3f 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(86, 26);
 800149a:	221a      	movs	r2, #26
 800149c:	2156      	movs	r1, #86	; 0x56
 800149e:	489c      	ldr	r0, [pc, #624]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 80014a0:	f7ff fe3a 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(122, 16);
 80014a4:	2210      	movs	r2, #16
 80014a6:	217a      	movs	r1, #122	; 0x7a
 80014a8:	489a      	ldr	r0, [pc, #616]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 80014aa:	f7ff fe35 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(122, 48);
 80014ae:	2230      	movs	r2, #48	; 0x30
 80014b0:	217a      	movs	r1, #122	; 0x7a
 80014b2:	4899      	ldr	r0, [pc, #612]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 80014b4:	f7ff fe30 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(82,44);
 80014b8:	222c      	movs	r2, #44	; 0x2c
 80014ba:	2152      	movs	r1, #82	; 0x52
 80014bc:	4897      	ldr	r0, [pc, #604]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 80014be:	f7ff faa8 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 80014c2:	4b96      	ldr	r3, [pc, #600]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	609a      	str	r2, [r3, #8]
//cur_map++;
}
if(cur_map==3){// map 3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d170      	bne.n	80015b2 <_Z10change_mapRiS_S_S_S_S_4Coin+0x216>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(2, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2102      	movs	r1, #2
 80014d4:	487f      	ldr	r0, [pc, #508]	; (80016d4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x338>)
 80014d6:	f7ff fd13 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,20);
 80014da:	2214      	movs	r2, #20
 80014dc:	2101      	movs	r1, #1
 80014de:	487e      	ldr	r0, [pc, #504]	; (80016d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x33c>)
 80014e0:	f7ff f96c 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(26,20);
 80014e4:	2214      	movs	r2, #20
 80014e6:	211a      	movs	r1, #26
 80014e8:	487c      	ldr	r0, [pc, #496]	; (80016dc <_Z10change_mapRiS_S_S_S_S_4Coin+0x340>)
 80014ea:	f7ff f967 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(31,58);
 80014ee:	223a      	movs	r2, #58	; 0x3a
 80014f0:	211f      	movs	r1, #31
 80014f2:	487b      	ldr	r0, [pc, #492]	; (80016e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x344>)
 80014f4:	f7ff f962 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(56,58);
 80014f8:	223a      	movs	r2, #58	; 0x3a
 80014fa:	2138      	movs	r1, #56	; 0x38
 80014fc:	4879      	ldr	r0, [pc, #484]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 80014fe:	f7ff f95d 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(86,58);
 8001502:	223a      	movs	r2, #58	; 0x3a
 8001504:	2156      	movs	r1, #86	; 0x56
 8001506:	4878      	ldr	r0, [pc, #480]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 8001508:	f7ff f958 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(96,58);
 800150c:	223a      	movs	r2, #58	; 0x3a
 800150e:	2160      	movs	r1, #96	; 0x60
 8001510:	4876      	ldr	r0, [pc, #472]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 8001512:	f7ff f953 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(106,58);
 8001516:	223a      	movs	r2, #58	; 0x3a
 8001518:	216a      	movs	r1, #106	; 0x6a
 800151a:	4875      	ldr	r0, [pc, #468]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 800151c:	f7ff f94e 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(116,58);
 8001520:	223a      	movs	r2, #58	; 0x3a
 8001522:	2174      	movs	r1, #116	; 0x74
 8001524:	4873      	ldr	r0, [pc, #460]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 8001526:	f7ff f949 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(21,58);
 800152a:	223a      	movs	r2, #58	; 0x3a
 800152c:	2115      	movs	r1, #21
 800152e:	4872      	ldr	r0, [pc, #456]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 8001530:	f7ff f944 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,20);
 8001534:	2214      	movs	r2, #20
 8001536:	2146      	movs	r1, #70	; 0x46
 8001538:	4870      	ldr	r0, [pc, #448]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 800153a:	f7ff f93f 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=36;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2224      	movs	r2, #36	; 0x24
 8001542:	601a      	str	r2, [r3, #0]
Block_1_B=96;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2260      	movs	r2, #96	; 0x60
 8001548:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(91, 50);
 800154a:	2232      	movs	r2, #50	; 0x32
 800154c:	215b      	movs	r1, #91	; 0x5b
 800154e:	486c      	ldr	r0, [pc, #432]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 8001550:	f7ff fbef 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 8001554:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 8001556:	2201      	movs	r2, #1
 8001558:	605a      	str	r2, [r3, #4]
Mob_1_A=86;
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	2256      	movs	r2, #86	; 0x56
 800155e:	601a      	str	r2, [r3, #0]
Mob_1_B=126;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	227e      	movs	r2, #126	; 0x7e
 8001564:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(18, 32);
 8001566:	2220      	movs	r2, #32
 8001568:	2112      	movs	r1, #18
 800156a:	4866      	ldr	r0, [pc, #408]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 800156c:	f7ff fdd4 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(40, 32);
 8001570:	2220      	movs	r2, #32
 8001572:	2128      	movs	r1, #40	; 0x28
 8001574:	4864      	ldr	r0, [pc, #400]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 8001576:	f7ff fdcf 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(47, 32);
 800157a:	2220      	movs	r2, #32
 800157c:	212f      	movs	r1, #47	; 0x2f
 800157e:	4863      	ldr	r0, [pc, #396]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 8001580:	f7ff fdca 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(54, 32);
 8001584:	2220      	movs	r2, #32
 8001586:	2136      	movs	r1, #54	; 0x36
 8001588:	4861      	ldr	r0, [pc, #388]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 800158a:	f7ff fdc5 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(61, 32);
 800158e:	2220      	movs	r2, #32
 8001590:	213d      	movs	r1, #61	; 0x3d
 8001592:	4860      	ldr	r0, [pc, #384]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 8001594:	f7ff fdc0 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(96, 32);
 8001598:	2220      	movs	r2, #32
 800159a:	2160      	movs	r1, #96	; 0x60
 800159c:	485e      	ldr	r0, [pc, #376]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 800159e:	f7ff fdbb 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(32,45);
 80015a2:	222d      	movs	r2, #45	; 0x2d
 80015a4:	2120      	movs	r1, #32
 80015a6:	485d      	ldr	r0, [pc, #372]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 80015a8:	f7ff fa33 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 80015ac:	4b5b      	ldr	r3, [pc, #364]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	609a      	str	r2, [r3, #8]
//cur_map++;
 }

if(cur_map==4){// map 4
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d170      	bne.n	800169c <_Z10change_mapRiS_S_S_S_S_4Coin+0x300>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(5, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2105      	movs	r1, #5
 80015be:	4845      	ldr	r0, [pc, #276]	; (80016d4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x338>)
 80015c0:	f7ff fc9e 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,46);
 80015c4:	222e      	movs	r2, #46	; 0x2e
 80015c6:	2101      	movs	r1, #1
 80015c8:	4843      	ldr	r0, [pc, #268]	; (80016d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x33c>)
 80015ca:	f7ff f8f7 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(31,56);
 80015ce:	2238      	movs	r2, #56	; 0x38
 80015d0:	211f      	movs	r1, #31
 80015d2:	4842      	ldr	r0, [pc, #264]	; (80016dc <_Z10change_mapRiS_S_S_S_S_4Coin+0x340>)
 80015d4:	f7ff f8f2 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(41,56);
 80015d8:	2238      	movs	r2, #56	; 0x38
 80015da:	2129      	movs	r1, #41	; 0x29
 80015dc:	4840      	ldr	r0, [pc, #256]	; (80016e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x344>)
 80015de:	f7ff f8ed 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(51,56);
 80015e2:	2238      	movs	r2, #56	; 0x38
 80015e4:	2133      	movs	r1, #51	; 0x33
 80015e6:	483f      	ldr	r0, [pc, #252]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 80015e8:	f7ff f8e8 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(61,56);
 80015ec:	2238      	movs	r2, #56	; 0x38
 80015ee:	213d      	movs	r1, #61	; 0x3d
 80015f0:	483d      	ldr	r0, [pc, #244]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 80015f2:	f7ff f8e3 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(71,56);
 80015f6:	2238      	movs	r2, #56	; 0x38
 80015f8:	2147      	movs	r1, #71	; 0x47
 80015fa:	483c      	ldr	r0, [pc, #240]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80015fc:	f7ff f8de 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(96,52);
 8001600:	2234      	movs	r2, #52	; 0x34
 8001602:	2160      	movs	r1, #96	; 0x60
 8001604:	483a      	ldr	r0, [pc, #232]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 8001606:	f7ff f8d9 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(106,42);
 800160a:	222a      	movs	r2, #42	; 0x2a
 800160c:	216a      	movs	r1, #106	; 0x6a
 800160e:	4839      	ldr	r0, [pc, #228]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 8001610:	f7ff f8d4 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(31,30);
 8001614:	221e      	movs	r2, #30
 8001616:	211f      	movs	r1, #31
 8001618:	4837      	ldr	r0, [pc, #220]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 800161a:	f7ff f8cf 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,36);
 800161e:	2224      	movs	r2, #36	; 0x24
 8001620:	2146      	movs	r1, #70	; 0x46
 8001622:	4836      	ldr	r0, [pc, #216]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 8001624:	f7ff f8ca 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=41;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2229      	movs	r2, #41	; 0x29
 800162c:	601a      	str	r2, [r3, #0]
Block_1_B=106;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	226a      	movs	r2, #106	; 0x6a
 8001632:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(60, 48);
 8001634:	2230      	movs	r2, #48	; 0x30
 8001636:	213c      	movs	r1, #60	; 0x3c
 8001638:	4831      	ldr	r0, [pc, #196]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 800163a:	f7ff fb7a 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800163e:	4b30      	ldr	r3, [pc, #192]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 8001640:	2201      	movs	r2, #1
 8001642:	605a      	str	r2, [r3, #4]
Mob_1_A=31;
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	221f      	movs	r2, #31
 8001648:	601a      	str	r2, [r3, #0]
Mob_1_B=81;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	2251      	movs	r2, #81	; 0x51
 800164e:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(21, 60);
 8001650:	223c      	movs	r2, #60	; 0x3c
 8001652:	2115      	movs	r1, #21
 8001654:	482b      	ldr	r0, [pc, #172]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 8001656:	f7ff fd5f 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(26, 60);
 800165a:	223c      	movs	r2, #60	; 0x3c
 800165c:	211a      	movs	r1, #26
 800165e:	482a      	ldr	r0, [pc, #168]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 8001660:	f7ff fd5a 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(81, 60);
 8001664:	223c      	movs	r2, #60	; 0x3c
 8001666:	2151      	movs	r1, #81	; 0x51
 8001668:	4828      	ldr	r0, [pc, #160]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 800166a:	f7ff fd55 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(86, 60);
 800166e:	223c      	movs	r2, #60	; 0x3c
 8001670:	2156      	movs	r1, #86	; 0x56
 8001672:	4827      	ldr	r0, [pc, #156]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001674:	f7ff fd50 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(91, 60);
 8001678:	223c      	movs	r2, #60	; 0x3c
 800167a:	215b      	movs	r1, #91	; 0x5b
 800167c:	4825      	ldr	r0, [pc, #148]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 800167e:	f7ff fd4b 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(120, 35);
 8001682:	2223      	movs	r2, #35	; 0x23
 8001684:	2178      	movs	r1, #120	; 0x78
 8001686:	4824      	ldr	r0, [pc, #144]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 8001688:	f7ff fd46 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(32,20);
 800168c:	2214      	movs	r2, #20
 800168e:	2120      	movs	r1, #32
 8001690:	4822      	ldr	r0, [pc, #136]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 8001692:	f7ff f9be 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 8001698:	2201      	movs	r2, #1
 800169a:	609a      	str	r2, [r3, #8]
//cur_map++;
 }
if(cur_map==5){// map 5
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	f040 809d 	bne.w	80017e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x444>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(111, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	216f      	movs	r1, #111	; 0x6f
 80016aa:	480a      	ldr	r0, [pc, #40]	; (80016d4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x338>)
 80016ac:	f7ff fc28 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(111,30);
 80016b0:	221e      	movs	r2, #30
 80016b2:	216f      	movs	r1, #111	; 0x6f
 80016b4:	4808      	ldr	r0, [pc, #32]	; (80016d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x33c>)
 80016b6:	f7ff f881 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(86,30);
 80016ba:	221e      	movs	r2, #30
 80016bc:	2156      	movs	r1, #86	; 0x56
 80016be:	4807      	ldr	r0, [pc, #28]	; (80016dc <_Z10change_mapRiS_S_S_S_S_4Coin+0x340>)
 80016c0:	f7ff f87c 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(66,20);
 80016c4:	2214      	movs	r2, #20
 80016c6:	2142      	movs	r1, #66	; 0x42
 80016c8:	e02a      	b.n	8001720 <_Z10change_mapRiS_S_S_S_S_4Coin+0x384>
 80016ca:	bf00      	nop
 80016cc:	2000052c 	.word	0x2000052c
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	20000190 	.word	0x20000190
 80016d8:	200001c0 	.word	0x200001c0
 80016dc:	200001f4 	.word	0x200001f4
 80016e0:	20000228 	.word	0x20000228
 80016e4:	2000025c 	.word	0x2000025c
 80016e8:	20000290 	.word	0x20000290
 80016ec:	200002c4 	.word	0x200002c4
 80016f0:	200002f8 	.word	0x200002f8
 80016f4:	20000360 	.word	0x20000360
 80016f8:	20000394 	.word	0x20000394
 80016fc:	2000032c 	.word	0x2000032c
 8001700:	200003c8 	.word	0x200003c8
 8001704:	200003fc 	.word	0x200003fc
 8001708:	20000424 	.word	0x20000424
 800170c:	2000044c 	.word	0x2000044c
 8001710:	20000474 	.word	0x20000474
 8001714:	2000049c 	.word	0x2000049c
 8001718:	200004c4 	.word	0x200004c4
 800171c:	200004ec 	.word	0x200004ec
 8001720:	4831      	ldr	r0, [pc, #196]	; (80017e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x44c>)
 8001722:	f7ff f84b 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(1,52);
 8001726:	2234      	movs	r2, #52	; 0x34
 8001728:	2101      	movs	r1, #1
 800172a:	4830      	ldr	r0, [pc, #192]	; (80017ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x450>)
 800172c:	f7ff f846 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(21,52);
 8001730:	2234      	movs	r2, #52	; 0x34
 8001732:	2115      	movs	r1, #21
 8001734:	482e      	ldr	r0, [pc, #184]	; (80017f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x454>)
 8001736:	f7ff f841 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(46,52);
 800173a:	2234      	movs	r2, #52	; 0x34
 800173c:	212e      	movs	r1, #46	; 0x2e
 800173e:	482d      	ldr	r0, [pc, #180]	; (80017f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x458>)
 8001740:	f7ff f83c 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(46,30);
 8001744:	221e      	movs	r2, #30
 8001746:	212e      	movs	r1, #46	; 0x2e
 8001748:	482b      	ldr	r0, [pc, #172]	; (80017f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x45c>)
 800174a:	f7ff f837 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(101,58);
 800174e:	223a      	movs	r2, #58	; 0x3a
 8001750:	2165      	movs	r1, #101	; 0x65
 8001752:	482a      	ldr	r0, [pc, #168]	; (80017fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x460>)
 8001754:	f7ff f832 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(121,58);
 8001758:	223a      	movs	r2, #58	; 0x3a
 800175a:	2179      	movs	r1, #121	; 0x79
 800175c:	4828      	ldr	r0, [pc, #160]	; (8001800 <_Z10change_mapRiS_S_S_S_S_4Coin+0x464>)
 800175e:	f7ff f82d 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(46,16);
 8001762:	2210      	movs	r2, #16
 8001764:	212e      	movs	r1, #46	; 0x2e
 8001766:	4827      	ldr	r0, [pc, #156]	; (8001804 <_Z10change_mapRiS_S_S_S_S_4Coin+0x468>)
 8001768:	f7ff f828 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=21;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2215      	movs	r2, #21
 8001770:	601a      	str	r2, [r3, #0]
Block_1_B=66;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2242      	movs	r2, #66	; 0x42
 8001776:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(21, 44);
 8001778:	222c      	movs	r2, #44	; 0x2c
 800177a:	2115      	movs	r1, #21
 800177c:	4822      	ldr	r0, [pc, #136]	; (8001808 <_Z10change_mapRiS_S_S_S_S_4Coin+0x46c>)
 800177e:	f7ff fad8 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <_Z10change_mapRiS_S_S_S_S_4Coin+0x46c>)
 8001784:	2201      	movs	r2, #1
 8001786:	605a      	str	r2, [r3, #4]
Mob_1_A=1;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
Mob_1_B=46;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	222e      	movs	r2, #46	; 0x2e
 8001792:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(11, 20);
 8001794:	2214      	movs	r2, #20
 8001796:	210b      	movs	r1, #11
 8001798:	481c      	ldr	r0, [pc, #112]	; (800180c <_Z10change_mapRiS_S_S_S_S_4Coin+0x470>)
 800179a:	f7ff fcbd 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(17, 20);
 800179e:	2214      	movs	r2, #20
 80017a0:	2111      	movs	r1, #17
 80017a2:	481b      	ldr	r0, [pc, #108]	; (8001810 <_Z10change_mapRiS_S_S_S_S_4Coin+0x474>)
 80017a4:	f7ff fcb8 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(26, 30);
 80017a8:	221e      	movs	r2, #30
 80017aa:	211a      	movs	r1, #26
 80017ac:	4819      	ldr	r0, [pc, #100]	; (8001814 <_Z10change_mapRiS_S_S_S_S_4Coin+0x478>)
 80017ae:	f7ff fcb3 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(31, 30);
 80017b2:	221e      	movs	r2, #30
 80017b4:	211f      	movs	r1, #31
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <_Z10change_mapRiS_S_S_S_S_4Coin+0x47c>)
 80017b8:	f7ff fcae 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(46, 24);
 80017bc:	2218      	movs	r2, #24
 80017be:	212e      	movs	r1, #46	; 0x2e
 80017c0:	4816      	ldr	r0, [pc, #88]	; (800181c <_Z10change_mapRiS_S_S_S_S_4Coin+0x480>)
 80017c2:	f7ff fca9 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(51,24);
 80017c6:	2218      	movs	r2, #24
 80017c8:	2133      	movs	r1, #51	; 0x33
 80017ca:	4815      	ldr	r0, [pc, #84]	; (8001820 <_Z10change_mapRiS_S_S_S_S_4Coin+0x484>)
 80017cc:	f7ff fca4 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(48,44);
 80017d0:	222c      	movs	r2, #44	; 0x2c
 80017d2:	2130      	movs	r1, #48	; 0x30
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <_Z10change_mapRiS_S_S_S_S_4Coin+0x488>)
 80017d6:	f7ff f91c 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <_Z10change_mapRiS_S_S_S_S_4Coin+0x488>)
 80017dc:	2201      	movs	r2, #1
 80017de:	609a      	str	r2, [r3, #8]
//cur_map++;
 }
}
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000228 	.word	0x20000228
 80017ec:	2000025c 	.word	0x2000025c
 80017f0:	20000290 	.word	0x20000290
 80017f4:	200002c4 	.word	0x200002c4
 80017f8:	200002f8 	.word	0x200002f8
 80017fc:	20000360 	.word	0x20000360
 8001800:	20000394 	.word	0x20000394
 8001804:	2000032c 	.word	0x2000032c
 8001808:	200003c8 	.word	0x200003c8
 800180c:	200003fc 	.word	0x200003fc
 8001810:	20000424 	.word	0x20000424
 8001814:	2000044c 	.word	0x2000044c
 8001818:	20000474 	.word	0x20000474
 800181c:	2000049c 	.word	0x2000049c
 8001820:	200004c4 	.word	0x200004c4
 8001824:	200004ec 	.word	0x200004ec

08001828 <_Z10easter_eggv>:
/*-------------------Easter egg----------------------------------------------*/
//Its easter egg on map 5 on the right bottom corner of the map
void easter_egg(){
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	if((boxi.pos_x>=124)&&(boxi.pos_y>=40)&&(current_map==5)){
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <_Z10easter_eggv+0xac>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b7b      	cmp	r3, #123	; 0x7b
 8001832:	dd4d      	ble.n	80018d0 <_Z10easter_eggv+0xa8>
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <_Z10easter_eggv+0xac>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b27      	cmp	r3, #39	; 0x27
 800183a:	dd49      	ble.n	80018d0 <_Z10easter_eggv+0xa8>
 800183c:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <_Z10easter_eggv+0xb0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d145      	bne.n	80018d0 <_Z10easter_eggv+0xa8>
	  //--CHANGE POSINTIONS--//
	  boxi.Change_position(80,34);
 8001844:	2222      	movs	r2, #34	; 0x22
 8001846:	2150      	movs	r1, #80	; 0x50
 8001848:	4822      	ldr	r0, [pc, #136]	; (80018d4 <_Z10easter_eggv+0xac>)
 800184a:	f7ff fb59 	bl	8000f00 <_ZN6Player15Change_positionEii>
	  m1.Change_position(80,43);
 800184e:	222b      	movs	r2, #43	; 0x2b
 8001850:	2150      	movs	r1, #80	; 0x50
 8001852:	4822      	ldr	r0, [pc, #136]	; (80018dc <_Z10easter_eggv+0xb4>)
 8001854:	f7ff fa6d 	bl	8000d32 <_ZN3Mob15Change_positionEii>
	  B[0].Change_position(80,52);
 8001858:	2234      	movs	r2, #52	; 0x34
 800185a:	2150      	movs	r1, #80	; 0x50
 800185c:	4820      	ldr	r0, [pc, #128]	; (80018e0 <_Z10easter_eggv+0xb8>)
 800185e:	f7fe ffad 	bl	80007bc <_ZN5Block15Change_positionEii>
	  //--DISPLAY--//
	  ssd1306_Fill(Black);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 fdb2 	bl	80023cc <ssd1306_Fill>
	  boxi.Display_Player();
 8001868:	481a      	ldr	r0, [pc, #104]	; (80018d4 <_Z10easter_eggv+0xac>)
 800186a:	f7ff fabb 	bl	8000de4 <_ZN6Player14Display_PlayerEv>
	  m1.Display_mob();
 800186e:	481b      	ldr	r0, [pc, #108]	; (80018dc <_Z10easter_eggv+0xb4>)
 8001870:	f7ff fa3f 	bl	8000cf2 <_ZN3Mob11Display_mobEv>
	  B[0].Display_Block();
 8001874:	481a      	ldr	r0, [pc, #104]	; (80018e0 <_Z10easter_eggv+0xb8>)
 8001876:	f7fe fe99 	bl	80005ac <_ZN5Block13Display_BlockEv>
	  easter_egg_map.Display_map();
 800187a:	481a      	ldr	r0, [pc, #104]	; (80018e4 <_Z10easter_eggv+0xbc>)
 800187c:	f7ff f91e 	bl	8000abc <_ZN3Map11Display_mapEv>
	  ssd1306_SetCursor(30, 34);
 8001880:	2122      	movs	r1, #34	; 0x22
 8001882:	201e      	movs	r0, #30
 8001884:	f000 fef0 	bl	8002668 <ssd1306_SetCursor>
	  ssd1306_WriteString(Szymon_string, Font_6x8, White);
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <_Z10easter_eggv+0xc0>)
 800188a:	2301      	movs	r3, #1
 800188c:	ca06      	ldmia	r2, {r1, r2}
 800188e:	4817      	ldr	r0, [pc, #92]	; (80018ec <_Z10easter_eggv+0xc4>)
 8001890:	f000 fec4 	bl	800261c <ssd1306_WriteString>
	  ssd1306_SetCursor(30, 43);
 8001894:	212b      	movs	r1, #43	; 0x2b
 8001896:	201e      	movs	r0, #30
 8001898:	f000 fee6 	bl	8002668 <ssd1306_SetCursor>
	  ssd1306_WriteString(Nyderek_string, Font_6x8, White);
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <_Z10easter_eggv+0xc0>)
 800189e:	2301      	movs	r3, #1
 80018a0:	ca06      	ldmia	r2, {r1, r2}
 80018a2:	4813      	ldr	r0, [pc, #76]	; (80018f0 <_Z10easter_eggv+0xc8>)
 80018a4:	f000 feba 	bl	800261c <ssd1306_WriteString>
	  ssd1306_SetCursor(30,54);
 80018a8:	2136      	movs	r1, #54	; 0x36
 80018aa:	201e      	movs	r0, #30
 80018ac:	f000 fedc 	bl	8002668 <ssd1306_SetCursor>
	  ssd1306_WriteString(year_string, Font_6x8, White);
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <_Z10easter_eggv+0xc0>)
 80018b2:	2301      	movs	r3, #1
 80018b4:	ca06      	ldmia	r2, {r1, r2}
 80018b6:	480f      	ldr	r0, [pc, #60]	; (80018f4 <_Z10easter_eggv+0xcc>)
 80018b8:	f000 feb0 	bl	800261c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80018bc:	f000 fdaa 	bl	8002414 <ssd1306_UpdateScreen>
	  HAL_Delay(10000);
 80018c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80018c4:	f001 f91c 	bl	8002b00 <HAL_Delay>
	  //---WIN----//
	  boxi.Player_coins=3000;
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <_Z10easter_eggv+0xac>)
 80018ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018ce:	609a      	str	r2, [r3, #8]
	}
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000190 	.word	0x20000190
 80018d8:	20000520 	.word	0x20000520
 80018dc:	200003c8 	.word	0x200003c8
 80018e0:	200001c0 	.word	0x200001c0
 80018e4:	20000178 	.word	0x20000178
 80018e8:	20000050 	.word	0x20000050
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000014 	.word	0x20000014
 80018f4:	20000028 	.word	0x20000028

080018f8 <_Z8WIN_GAMEv>:
/*-------------------WIN FUNCTION-------------------------------------------*/
void WIN_GAME(){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af02      	add	r7, sp, #8
	if(boxi.Player_coins>=5){
 80018fe:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <_Z8WIN_GAMEv+0xc8>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b04      	cmp	r3, #4
 8001904:	dd58      	ble.n	80019b8 <_Z8WIN_GAMEv+0xc0>
	boxi.Change_position(3,54);
 8001906:	2236      	movs	r2, #54	; 0x36
 8001908:	2103      	movs	r1, #3
 800190a:	482d      	ldr	r0, [pc, #180]	; (80019c0 <_Z8WIN_GAMEv+0xc8>)
 800190c:	f7ff faf8 	bl	8000f00 <_ZN6Player15Change_positionEii>
	//----go to the castle-----//
	for(int i=0;i<=45;i++){//display boxi going to the castle
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b2d      	cmp	r3, #45	; 0x2d
 8001918:	dc13      	bgt.n	8001942 <_Z8WIN_GAMEv+0x4a>
		boxi.pos_x++;
 800191a:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <_Z8WIN_GAMEv+0xc8>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <_Z8WIN_GAMEv+0xc8>)
 8001922:	60d3      	str	r3, [r2, #12]
		ssd1306_Fill(Black);
 8001924:	2000      	movs	r0, #0
 8001926:	f000 fd51 	bl	80023cc <ssd1306_Fill>
		castle_map.Display_map();
 800192a:	4826      	ldr	r0, [pc, #152]	; (80019c4 <_Z8WIN_GAMEv+0xcc>)
 800192c:	f7ff f8c6 	bl	8000abc <_ZN3Map11Display_mapEv>
        boxi.Display_Player();
 8001930:	4823      	ldr	r0, [pc, #140]	; (80019c0 <_Z8WIN_GAMEv+0xc8>)
 8001932:	f7ff fa57 	bl	8000de4 <_ZN6Player14Display_PlayerEv>
        ssd1306_UpdateScreen();
 8001936:	f000 fd6d 	bl	8002414 <ssd1306_UpdateScreen>
	for(int i=0;i<=45;i++){//display boxi going to the castle
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3301      	adds	r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	e7e8      	b.n	8001914 <_Z8WIN_GAMEv+0x1c>
	}
	  ssd1306_Fill(Black);
 8001942:	2000      	movs	r0, #0
 8001944:	f000 fd42 	bl	80023cc <ssd1306_Fill>
	  castle_map.Display_map();
 8001948:	481e      	ldr	r0, [pc, #120]	; (80019c4 <_Z8WIN_GAMEv+0xcc>)
 800194a:	f7ff f8b7 	bl	8000abc <_ZN3Map11Display_mapEv>
	  ssd1306_UpdateScreen();
 800194e:	f000 fd61 	bl	8002414 <ssd1306_UpdateScreen>
	  HAL_Delay(4500);
 8001952:	f241 1094 	movw	r0, #4500	; 0x1194
 8001956:	f001 f8d3 	bl	8002b00 <HAL_Delay>
	//---WIN SCREEN---//
	for(int i=0;i>=0;i++){
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db29      	blt.n	80019b8 <_Z8WIN_GAMEv+0xc0>
	 ssd1306_Fill(White);
 8001964:	2001      	movs	r0, #1
 8001966:	f000 fd31 	bl	80023cc <ssd1306_Fill>
     ssd1306_DrawBitmap(0, 0, Bitmap_win, 128, 64, Black);
 800196a:	2300      	movs	r3, #0
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <_Z8WIN_GAMEv+0xd0>)
 8001976:	2100      	movs	r1, #0
 8001978:	2000      	movs	r0, #0
 800197a:	f000 fe8d 	bl	8002698 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 800197e:	f000 fd49 	bl	8002414 <ssd1306_UpdateScreen>
     HAL_Delay(700);
 8001982:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001986:	f001 f8bb 	bl	8002b00 <HAL_Delay>
     ssd1306_Fill(Black);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 fd1e 	bl	80023cc <ssd1306_Fill>
     ssd1306_DrawBitmap(0, 0, Bitmap_win, 128, 64,White);
 8001990:	2301      	movs	r3, #1
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2340      	movs	r3, #64	; 0x40
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <_Z8WIN_GAMEv+0xd0>)
 800199c:	2100      	movs	r1, #0
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 fe7a 	bl	8002698 <ssd1306_DrawBitmap>
     ssd1306_UpdateScreen();
 80019a4:	f000 fd36 	bl	8002414 <ssd1306_UpdateScreen>
     HAL_Delay(700);
 80019a8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80019ac:	f001 f8a8 	bl	8002b00 <HAL_Delay>
	for(int i=0;i>=0;i++){
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	e7d2      	b.n	800195e <_Z8WIN_GAMEv+0x66>
	}
	}
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000190 	.word	0x20000190
 80019c4:	20000148 	.word	0x20000148
 80019c8:	080064ac 	.word	0x080064ac

080019cc <_Z4JumpR6PlayerRiS1_>:
/*-------------------jump function------------------------------------------*/
	void Jump(Player &player,int &jump_height,int &barrier){
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]

	 if((jump_height>0)&&(barrier==true))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	dd1a      	ble.n	8001a16 <_Z4JumpR6PlayerRiS1_+0x4a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d116      	bne.n	8001a16 <_Z4JumpR6PlayerRiS1_+0x4a>
	 {
		player.pos_y--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	1e5a      	subs	r2, r3, #1
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	611a      	str	r2, [r3, #16]
	    jump_height--;   /////////////////////////////////////////////////////
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	1e5a      	subs	r2, r3, #1
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	601a      	str	r2, [r3, #0]
		player.pos_y--; /* if gravitation is off we can jump on Jump_height */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	611a      	str	r2, [r3, #16]
		jump_height--; /*     in jump we are losing Jump_height             */
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	601a      	str	r2, [r3, #0]
		barrier=true; /*    when we are jumping gravitation is off          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
                     /////////////////////////////////////////////////////////
		}
	 if(jump_height==0){
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <_Z4JumpR6PlayerRiS1_+0x58>
		 barrier=false;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
	 }
	 }
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_Z11GravitationR6PlayeriRi>:

/*---------------------gravitation function-----------------------------------*/
	void Gravitation(Player &player,int ground_level,int &barrier){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]

	  player.generateHIT();//generating actual hit box of player
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7ff fa3f 	bl	8000ec0 <_ZN6Player11generateHITEv>

	 if(player.BHIT>=ground_level){
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dc07      	bgt.n	8001a5c <_Z11GravitationR6PlayeriRi+0x2c>
		barrier=true;// if player hit the ground
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
		player.Player_live--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	1e5a      	subs	r2, r3, #1
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
	 }

	if(barrier==false){ // if player is in free air we are falling fastest
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <_Z11GravitationR6PlayeriRi+0x48>
		player.pos_y++;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
		player.pos_y++;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	611a      	str	r2, [r3, #16]
	 }
	}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_Z13Check_buttonsR6Playeri>:

/*----------------------checking buttons---------------------------------------*/
	void Check_buttons(Player &player,int barrier){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
		player.generateHIT();//generating actual hit box of player
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fa18 	bl	8000ec0 <_ZN6Player11generateHITEv>

		if((HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0)&&(barrier==true))//jumping
 8001a90:	2120      	movs	r1, #32
 8001a92:	4820      	ldr	r0, [pc, #128]	; (8001b14 <_Z13Check_buttonsR6Playeri+0x94>)
 8001a94:	f001 fae8 	bl	8003068 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d104      	bne.n	8001aa8 <_Z13Check_buttonsR6Playeri+0x28>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <_Z13Check_buttonsR6Playeri+0x28>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <_Z13Check_buttonsR6Playeri+0x2a>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <_Z13Check_buttonsR6Playeri+0x42>
		{
          if((Jump_height==0)&&(barrier==true)){//checking if player has end his jump
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <_Z13Check_buttonsR6Playeri+0x98>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d105      	bne.n	8001ac2 <_Z13Check_buttonsR6Playeri+0x42>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d102      	bne.n	8001ac2 <_Z13Check_buttonsR6Playeri+0x42>
        	  Jump_height=18;                   // and if he is on something that he jump of
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <_Z13Check_buttonsR6Playeri+0x98>)
 8001abe:	2212      	movs	r2, #18
 8001ac0:	601a      	str	r2, [r3, #0]
          }
		}

		if(HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin)==0){ //go into right side
 8001ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aca:	f001 facd 	bl	8003068 <HAL_GPIO_ReadPin>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <_Z13Check_buttonsR6Playeri+0x68>
			player.pos_x++;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	60da      	str	r2, [r3, #12]
		}
		if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin)==0){//go into left side
 8001ae8:	2110      	movs	r1, #16
 8001aea:	480a      	ldr	r0, [pc, #40]	; (8001b14 <_Z13Check_buttonsR6Playeri+0x94>)
 8001aec:	f001 fabc 	bl	8003068 <HAL_GPIO_ReadPin>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <_Z13Check_buttonsR6Playeri+0x8a>
			player.pos_x--;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	1e5a      	subs	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60da      	str	r2, [r3, #12]
		}
		}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	48000400 	.word	0x48000400
 8001b18:	20000524 	.word	0x20000524

08001b1c <_Z19Display_Over_Screenv>:
/*-----------------------------GAME OVER SCREEN--------------------------------*/
	void Display_Over_Screen(){//displaying a 128x64 game over bitmap function
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af02      	add	r7, sp, #8
		ssd1306_Fill(Black);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 fc52 	bl	80023cc <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, Bitmap_game_over, 128, 64, White);
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2340      	movs	r3, #64	; 0x40
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <_Z19Display_Over_Screenv+0x34>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 fdae 	bl	8002698 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 8001b3c:	f000 fc6a 	bl	8002414 <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 8001b40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b44:	f000 ffdc 	bl	8002b00 <HAL_Delay>
	}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	080058ac 	.word	0x080058ac

08001b54 <_ZN4CoinC1ERKS_>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"

class Coin {
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <_ZN4CoinC1ERKS_+0x78>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	69da      	ldr	r2, [r3, #28]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	61da      	str	r2, [r3, #28]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6a1a      	ldr	r2, [r3, #32]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	621a      	str	r2, [r3, #32]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	0800585c 	.word	0x0800585c

08001bd0 <_Z4Game6PlayerRiS0_>:

/*-----------------------------GAME LOOP----------------------------------------*/
	void Game(Player player,int &barrier,int &Jump_height){//main loop of boxi game
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b098      	sub	sp, #96	; 0x60
 8001bd4:	af04      	add	r7, sp, #16
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
	if(player.Player_live>0){//if player is alive
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f340 80ac 	ble.w	8001d3e <_Z4Game6PlayerRiS0_+0x16e>

		//---------DISPLAYING LAST FRAME-----------//
		//displaying all objects//
		  ssd1306_Fill(Black);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 fbf0 	bl	80023cc <ssd1306_Fill>
		  boxi.Display_Player_hearts();
 8001bec:	4857      	ldr	r0, [pc, #348]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001bee:	f7ff f915 	bl	8000e1c <_ZN6Player21Display_Player_heartsEv>
		  map1.Display_map();
 8001bf2:	4857      	ldr	r0, [pc, #348]	; (8001d50 <_Z4Game6PlayerRiS0_+0x180>)
 8001bf4:	f7fe ff62 	bl	8000abc <_ZN3Map11Display_mapEv>
          c1.Display_Coin();
 8001bf8:	4856      	ldr	r0, [pc, #344]	; (8001d54 <_Z4Game6PlayerRiS0_+0x184>)
 8001bfa:	f7fe feea 	bl	80009d2 <_ZN4Coin12Display_CoinEv>

		  for(int i=0; i<=9; i++){//displaying blocks
 8001bfe:	2300      	movs	r3, #0
 8001c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	dc0c      	bgt.n	8001c22 <_Z4Game6PlayerRiS0_+0x52>
			  B[i].Display_Block();
 8001c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0a:	2234      	movs	r2, #52	; 0x34
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <_Z4Game6PlayerRiS0_+0x188>)
 8001c12:	4413      	add	r3, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcc9 	bl	80005ac <_ZN5Block13Display_BlockEv>
		  for(int i=0; i<=9; i++){//displaying blocks
 8001c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c20:	e7ef      	b.n	8001c02 <_Z4Game6PlayerRiS0_+0x32>
		  }

		  for(int i=0; i<=5; i++){//displaying spikes
 8001c22:	2300      	movs	r3, #0
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	dc0d      	bgt.n	8001c48 <_Z4Game6PlayerRiS0_+0x78>
		      S[i].Display_Spike();
 8001c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <_Z4Game6PlayerRiS0_+0x18c>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fa50 	bl	80010e0 <_ZN5Spike13Display_SpikeEv>
		  for(int i=0; i<=5; i++){//displaying spikes
 8001c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c42:	3301      	adds	r3, #1
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c46:	e7ee      	b.n	8001c26 <_Z4Game6PlayerRiS0_+0x56>
		   }

		  m1.Display_mob();//displaying mob
 8001c48:	4845      	ldr	r0, [pc, #276]	; (8001d60 <_Z4Game6PlayerRiS0_+0x190>)
 8001c4a:	f7ff f852 	bl	8000cf2 <_ZN3Mob11Display_mobEv>

		  boxi.Display_Player();//displaying boxi
 8001c4e:	483f      	ldr	r0, [pc, #252]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c50:	f7ff f8c8 	bl	8000de4 <_ZN6Player14Display_PlayerEv>

		  //updating the screen//
		  ssd1306_UpdateScreen();
 8001c54:	f000 fbde 	bl	8002414 <ssd1306_UpdateScreen>

		  //----------MOVING BLOCKS------------------//
		  B[7].Move_Block(Block_1_A, Block_1_B, barrier,boxi);
 8001c58:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <_Z4Game6PlayerRiS0_+0x194>)
 8001c5a:	6819      	ldr	r1, [r3, #0]
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <_Z4Game6PlayerRiS0_+0x198>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4841      	ldr	r0, [pc, #260]	; (8001d6c <_Z4Game6PlayerRiS0_+0x19c>)
 8001c68:	f7fe fd45 	bl	80006f6 <_ZN5Block10Move_BlockEiiRiR6Player>

		  //----------MOVING MOBS-------------------//
		  m1.Move_mob(Mob_1_A,Mob_1_B);
 8001c6c:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <_Z4Game6PlayerRiS0_+0x1a0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <_Z4Game6PlayerRiS0_+0x1a4>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	483a      	ldr	r0, [pc, #232]	; (8001d60 <_Z4Game6PlayerRiS0_+0x190>)
 8001c78:	f7ff f802 	bl	8000c80 <_ZN3Mob8Move_mobEii>

		  //--------CHECKING BARRIERS----------------//
		  c1.Check(boxi,current_map);
 8001c7c:	4a3e      	ldr	r2, [pc, #248]	; (8001d78 <_Z4Game6PlayerRiS0_+0x1a8>)
 8001c7e:	4933      	ldr	r1, [pc, #204]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c80:	4834      	ldr	r0, [pc, #208]	; (8001d54 <_Z4Game6PlayerRiS0_+0x184>)
 8001c82:	f7fe fdf3 	bl	800086c <_ZN4Coin5CheckER6PlayerRi>
		  m1.check(boxi);
 8001c86:	4931      	ldr	r1, [pc, #196]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001c88:	4835      	ldr	r0, [pc, #212]	; (8001d60 <_Z4Game6PlayerRiS0_+0x190>)
 8001c8a:	f7fe ff9f 	bl	8000bcc <_ZN3Mob5checkER6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 8001c8e:	2300      	movs	r3, #0
 8001c90:	647b      	str	r3, [r7, #68]	; 0x44
 8001c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	dc0f      	bgt.n	8001cb8 <_Z4Game6PlayerRiS0_+0xe8>
		  	 S[i].Check(barrier, boxi);
 8001c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <_Z4Game6PlayerRiS0_+0x18c>)
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f99c 	bl	8000fe8 <_ZN5Spike5CheckERiR6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb6:	e7ec      	b.n	8001c92 <_Z4Game6PlayerRiS0_+0xc2>
		  }


		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001cb8:	2300      	movs	r3, #0
 8001cba:	643b      	str	r3, [r7, #64]	; 0x40
 8001cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	dc0e      	bgt.n	8001ce0 <_Z4Game6PlayerRiS0_+0x110>
		  	B[i].Check(barrier, boxi);
 8001cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc4:	2234      	movs	r2, #52	; 0x34
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <_Z4Game6PlayerRiS0_+0x188>)
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc86 	bl	80005e4 <_ZN5Block5CheckERiR6Player>
		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cda:	3301      	adds	r3, #1
 8001cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8001cde:	e7ed      	b.n	8001cbc <_Z4Game6PlayerRiS0_+0xec>
		  }

		  //----------GRAVITATION FUNCTION----------//
		  Gravitation(boxi, ground_level,barrier);
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <_Z4Game6PlayerRiS0_+0x1ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4818      	ldr	r0, [pc, #96]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001cea:	f7ff fea1 	bl	8001a30 <_Z11GravitationR6PlayeriRi>
		  //--------BUTTONS CHECKING ---------------//
	      Check_buttons(boxi,barrier);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4815      	ldr	r0, [pc, #84]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001cf6:	f7ff fec3 	bl	8001a80 <_Z13Check_buttonsR6Playeri>
	      //----------JUMPING FUNCTION--------------//
	      Jump(boxi,Jump_height,barrier);
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4813      	ldr	r0, [pc, #76]	; (8001d4c <_Z4Game6PlayerRiS0_+0x17c>)
 8001d00:	f7ff fe64 	bl	80019cc <_Z4JumpR6PlayerRiS1_>
	      //-----------CHANGE MAP FUNCTION----------//
	      change_map(current_map,is_map_changed,Block_1_A,Block_1_B,Mob_1_A,Mob_1_B,c1);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4912      	ldr	r1, [pc, #72]	; (8001d54 <_Z4Game6PlayerRiS0_+0x184>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff22 	bl	8001b54 <_ZN4CoinC1ERKS_>
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	9302      	str	r3, [sp, #8]
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <_Z4Game6PlayerRiS0_+0x1a4>)
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_Z4Game6PlayerRiS0_+0x1a0>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <_Z4Game6PlayerRiS0_+0x198>)
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <_Z4Game6PlayerRiS0_+0x194>)
 8001d22:	4917      	ldr	r1, [pc, #92]	; (8001d80 <_Z4Game6PlayerRiS0_+0x1b0>)
 8001d24:	4814      	ldr	r0, [pc, #80]	; (8001d78 <_Z4Game6PlayerRiS0_+0x1a8>)
 8001d26:	f7ff fb39 	bl	800139c <_Z10change_mapRiS_S_S_S_S_4Coin>
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fe82 	bl	8000a38 <_ZN4CoinD1Ev>
	      //------------WIN FUNCTION----------------//
	      WIN_GAME();
 8001d34:	f7ff fde0 	bl	80018f8 <_Z8WIN_GAMEv>
	      //-------------easter egg----------------//
	      easter_egg();
 8001d38:	f7ff fd76 	bl	8001828 <_Z10easter_eggv>

	}
	else {
		Display_Over_Screen();
	}
}
 8001d3c:	e001      	b.n	8001d42 <_Z4Game6PlayerRiS0_+0x172>
		Display_Over_Screen();
 8001d3e:	f7ff feed 	bl	8001b1c <_Z19Display_Over_Screenv>
}
 8001d42:	bf00      	nop
 8001d44:	3750      	adds	r7, #80	; 0x50
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000190 	.word	0x20000190
 8001d50:	20000130 	.word	0x20000130
 8001d54:	200004ec 	.word	0x200004ec
 8001d58:	200001c0 	.word	0x200001c0
 8001d5c:	200003fc 	.word	0x200003fc
 8001d60:	200003c8 	.word	0x200003c8
 8001d64:	20000048 	.word	0x20000048
 8001d68:	2000004c 	.word	0x2000004c
 8001d6c:	2000032c 	.word	0x2000032c
 8001d70:	20000040 	.word	0x20000040
 8001d74:	20000044 	.word	0x20000044
 8001d78:	20000520 	.word	0x20000520
 8001d7c:	2000003c 	.word	0x2000003c
 8001d80:	2000051c 	.word	0x2000051c

08001d84 <_ZN6PlayerC1ERKS_>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#ifndef INC_PLAYER_H_
#define INC_PLAYER_H_

class Player {
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <_ZN6PlayerC1ERKS_+0x78>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	615a      	str	r2, [r3, #20]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	69da      	ldr	r2, [r3, #28]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	61da      	str	r2, [r3, #28]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	621a      	str	r2, [r3, #32]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	08005894 	.word	0x08005894

08001e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e06:	f000 fe0a 	bl	8002a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0a:	f000 f89d 	bl	8001f48 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0e:	f7ff f9b5 	bl	800117c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e12:	f000 fd37 	bl	8002884 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e16:	f7ff fa0b 	bl	8001230 <MX_I2C1_Init>
  MX_RNG_Init();
 8001e1a:	f000 f9e1 	bl	80021e0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  	  //Initialize  of libraries//
  	  ssd1306_Init();
 8001e1e:	f000 fa6b 	bl	80022f8 <ssd1306_Init>

  	  //fill black the display
  	  ssd1306_Fill(Black);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 fad2 	bl	80023cc <ssd1306_Fill>
  	  ssd1306_UpdateScreen();
 8001e28:	f000 faf4 	bl	8002414 <ssd1306_UpdateScreen>
  	//-----POSITIONING OBJECTS-----//
     //--------BLOCKS------------//
  	  B[0].Change_position(1,52);
 8001e2c:	2234      	movs	r2, #52	; 0x34
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4831      	ldr	r0, [pc, #196]	; (8001ef8 <main+0xf8>)
 8001e32:	f7fe fcc3 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[1].Change_position(11,52);
 8001e36:	2234      	movs	r2, #52	; 0x34
 8001e38:	210b      	movs	r1, #11
 8001e3a:	4830      	ldr	r0, [pc, #192]	; (8001efc <main+0xfc>)
 8001e3c:	f7fe fcbe 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[2].Change_position(21,52);
 8001e40:	2234      	movs	r2, #52	; 0x34
 8001e42:	2115      	movs	r1, #21
 8001e44:	482e      	ldr	r0, [pc, #184]	; (8001f00 <main+0x100>)
 8001e46:	f7fe fcb9 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[3].Change_position(41,42);
 8001e4a:	222a      	movs	r2, #42	; 0x2a
 8001e4c:	2129      	movs	r1, #41	; 0x29
 8001e4e:	482d      	ldr	r0, [pc, #180]	; (8001f04 <main+0x104>)
 8001e50:	f7fe fcb4 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[4].Change_position(41,52);
 8001e54:	2234      	movs	r2, #52	; 0x34
 8001e56:	2129      	movs	r1, #41	; 0x29
 8001e58:	482b      	ldr	r0, [pc, #172]	; (8001f08 <main+0x108>)
 8001e5a:	f7fe fcaf 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[5].Change_position(71,42);
 8001e5e:	222a      	movs	r2, #42	; 0x2a
 8001e60:	2147      	movs	r1, #71	; 0x47
 8001e62:	482a      	ldr	r0, [pc, #168]	; (8001f0c <main+0x10c>)
 8001e64:	f7fe fcaa 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[6].Change_position(71,52);
 8001e68:	2234      	movs	r2, #52	; 0x34
 8001e6a:	2147      	movs	r1, #71	; 0x47
 8001e6c:	4828      	ldr	r0, [pc, #160]	; (8001f10 <main+0x110>)
 8001e6e:	f7fe fca5 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[7].Change_position(91,42);
 8001e72:	222a      	movs	r2, #42	; 0x2a
 8001e74:	215b      	movs	r1, #91	; 0x5b
 8001e76:	4827      	ldr	r0, [pc, #156]	; (8001f14 <main+0x114>)
 8001e78:	f7fe fca0 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[8].Change_position(117,42);
 8001e7c:	222a      	movs	r2, #42	; 0x2a
 8001e7e:	2175      	movs	r1, #117	; 0x75
 8001e80:	4825      	ldr	r0, [pc, #148]	; (8001f18 <main+0x118>)
 8001e82:	f7fe fc9b 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[9].Change_position(117,52);
 8001e86:	2234      	movs	r2, #52	; 0x34
 8001e88:	2175      	movs	r1, #117	; 0x75
 8001e8a:	4824      	ldr	r0, [pc, #144]	; (8001f1c <main+0x11c>)
 8001e8c:	f7fe fc96 	bl	80007bc <_ZN5Block15Change_positionEii>
  	 //--------SPIKES--------------//
  	  S[0].Change_position(51, 56);
 8001e90:	2238      	movs	r2, #56	; 0x38
 8001e92:	2133      	movs	r1, #51	; 0x33
 8001e94:	4822      	ldr	r0, [pc, #136]	; (8001f20 <main+0x120>)
 8001e96:	f7ff f93f 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[1].Change_position(56, 56);
 8001e9a:	2238      	movs	r2, #56	; 0x38
 8001e9c:	2138      	movs	r1, #56	; 0x38
 8001e9e:	4821      	ldr	r0, [pc, #132]	; (8001f24 <main+0x124>)
 8001ea0:	f7ff f93a 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[2].Change_position(61, 56);
 8001ea4:	2238      	movs	r2, #56	; 0x38
 8001ea6:	213d      	movs	r1, #61	; 0x3d
 8001ea8:	481f      	ldr	r0, [pc, #124]	; (8001f28 <main+0x128>)
 8001eaa:	f7ff f935 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[3].Change_position(66, 56);
 8001eae:	2238      	movs	r2, #56	; 0x38
 8001eb0:	2142      	movs	r1, #66	; 0x42
 8001eb2:	481e      	ldr	r0, [pc, #120]	; (8001f2c <main+0x12c>)
 8001eb4:	f7ff f930 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[4].Change_position(31, 56);
 8001eb8:	2238      	movs	r2, #56	; 0x38
 8001eba:	211f      	movs	r1, #31
 8001ebc:	481c      	ldr	r0, [pc, #112]	; (8001f30 <main+0x130>)
 8001ebe:	f7ff f92b 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[5].Change_position(36, 56);
 8001ec2:	2238      	movs	r2, #56	; 0x38
 8001ec4:	2124      	movs	r1, #36	; 0x24
 8001ec6:	481b      	ldr	r0, [pc, #108]	; (8001f34 <main+0x134>)
 8001ec8:	f7ff f926 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  c1.Change_position(119, 36);
 8001ecc:	2224      	movs	r2, #36	; 0x24
 8001ece:	2177      	movs	r1, #119	; 0x77
 8001ed0:	4819      	ldr	r0, [pc, #100]	; (8001f38 <main+0x138>)
 8001ed2:	f7fe fd9e 	bl	8000a12 <_ZN4Coin15Change_positionEii>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Game(boxi,barrier,Jump_height); //Game loop
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	4918      	ldr	r1, [pc, #96]	; (8001f3c <main+0x13c>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff52 	bl	8001d84 <_ZN6PlayerC1ERKS_>
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <main+0x140>)
 8001ee4:	4917      	ldr	r1, [pc, #92]	; (8001f44 <main+0x144>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe72 	bl	8001bd0 <_Z4Game6PlayerRiS0_>
 8001eec:	463b      	mov	r3, r7
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f818 	bl	8000f24 <_ZN6PlayerD1Ev>
 8001ef4:	e7ef      	b.n	8001ed6 <main+0xd6>
 8001ef6:	bf00      	nop
 8001ef8:	200001c0 	.word	0x200001c0
 8001efc:	200001f4 	.word	0x200001f4
 8001f00:	20000228 	.word	0x20000228
 8001f04:	2000025c 	.word	0x2000025c
 8001f08:	20000290 	.word	0x20000290
 8001f0c:	200002c4 	.word	0x200002c4
 8001f10:	200002f8 	.word	0x200002f8
 8001f14:	2000032c 	.word	0x2000032c
 8001f18:	20000360 	.word	0x20000360
 8001f1c:	20000394 	.word	0x20000394
 8001f20:	200003fc 	.word	0x200003fc
 8001f24:	20000424 	.word	0x20000424
 8001f28:	2000044c 	.word	0x2000044c
 8001f2c:	20000474 	.word	0x20000474
 8001f30:	2000049c 	.word	0x2000049c
 8001f34:	200004c4 	.word	0x200004c4
 8001f38:	200004ec 	.word	0x200004ec
 8001f3c:	20000190 	.word	0x20000190
 8001f40:	20000524 	.word	0x20000524
 8001f44:	20000528 	.word	0x20000528

08001f48 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b094      	sub	sp, #80	; 0x50
 8001f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	2238      	movs	r2, #56	; 0x38
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fc06 	bl	8005768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f001 fd3a 	bl	80039e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f7a:	2340      	movs	r3, #64	; 0x40
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f82:	2302      	movs	r3, #2
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001f86:	2304      	movs	r3, #4
 8001f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001f8a:	2355      	movs	r3, #85	; 0x55
 8001f8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f92:	2302      	movs	r3, #2
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f96:	2302      	movs	r3, #2
 8001f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9a:	f107 0318 	add.w	r3, r7, #24
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fdc4 	bl	8003b2c <HAL_RCC_OscConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001fb4:	f000 f81d 	bl	8001ff2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb8:	230f      	movs	r3, #15
 8001fba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2104      	movs	r1, #4
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 f8c3 	bl	800415c <HAL_RCC_ClockConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001fe6:	f000 f804 	bl	8001ff2 <Error_Handler>
  }
}
 8001fea:	bf00      	nop
 8001fec:	3750      	adds	r7, #80	; 0x50
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff6:	b672      	cpsid	i
}
 8001ff8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <Error_Handler+0x8>

08001ffc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af06      	add	r7, sp, #24
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d17c      	bne.n	8002106 <_Z41__static_initialization_and_destruction_0ii+0x10a>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002012:	4293      	cmp	r3, r2
 8002014:	d177      	bne.n	8002106 <_Z41__static_initialization_and_destruction_0ii+0x10a>
#include"string.h"
#include "Spike.h"
#include "Coin.h"

 // creating a map//
Map map1(Bitmap_map);
 8002016:	2300      	movs	r3, #0
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	2300      	movs	r3, #0
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	4953      	ldr	r1, [pc, #332]	; (8002170 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8002024:	4853      	ldr	r0, [pc, #332]	; (8002174 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002026:	f7fe fd27 	bl	8000a78 <_ZN3MapC1EPKhiiii>
Map castle_map(Bitmap_castle);
 800202a:	2300      	movs	r3, #0
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	2300      	movs	r3, #0
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2340      	movs	r3, #64	; 0x40
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	4950      	ldr	r1, [pc, #320]	; (8002178 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8002038:	4850      	ldr	r0, [pc, #320]	; (800217c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800203a:	f7fe fd1d 	bl	8000a78 <_ZN3MapC1EPKhiiii>
Map Win_map(Bitmap_win);
 800203e:	2300      	movs	r3, #0
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	494d      	ldr	r1, [pc, #308]	; (8002180 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800204c:	484d      	ldr	r0, [pc, #308]	; (8002184 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 800204e:	f7fe fd13 	bl	8000a78 <_ZN3MapC1EPKhiiii>
Map easter_egg_map(Bitmap_easter_egg);
 8002052:	2300      	movs	r3, #0
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	2300      	movs	r3, #0
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2340      	movs	r3, #64	; 0x40
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	494a      	ldr	r1, [pc, #296]	; (8002188 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002060:	484a      	ldr	r0, [pc, #296]	; (800218c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8002062:	f7fe fd09 	bl	8000a78 <_ZN3MapC1EPKhiiii>
// creating the player//
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 8002066:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8002068:	9302      	str	r3, [sp, #8]
 800206a:	2303      	movs	r3, #3
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	2308      	movs	r3, #8
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2308      	movs	r3, #8
 8002074:	2204      	movs	r2, #4
 8002076:	210a      	movs	r1, #10
 8002078:	4846      	ldr	r0, [pc, #280]	; (8002194 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800207a:	f7fe fe8d 	bl	8000d98 <_ZN6PlayerC1EiiiiiPKh>

//creating blocks//
Block B[10];
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002080:	2409      	movs	r4, #9
 8002082:	461d      	mov	r5, r3
 8002084:	2c00      	cmp	r4, #0
 8002086:	db10      	blt.n	80020aa <_Z41__static_initialization_and_destruction_0ii+0xae>
 8002088:	2301      	movs	r3, #1
 800208a:	9303      	str	r3, [sp, #12]
 800208c:	2300      	movs	r3, #0
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	230a      	movs	r3, #10
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	230a      	movs	r3, #10
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	4628      	mov	r0, r5
 80020a0:	f7fe fa3c 	bl	800051c <_ZN5BlockC1EiiiiPKhii>
 80020a4:	3534      	adds	r5, #52	; 0x34
 80020a6:	3c01      	subs	r4, #1
 80020a8:	e7ec      	b.n	8002084 <_Z41__static_initialization_and_destruction_0ii+0x88>

//creating Mobs//
Mob m1(95,54);
 80020aa:	2300      	movs	r3, #0
 80020ac:	9304      	str	r3, [sp, #16]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9303      	str	r3, [sp, #12]
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 80020b4:	9302      	str	r3, [sp, #8]
 80020b6:	2308      	movs	r3, #8
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2308      	movs	r3, #8
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	2236      	movs	r2, #54	; 0x36
 80020c2:	215f      	movs	r1, #95	; 0x5f
 80020c4:	4837      	ldr	r0, [pc, #220]	; (80021a4 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 80020c6:	f7fe fd35 	bl	8000b34 <_ZN3MobC1EiiiiiPKhii>

//creating spikes//
Spike S[6];
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 80020cc:	2405      	movs	r4, #5
 80020ce:	461d      	mov	r5, r3
 80020d0:	2c00      	cmp	r4, #0
 80020d2:	db0c      	blt.n	80020ee <_Z41__static_initialization_and_destruction_0ii+0xf2>
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2305      	movs	r3, #5
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2305      	movs	r3, #5
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	4628      	mov	r0, r5
 80020e4:	f7fe ff3e 	bl	8000f64 <_ZN5SpikeC1EiiiiPKh>
 80020e8:	3528      	adds	r5, #40	; 0x28
 80020ea:	3c01      	subs	r4, #1
 80020ec:	e7f0      	b.n	80020d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>

//creating coins
Coin c1(119,36);
 80020ee:	2301      	movs	r3, #1
 80020f0:	9302      	str	r3, [sp, #8]
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	2306      	movs	r3, #6
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2306      	movs	r3, #6
 80020fc:	2224      	movs	r2, #36	; 0x24
 80020fe:	2177      	movs	r1, #119	; 0x77
 8002100:	482c      	ldr	r0, [pc, #176]	; (80021b4 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8002102:	f7fe fb8d 	bl	8000820 <_ZN4CoinC1EiiiiPKhi>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d12d      	bne.n	8002168 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002112:	4293      	cmp	r3, r2
 8002114:	d128      	bne.n	8002168 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 8002116:	4827      	ldr	r0, [pc, #156]	; (80021b4 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8002118:	f7fe fc8e 	bl	8000a38 <_ZN4CoinD1Ev>
Spike S[6];
 800211c:	4c26      	ldr	r4, [pc, #152]	; (80021b8 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8002120:	429c      	cmp	r4, r3
 8002122:	d005      	beq.n	8002130 <_Z41__static_initialization_and_destruction_0ii+0x134>
 8002124:	3c28      	subs	r4, #40	; 0x28
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4620      	mov	r0, r4
 800212c:	4798      	blx	r3
 800212e:	e7f6      	b.n	800211e <_Z41__static_initialization_and_destruction_0ii+0x122>
Mob m1(95,54);
 8002130:	481c      	ldr	r0, [pc, #112]	; (80021a4 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8002132:	f7fe fe11 	bl	8000d58 <_ZN3MobD1Ev>
Block B[10];
 8002136:	4c21      	ldr	r4, [pc, #132]	; (80021bc <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 800213a:	429c      	cmp	r4, r3
 800213c:	d005      	beq.n	800214a <_Z41__static_initialization_and_destruction_0ii+0x14e>
 800213e:	3c34      	subs	r4, #52	; 0x34
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4620      	mov	r0, r4
 8002146:	4798      	blx	r3
 8002148:	e7f6      	b.n	8002138 <_Z41__static_initialization_and_destruction_0ii+0x13c>
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 800214a:	4812      	ldr	r0, [pc, #72]	; (8002194 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800214c:	f7fe feea 	bl	8000f24 <_ZN6PlayerD1Ev>
Map easter_egg_map(Bitmap_easter_egg);
 8002150:	480e      	ldr	r0, [pc, #56]	; (800218c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8002152:	f7fe fccf 	bl	8000af4 <_ZN3MapD1Ev>
Map Win_map(Bitmap_win);
 8002156:	480b      	ldr	r0, [pc, #44]	; (8002184 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8002158:	f7fe fccc 	bl	8000af4 <_ZN3MapD1Ev>
Map castle_map(Bitmap_castle);
 800215c:	4807      	ldr	r0, [pc, #28]	; (800217c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800215e:	f7fe fcc9 	bl	8000af4 <_ZN3MapD1Ev>
Map map1(Bitmap_map);
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8002164:	f7fe fcc6 	bl	8000af4 <_ZN3MapD1Ev>
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	08005cac 	.word	0x08005cac
 8002174:	20000130 	.word	0x20000130
 8002178:	080060ac 	.word	0x080060ac
 800217c:	20000148 	.word	0x20000148
 8002180:	080064ac 	.word	0x080064ac
 8002184:	20000160 	.word	0x20000160
 8002188:	080068ac 	.word	0x080068ac
 800218c:	20000178 	.word	0x20000178
 8002190:	08006cac 	.word	0x08006cac
 8002194:	20000190 	.word	0x20000190
 8002198:	200001c0 	.word	0x200001c0
 800219c:	08006cb4 	.word	0x08006cb4
 80021a0:	08006cc8 	.word	0x08006cc8
 80021a4:	200003c8 	.word	0x200003c8
 80021a8:	200003fc 	.word	0x200003fc
 80021ac:	08006cd0 	.word	0x08006cd0
 80021b0:	08006cd8 	.word	0x08006cd8
 80021b4:	200004ec 	.word	0x200004ec
 80021b8:	200004ec 	.word	0x200004ec
 80021bc:	200003c8 	.word	0x200003c8

080021c0 <_GLOBAL__sub_I_map1>:
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7ff ff17 	bl	8001ffc <_Z41__static_initialization_and_destruction_0ii>
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_GLOBAL__sub_D_map1>:
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff ff0f 	bl	8001ffc <_Z41__static_initialization_and_destruction_0ii>
 80021de:	bd80      	pop	{r7, pc}

080021e0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <MX_RNG_Init+0x24>)
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <MX_RNG_Init+0x28>)
 80021e8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_RNG_Init+0x24>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80021f0:	4804      	ldr	r0, [pc, #16]	; (8002204 <MX_RNG_Init+0x24>)
 80021f2:	f002 fbbf 	bl	8004974 <HAL_RNG_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80021fc:	f7ff fef9 	bl	8001ff2 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	2000052c 	.word	0x2000052c
 8002208:	50060800 	.word	0x50060800

0800220c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b094      	sub	sp, #80	; 0x50
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	2244      	movs	r2, #68	; 0x44
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f003 faa3 	bl	8005768 <memset>
  if(rngHandle->Instance==RNG)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_RNG_MspInit+0x70>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d123      	bne.n	8002274 <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800222c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002230:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8002232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	4618      	mov	r0, r3
 800223e:	f002 f9a9 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002248:	f7ff fed3 	bl	8001ff2 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RNG_MspInit+0x74>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_RNG_MspInit+0x74>)
 8002252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RNG_MspInit+0x74>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	205a      	movs	r0, #90	; 0x5a
 800226a:	f000 fd46 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800226e:	205a      	movs	r0, #90	; 0x5a
 8002270:	f000 fd5d 	bl	8002d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002274:	bf00      	nop
 8002276:	3750      	adds	r7, #80	; 0x50
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	50060800 	.word	0x50060800
 8002280:	40021000 	.word	0x40021000

08002284 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af04      	add	r7, sp, #16
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2301      	movs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2301      	movs	r3, #1
 80022ae:	2200      	movs	r2, #0
 80022b0:	2178      	movs	r1, #120	; 0x78
 80022b2:	4803      	ldr	r0, [pc, #12]	; (80022c0 <ssd1306_WriteCommand+0x2c>)
 80022b4:	f000 ff98 	bl	80031e8 <HAL_I2C_Mem_Write>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200000e4 	.word	0x200000e4

080022c4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af04      	add	r7, sp, #16
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f04f 32ff 	mov.w	r2, #4294967295
 80022d6:	9202      	str	r2, [sp, #8]
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2301      	movs	r3, #1
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	2178      	movs	r1, #120	; 0x78
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <ssd1306_WriteData+0x30>)
 80022e6:	f000 ff7f 	bl	80031e8 <HAL_I2C_Mem_Write>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200000e4 	.word	0x200000e4

080022f8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80022fc:	f7ff ffc2 	bl	8002284 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002300:	2064      	movs	r0, #100	; 0x64
 8002302:	f000 fbfd 	bl	8002b00 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002306:	2000      	movs	r0, #0
 8002308:	f000 fa34 	bl	8002774 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800230c:	2020      	movs	r0, #32
 800230e:	f7ff ffc1 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff ffbe 	bl	8002294 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002318:	20b0      	movs	r0, #176	; 0xb0
 800231a:	f7ff ffbb 	bl	8002294 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800231e:	20c8      	movs	r0, #200	; 0xc8
 8002320:	f7ff ffb8 	bl	8002294 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff ffb5 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800232a:	2010      	movs	r0, #16
 800232c:	f7ff ffb2 	bl	8002294 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002330:	2040      	movs	r0, #64	; 0x40
 8002332:	f7ff ffaf 	bl	8002294 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002336:	20ff      	movs	r0, #255	; 0xff
 8002338:	f000 fa09 	bl	800274e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800233c:	20a1      	movs	r0, #161	; 0xa1
 800233e:	f7ff ffa9 	bl	8002294 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002342:	20a6      	movs	r0, #166	; 0xa6
 8002344:	f7ff ffa6 	bl	8002294 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002348:	20a8      	movs	r0, #168	; 0xa8
 800234a:	f7ff ffa3 	bl	8002294 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800234e:	203f      	movs	r0, #63	; 0x3f
 8002350:	f7ff ffa0 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002354:	20a4      	movs	r0, #164	; 0xa4
 8002356:	f7ff ff9d 	bl	8002294 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800235a:	20d3      	movs	r0, #211	; 0xd3
 800235c:	f7ff ff9a 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff ff97 	bl	8002294 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002366:	20d5      	movs	r0, #213	; 0xd5
 8002368:	f7ff ff94 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800236c:	20f0      	movs	r0, #240	; 0xf0
 800236e:	f7ff ff91 	bl	8002294 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002372:	20d9      	movs	r0, #217	; 0xd9
 8002374:	f7ff ff8e 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002378:	2022      	movs	r0, #34	; 0x22
 800237a:	f7ff ff8b 	bl	8002294 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800237e:	20da      	movs	r0, #218	; 0xda
 8002380:	f7ff ff88 	bl	8002294 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002384:	2012      	movs	r0, #18
 8002386:	f7ff ff85 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800238a:	20db      	movs	r0, #219	; 0xdb
 800238c:	f7ff ff82 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002390:	2020      	movs	r0, #32
 8002392:	f7ff ff7f 	bl	8002294 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002396:	208d      	movs	r0, #141	; 0x8d
 8002398:	f7ff ff7c 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800239c:	2014      	movs	r0, #20
 800239e:	f7ff ff79 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80023a2:	2001      	movs	r0, #1
 80023a4:	f000 f9e6 	bl	8002774 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f000 f80f 	bl	80023cc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80023ae:	f000 f831 	bl	8002414 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <ssd1306_Init+0xd0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <ssd1306_Init+0xd0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80023be:	4b02      	ldr	r3, [pc, #8]	; (80023c8 <ssd1306_Init+0xd0>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	711a      	strb	r2, [r3, #4]
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000940 	.word	0x20000940

080023cc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e00d      	b.n	80023f8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <ssd1306_Fill+0x1a>
 80023e2:	2100      	movs	r1, #0
 80023e4:	e000      	b.n	80023e8 <ssd1306_Fill+0x1c>
 80023e6:	21ff      	movs	r1, #255	; 0xff
 80023e8:	4a09      	ldr	r2, [pc, #36]	; (8002410 <ssd1306_Fill+0x44>)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	460a      	mov	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3301      	adds	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fe:	d3ed      	bcc.n	80023dc <ssd1306_Fill+0x10>
    }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000540 	.word	0x20000540

08002414 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800241a:	2300      	movs	r3, #0
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	e016      	b.n	800244e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	3b50      	subs	r3, #80	; 0x50
 8002424:	b2db      	uxtb	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff34 	bl	8002294 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff ff31 	bl	8002294 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002432:	2010      	movs	r0, #16
 8002434:	f7ff ff2e 	bl	8002294 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	01db      	lsls	r3, r3, #7
 800243c:	4a08      	ldr	r2, [pc, #32]	; (8002460 <ssd1306_UpdateScreen+0x4c>)
 800243e:	4413      	add	r3, r2
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff3e 	bl	80022c4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	3301      	adds	r3, #1
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b07      	cmp	r3, #7
 8002452:	d9e5      	bls.n	8002420 <ssd1306_UpdateScreen+0xc>
    }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000540 	.word	0x20000540

08002464 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	460b      	mov	r3, r1
 8002470:	71bb      	strb	r3, [r7, #6]
 8002472:	4613      	mov	r3, r2
 8002474:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db3d      	blt.n	80024fa <ssd1306_DrawPixel+0x96>
 800247e:	79bb      	ldrb	r3, [r7, #6]
 8002480:	2b3f      	cmp	r3, #63	; 0x3f
 8002482:	d83a      	bhi.n	80024fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002484:	797b      	ldrb	r3, [r7, #5]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d11a      	bne.n	80024c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	79bb      	ldrb	r3, [r7, #6]
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	b2d8      	uxtb	r0, r3
 8002492:	4603      	mov	r3, r0
 8002494:	01db      	lsls	r3, r3, #7
 8002496:	4413      	add	r3, r2
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <ssd1306_DrawPixel+0xa4>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	b25a      	sxtb	r2, r3
 800249e:	79bb      	ldrb	r3, [r7, #6]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b259      	sxtb	r1, r3
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	4603      	mov	r3, r0
 80024b4:	01db      	lsls	r3, r3, #7
 80024b6:	4413      	add	r3, r2
 80024b8:	b2c9      	uxtb	r1, r1
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <ssd1306_DrawPixel+0xa4>)
 80024bc:	54d1      	strb	r1, [r2, r3]
 80024be:	e01d      	b.n	80024fc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024c0:	79fa      	ldrb	r2, [r7, #7]
 80024c2:	79bb      	ldrb	r3, [r7, #6]
 80024c4:	08db      	lsrs	r3, r3, #3
 80024c6:	b2d8      	uxtb	r0, r3
 80024c8:	4603      	mov	r3, r0
 80024ca:	01db      	lsls	r3, r3, #7
 80024cc:	4413      	add	r3, r2
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <ssd1306_DrawPixel+0xa4>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	b25a      	sxtb	r2, r3
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	4013      	ands	r3, r2
 80024e8:	b259      	sxtb	r1, r3
 80024ea:	79fa      	ldrb	r2, [r7, #7]
 80024ec:	4603      	mov	r3, r0
 80024ee:	01db      	lsls	r3, r3, #7
 80024f0:	4413      	add	r3, r2
 80024f2:	b2c9      	uxtb	r1, r1
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <ssd1306_DrawPixel+0xa4>)
 80024f6:	54d1      	strb	r1, [r2, r3]
 80024f8:	e000      	b.n	80024fc <ssd1306_DrawPixel+0x98>
        return;
 80024fa:	bf00      	nop
    }
}
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000540 	.word	0x20000540

0800250c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	4604      	mov	r4, r0
 8002514:	1d38      	adds	r0, r7, #4
 8002516:	e880 0006 	stmia.w	r0, {r1, r2}
 800251a:	461a      	mov	r2, r3
 800251c:	4623      	mov	r3, r4
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	4613      	mov	r3, r2
 8002522:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b1f      	cmp	r3, #31
 8002528:	d902      	bls.n	8002530 <ssd1306_WriteChar+0x24>
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b7e      	cmp	r3, #126	; 0x7e
 800252e:	d901      	bls.n	8002534 <ssd1306_WriteChar+0x28>
        return 0;
 8002530:	2300      	movs	r3, #0
 8002532:	e06d      	b.n	8002610 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <ssd1306_WriteChar+0x10c>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	793b      	ldrb	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	2b80      	cmp	r3, #128	; 0x80
 8002540:	dc06      	bgt.n	8002550 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002542:	4b35      	ldr	r3, [pc, #212]	; (8002618 <ssd1306_WriteChar+0x10c>)
 8002544:	885b      	ldrh	r3, [r3, #2]
 8002546:	461a      	mov	r2, r3
 8002548:	797b      	ldrb	r3, [r7, #5]
 800254a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	dd01      	ble.n	8002554 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002550:	2300      	movs	r3, #0
 8002552:	e05d      	b.n	8002610 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	e04c      	b.n	80025f4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	3b20      	subs	r3, #32
 8002560:	7979      	ldrb	r1, [r7, #5]
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4619      	mov	r1, r3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	440b      	add	r3, r1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	e034      	b.n	80025e4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d012      	beq.n	80025b0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <ssd1306_WriteChar+0x10c>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4413      	add	r3, r2
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <ssd1306_WriteChar+0x10c>)
 800259a:	885b      	ldrh	r3, [r3, #2]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	7bba      	ldrb	r2, [r7, #14]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7ff ff5b 	bl	8002464 <ssd1306_DrawPixel>
 80025ae:	e016      	b.n	80025de <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <ssd1306_WriteChar+0x10c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	b2d8      	uxtb	r0, r3
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <ssd1306_WriteChar+0x10c>)
 80025c0:	885b      	ldrh	r3, [r3, #2]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	b2d9      	uxtb	r1, r3
 80025cc:	7bbb      	ldrb	r3, [r7, #14]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	f7ff ff43 	bl	8002464 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	793b      	ldrb	r3, [r7, #4]
 80025e6:	461a      	mov	r2, r3
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d3c5      	bcc.n	800257a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	797b      	ldrb	r3, [r7, #5]
 80025f6:	461a      	mov	r2, r3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d3ad      	bcc.n	800255a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <ssd1306_WriteChar+0x10c>)
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	793b      	ldrb	r3, [r7, #4]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4413      	add	r3, r2
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b03      	ldr	r3, [pc, #12]	; (8002618 <ssd1306_WriteChar+0x10c>)
 800260c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3724      	adds	r7, #36	; 0x24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd90      	pop	{r4, r7, pc}
 8002618:	20000940 	.word	0x20000940

0800261c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	1d38      	adds	r0, r7, #4
 8002626:	e880 0006 	stmia.w	r0, {r1, r2}
 800262a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800262c:	e012      	b.n	8002654 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	7818      	ldrb	r0, [r3, #0]
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	1d3a      	adds	r2, r7, #4
 8002636:	ca06      	ldmia	r2, {r1, r2}
 8002638:	f7ff ff68 	bl	800250c <ssd1306_WriteChar>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d002      	beq.n	800264e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	e008      	b.n	8002660 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3301      	adds	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e8      	bne.n	800262e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	781b      	ldrb	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	460a      	mov	r2, r1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	4613      	mov	r3, r2
 8002676:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <ssd1306_SetCursor+0x2c>)
 800267e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002680:	79bb      	ldrb	r3, [r7, #6]
 8002682:	b29a      	uxth	r2, r3
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <ssd1306_SetCursor+0x2c>)
 8002686:	805a      	strh	r2, [r3, #2]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000940 	.word	0x20000940

08002698 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	603a      	str	r2, [r7, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	460b      	mov	r3, r1
 80026a8:	71bb      	strb	r3, [r7, #6]
 80026aa:	4613      	mov	r3, r2
 80026ac:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80026ae:	797b      	ldrb	r3, [r7, #5]
 80026b0:	3307      	adds	r3, #7
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da00      	bge.n	80026b8 <ssd1306_DrawBitmap+0x20>
 80026b6:	3307      	adds	r3, #7
 80026b8:	10db      	asrs	r3, r3, #3
 80026ba:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db3e      	blt.n	8002746 <ssd1306_DrawBitmap+0xae>
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	2b3f      	cmp	r3, #63	; 0x3f
 80026cc:	d83b      	bhi.n	8002746 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80026ce:	2300      	movs	r3, #0
 80026d0:	73bb      	strb	r3, [r7, #14]
 80026d2:	e033      	b.n	800273c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80026d4:	2300      	movs	r3, #0
 80026d6:	737b      	strb	r3, [r7, #13]
 80026d8:	e026      	b.n	8002728 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 80026da:	7b7b      	ldrb	r3, [r7, #13]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	e00d      	b.n	8002708 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80026ec:	7bbb      	ldrb	r3, [r7, #14]
 80026ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	7b7a      	ldrb	r2, [r7, #13]
 80026f8:	08d2      	lsrs	r2, r2, #3
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	4413      	add	r3, r2
 80026fe:	461a      	mov	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8002708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	da08      	bge.n	8002722 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	7b7b      	ldrb	r3, [r7, #13]
 8002714:	4413      	add	r3, r2
 8002716:	b2db      	uxtb	r3, r3
 8002718:	7f3a      	ldrb	r2, [r7, #28]
 800271a:	79b9      	ldrb	r1, [r7, #6]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fea1 	bl	8002464 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002722:	7b7b      	ldrb	r3, [r7, #13]
 8002724:	3301      	adds	r3, #1
 8002726:	737b      	strb	r3, [r7, #13]
 8002728:	7b7a      	ldrb	r2, [r7, #13]
 800272a:	797b      	ldrb	r3, [r7, #5]
 800272c:	429a      	cmp	r2, r3
 800272e:	d3d4      	bcc.n	80026da <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	3301      	adds	r3, #1
 8002734:	73bb      	strb	r3, [r7, #14]
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	3301      	adds	r3, #1
 800273a:	71bb      	strb	r3, [r7, #6]
 800273c:	7bba      	ldrb	r2, [r7, #14]
 800273e:	7e3b      	ldrb	r3, [r7, #24]
 8002740:	429a      	cmp	r2, r3
 8002742:	d3c7      	bcc.n	80026d4 <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 8002744:	e000      	b.n	8002748 <ssd1306_DrawBitmap+0xb0>
        return;
 8002746:	bf00      	nop
}
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002758:	2381      	movs	r3, #129	; 0x81
 800275a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fd98 	bl	8002294 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fd94 	bl	8002294 <ssd1306_WriteCommand>
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002784:	23af      	movs	r3, #175	; 0xaf
 8002786:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <ssd1306_SetDisplayOn+0x38>)
 800278a:	2201      	movs	r2, #1
 800278c:	715a      	strb	r2, [r3, #5]
 800278e:	e004      	b.n	800279a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002790:	23ae      	movs	r3, #174	; 0xae
 8002792:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <ssd1306_SetDisplayOn+0x38>)
 8002796:	2200      	movs	r2, #0
 8002798:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fd79 	bl	8002294 <ssd1306_WriteCommand>
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000940 	.word	0x20000940

080027b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_MspInit+0x44>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_MspInit+0x44>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6613      	str	r3, [r2, #96]	; 0x60
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_MspInit+0x44>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_MspInit+0x44>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <HAL_MspInit+0x44>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_MspInit+0x44>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <NMI_Handler+0x4>

080027fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler+0x4>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler+0x4>

08002816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002844:	f000 f93e 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <RNG_IRQHandler+0x10>)
 8002852:	f002 f91a 	bl	8004a8a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000052c 	.word	0x2000052c

08002860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <SystemInit+0x20>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <SystemInit+0x20>)
 800286c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <MX_USART2_UART_Init+0x90>)
 800288a:	4a23      	ldr	r2, [pc, #140]	; (8002918 <MX_USART2_UART_Init+0x94>)
 800288c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <MX_USART2_UART_Init+0x90>)
 8002890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <MX_USART2_UART_Init+0x90>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <MX_USART2_UART_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028aa:	220c      	movs	r2, #12
 80028ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028cc:	4811      	ldr	r0, [pc, #68]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028ce:	f002 f947 	bl	8004b60 <HAL_UART_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028d8:	f7ff fb8b 	bl	8001ff2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028dc:	2100      	movs	r1, #0
 80028de:	480d      	ldr	r0, [pc, #52]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028e0:	f002 fe48 	bl	8005574 <HAL_UARTEx_SetTxFifoThreshold>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028ea:	f7ff fb82 	bl	8001ff2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ee:	2100      	movs	r1, #0
 80028f0:	4808      	ldr	r0, [pc, #32]	; (8002914 <MX_USART2_UART_Init+0x90>)
 80028f2:	f002 fe7d 	bl	80055f0 <HAL_UARTEx_SetRxFifoThreshold>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028fc:	f7ff fb79 	bl	8001ff2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <MX_USART2_UART_Init+0x90>)
 8002902:	f002 fdfe 	bl	8005502 <HAL_UARTEx_DisableFifoMode>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800290c:	f7ff fb71 	bl	8001ff2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000948 	.word	0x20000948
 8002918:	40004400 	.word	0x40004400

0800291c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b09a      	sub	sp, #104	; 0x68
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	2244      	movs	r2, #68	; 0x44
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f002 ff13 	bl	8005768 <memset>
  if(uartHandle->Instance==USART2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HAL_UART_MspInit+0xa8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d136      	bne.n	80029ba <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800294c:	2302      	movs	r3, #2
 800294e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fe1b 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002964:	f7ff fb45 	bl	8001ff2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_UART_MspInit+0xac>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_UART_MspInit+0xac>)
 800296e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002972:	6593      	str	r3, [r2, #88]	; 0x58
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_UART_MspInit+0xac>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_UART_MspInit+0xac>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <HAL_UART_MspInit+0xac>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_UART_MspInit+0xac>)
 800298e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002998:	230c      	movs	r3, #12
 800299a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a8:	2307      	movs	r3, #7
 80029aa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029b0:	4619      	mov	r1, r3
 80029b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b6:	f000 f9d5 	bl	8002d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029ba:	bf00      	nop
 80029bc:	3768      	adds	r7, #104	; 0x68
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40004400 	.word	0x40004400
 80029c8:	40021000 	.word	0x40021000

080029cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029cc:	480d      	ldr	r0, [pc, #52]	; (8002a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80029d2:	490e      	ldr	r1, [pc, #56]	; (8002a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d4:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <LoopForever+0xe>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029d8:	e002      	b.n	80029e0 <LoopCopyDataInit>

080029da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029de:	3304      	adds	r3, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e4:	d3f9      	bcc.n	80029da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029e8:	4c0b      	ldr	r4, [pc, #44]	; (8002a18 <LoopForever+0x16>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ec:	e001      	b.n	80029f2 <LoopFillZerobss>

080029ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f0:	3204      	adds	r2, #4

080029f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f4:	d3fb      	bcc.n	80029ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029f6:	f7ff ff33 	bl	8002860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029fa:	f002 fe89 	bl	8005710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029fe:	f7ff f9ff 	bl	8001e00 <main>

08002a02 <LoopForever>:

LoopForever:
    b LoopForever
 8002a02:	e7fe      	b.n	8002a02 <LoopForever>
  ldr   r0, =_estack
 8002a04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a0c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002a10:	08007328 	.word	0x08007328
  ldr r2, =_sbss
 8002a14:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002a18:	200009e4 	.word	0x200009e4

08002a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <ADC1_2_IRQHandler>

08002a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a28:	2003      	movs	r0, #3
 8002a2a:	f000 f95b 	bl	8002ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f000 f80e 	bl	8002a50 <HAL_InitTick>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	71fb      	strb	r3, [r7, #7]
 8002a3e:	e001      	b.n	8002a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a40:	f7ff feb6 	bl	80027b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a44:	79fb      	ldrb	r3, [r7, #7]

}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_InitTick+0x68>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d022      	beq.n	8002aaa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_InitTick+0x6c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_InitTick+0x68>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f966 	bl	8002d4a <HAL_SYSTICK_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10f      	bne.n	8002aa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d809      	bhi.n	8002a9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a92:	f000 f932 	bl	8002cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_InitTick+0x70>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e007      	b.n	8002aae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e004      	b.n	8002aae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000060 	.word	0x20000060
 8002abc:	20000058 	.word	0x20000058
 8002ac0:	2000005c 	.word	0x2000005c

08002ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_IncTick+0x1c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a03      	ldr	r2, [pc, #12]	; (8002ae0 <HAL_IncTick+0x1c>)
 8002ad4:	6013      	str	r3, [r2, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	200009d8 	.word	0x200009d8
 8002ae4:	20000060 	.word	0x20000060

08002ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_GetTick+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	200009d8 	.word	0x200009d8

08002b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff ffee 	bl	8002ae8 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d004      	beq.n	8002b24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_Delay+0x40>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b24:	bf00      	nop
 8002b26:	f7ff ffdf 	bl	8002ae8 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d8f7      	bhi.n	8002b26 <HAL_Delay+0x26>
  {
  }
}
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000060 	.word	0x20000060

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	; (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb0:	d301      	bcc.n	8002cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <SysTick_Config+0x40>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f7ff ff8e 	bl	8002be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <SysTick_Config+0x40>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <SysTick_Config+0x40>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010

08002ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff29 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d08:	f7ff ff40 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7ff ff90 	bl	8002c38 <NVIC_EncodePriority>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5f 	bl	8002be4 <__NVIC_SetPriority>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff33 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ffa4 	bl	8002ca0 <SysTick_Config>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d72:	e15a      	b.n	800302a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 814c 	beq.w	8003024 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d005      	beq.n	8002da4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d130      	bne.n	8002e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dda:	2201      	movs	r2, #1
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f003 0201 	and.w	r2, r3, #1
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d017      	beq.n	8002e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d123      	bne.n	8002e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	6939      	ldr	r1, [r7, #16]
 8002e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80a6 	beq.w	8003024 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed8:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <HAL_GPIO_Init+0x2e4>)
 8002eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002edc:	4a5a      	ldr	r2, [pc, #360]	; (8003048 <HAL_GPIO_Init+0x2e4>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee4:	4b58      	ldr	r3, [pc, #352]	; (8003048 <HAL_GPIO_Init+0x2e4>)
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef0:	4a56      	ldr	r2, [pc, #344]	; (800304c <HAL_GPIO_Init+0x2e8>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f1a:	d01f      	beq.n	8002f5c <HAL_GPIO_Init+0x1f8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <HAL_GPIO_Init+0x2ec>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d019      	beq.n	8002f58 <HAL_GPIO_Init+0x1f4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a4b      	ldr	r2, [pc, #300]	; (8003054 <HAL_GPIO_Init+0x2f0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_GPIO_Init+0x1f0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a4a      	ldr	r2, [pc, #296]	; (8003058 <HAL_GPIO_Init+0x2f4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00d      	beq.n	8002f50 <HAL_GPIO_Init+0x1ec>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a49      	ldr	r2, [pc, #292]	; (800305c <HAL_GPIO_Init+0x2f8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <HAL_GPIO_Init+0x1e8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a48      	ldr	r2, [pc, #288]	; (8003060 <HAL_GPIO_Init+0x2fc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_GPIO_Init+0x1e4>
 8002f44:	2305      	movs	r3, #5
 8002f46:	e00a      	b.n	8002f5e <HAL_GPIO_Init+0x1fa>
 8002f48:	2306      	movs	r3, #6
 8002f4a:	e008      	b.n	8002f5e <HAL_GPIO_Init+0x1fa>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	e006      	b.n	8002f5e <HAL_GPIO_Init+0x1fa>
 8002f50:	2303      	movs	r3, #3
 8002f52:	e004      	b.n	8002f5e <HAL_GPIO_Init+0x1fa>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e002      	b.n	8002f5e <HAL_GPIO_Init+0x1fa>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_GPIO_Init+0x1fa>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	f002 0203 	and.w	r2, r2, #3
 8002f64:	0092      	lsls	r2, r2, #2
 8002f66:	4093      	lsls	r3, r2
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f6e:	4937      	ldr	r1, [pc, #220]	; (800304c <HAL_GPIO_Init+0x2e8>)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3302      	adds	r3, #2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f7c:	4b39      	ldr	r3, [pc, #228]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fa0:	4a30      	ldr	r2, [pc, #192]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fa6:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fca:	4a26      	ldr	r2, [pc, #152]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_GPIO_Init+0x300>)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3301      	adds	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	f47f ae9d 	bne.w	8002d74 <HAL_GPIO_Init+0x10>
  }
}
 800303a:	bf00      	nop
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40021000 	.word	0x40021000
 800304c:	40010000 	.word	0x40010000
 8003050:	48000400 	.word	0x48000400
 8003054:	48000800 	.word	0x48000800
 8003058:	48000c00 	.word	0x48000c00
 800305c:	48001000 	.word	0x48001000
 8003060:	48001400 	.word	0x48001400
 8003064:	40010400 	.word	0x40010400

08003068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e001      	b.n	800308a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b4:	e002      	b.n	80030bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e081      	b.n	80031de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe f8de 	bl	80012b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	e006      	b.n	8003150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800314e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d104      	bne.n	8003162 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69d9      	ldr	r1, [r3, #28]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1a      	ldr	r2, [r3, #32]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	f040 80f9 	bne.w	8003402 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_I2C_Mem_Write+0x34>
 8003216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0ed      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Mem_Write+0x4e>
 8003232:	2302      	movs	r3, #2
 8003234:	e0e6      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800323e:	f7ff fc53 	bl	8002ae8 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2319      	movs	r3, #25
 800324a:	2201      	movs	r2, #1
 800324c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f955 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0d1      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2221      	movs	r2, #33	; 0x21
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2240      	movs	r2, #64	; 0x40
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a3a      	ldr	r2, [r7, #32]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003288:	88f8      	ldrh	r0, [r7, #6]
 800328a:	893a      	ldrh	r2, [r7, #8]
 800328c:	8979      	ldrh	r1, [r7, #10]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4603      	mov	r3, r0
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f8b9 	bl	8003410 <I2C_RequestMemoryWrite>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0a9      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2bff      	cmp	r3, #255	; 0xff
 80032b8:	d90e      	bls.n	80032d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	2300      	movs	r3, #0
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fabd 	bl	8003850 <I2C_TransferConfig>
 80032d6:	e00f      	b.n	80032f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 faac 	bl	8003850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f93f 	bl	8003580 <I2C_WaitOnTXISFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e07b      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d034      	beq.n	80033b0 <HAL_I2C_Mem_Write+0x1c8>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d130      	bne.n	80033b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	2200      	movs	r2, #0
 8003356:	2180      	movs	r1, #128	; 0x80
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f8d1 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e04d      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	2bff      	cmp	r3, #255	; 0xff
 8003370:	d90e      	bls.n	8003390 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	b2da      	uxtb	r2, r3
 800337e:	8979      	ldrh	r1, [r7, #10]
 8003380:	2300      	movs	r3, #0
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fa61 	bl	8003850 <I2C_TransferConfig>
 800338e:	e00f      	b.n	80033b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	2300      	movs	r3, #0
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fa50 	bl	8003850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d19e      	bne.n	80032f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f91e 	bl	8003600 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e01a      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2220      	movs	r2, #32
 80033d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_I2C_Mem_Write+0x224>)
 80033e2:	400b      	ands	r3, r1
 80033e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003402:	2302      	movs	r3, #2
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	fe00e800 	.word	0xfe00e800

08003410 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	817b      	strh	r3, [r7, #10]
 8003422:	460b      	mov	r3, r1
 8003424:	813b      	strh	r3, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	8979      	ldrh	r1, [r7, #10]
 8003430:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <I2C_RequestMemoryWrite+0xa4>)
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fa09 	bl	8003850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f89c 	bl	8003580 <I2C_WaitOnTXISFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e02c      	b.n	80034ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003458:	893b      	ldrh	r3, [r7, #8]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
 8003462:	e015      	b.n	8003490 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003464:	893b      	ldrh	r3, [r7, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	b29b      	uxth	r3, r3
 800346a:	b2da      	uxtb	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f882 	bl	8003580 <I2C_WaitOnTXISFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e012      	b.n	80034ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003486:	893b      	ldrh	r3, [r7, #8]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2200      	movs	r2, #0
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f830 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	80002000 	.word	0x80002000

080034b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d103      	bne.n	80034d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2200      	movs	r2, #0
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d007      	beq.n	80034f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	619a      	str	r2, [r3, #24]
  }
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003510:	e022      	b.n	8003558 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d01e      	beq.n	8003558 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7ff fae5 	bl	8002ae8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d113      	bne.n	8003558 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e00f      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	429a      	cmp	r2, r3
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	429a      	cmp	r2, r3
 8003574:	d0cd      	beq.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800358c:	e02c      	b.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f870 	bl	8003678 <I2C_IsErrorOccurred>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e02a      	b.n	80035f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d01e      	beq.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035aa:	f7ff fa9d 	bl	8002ae8 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d113      	bne.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e007      	b.n	80035f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d1cb      	bne.n	800358e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360c:	e028      	b.n	8003660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f830 	bl	8003678 <I2C_IsErrorOccurred>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e026      	b.n	8003670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7ff fa61 	bl	8002ae8 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d113      	bne.n	8003660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e007      	b.n	8003670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b20      	cmp	r3, #32
 800366c:	d1cf      	bne.n	800360e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d075      	beq.n	8003790 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2210      	movs	r2, #16
 80036aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ac:	e056      	b.n	800375c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d052      	beq.n	800375c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7ff fa17 	bl	8002ae8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_IsErrorOccurred+0x54>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d147      	bne.n	800375c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ee:	d12e      	bne.n	800374e <I2C_IsErrorOccurred+0xd6>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f6:	d02a      	beq.n	800374e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d027      	beq.n	800374e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800370c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800370e:	f7ff f9eb 	bl	8002ae8 <HAL_GetTick>
 8003712:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003714:	e01b      	b.n	800374e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003716:	f7ff f9e7 	bl	8002ae8 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b19      	cmp	r3, #25
 8003722:	d914      	bls.n	800374e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b20      	cmp	r3, #32
 800375a:	d1dc      	bne.n	8003716 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b20      	cmp	r3, #32
 8003768:	d003      	beq.n	8003772 <I2C_IsErrorOccurred+0xfa>
 800376a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800376e:	2b00      	cmp	r3, #0
 8003770:	d09d      	beq.n	80036ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2220      	movs	r2, #32
 8003780:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f043 0304 	orr.w	r3, r3, #4
 8003788:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	f043 0308 	orr.w	r3, r3, #8
 80037ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f043 0302 	orr.w	r3, r3, #2
 80037ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01c      	beq.n	8003840 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff fe56 	bl	80034b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <I2C_IsErrorOccurred+0x1d4>)
 8003818:	400b      	ands	r3, r1
 800381a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	431a      	orrs	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003844:	4618      	mov	r0, r3
 8003846:	3728      	adds	r7, #40	; 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	fe00e800 	.word	0xfe00e800

08003850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	4613      	mov	r3, r2
 8003860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003868:	7a7b      	ldrb	r3, [r7, #9]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003870:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	4313      	orrs	r3, r2
 800387a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800387e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	0d5b      	lsrs	r3, r3, #21
 800388a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <I2C_TransferConfig+0x60>)
 8003890:	430b      	orrs	r3, r1
 8003892:	43db      	mvns	r3, r3
 8003894:	ea02 0103 	and.w	r1, r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	03ff63ff 	.word	0x03ff63ff

080038b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d138      	bne.n	800393c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e032      	b.n	800393e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e000      	b.n	800393e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b20      	cmp	r3, #32
 800395e:	d139      	bne.n	80039d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800396a:	2302      	movs	r3, #2
 800396c:	e033      	b.n	80039d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2224      	movs	r2, #36	; 0x24
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800399c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d141      	bne.n	8003a76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039f2:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fe:	d131      	bne.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a00:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a06:	4a46      	ldr	r2, [pc, #280]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a10:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a18:	4a41      	ldr	r2, [pc, #260]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a20:	4b40      	ldr	r3, [pc, #256]	; (8003b24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2232      	movs	r2, #50	; 0x32
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	4a3f      	ldr	r2, [pc, #252]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	0c9b      	lsrs	r3, r3, #18
 8003a32:	3301      	adds	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a36:	e002      	b.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	d102      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f2      	bne.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a52:	4b33      	ldr	r3, [pc, #204]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d158      	bne.n	8003b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e057      	b.n	8003b14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a64:	4b2e      	ldr	r3, [pc, #184]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a6a:	4a2d      	ldr	r2, [pc, #180]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a74:	e04d      	b.n	8003b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7c:	d141      	bne.n	8003b02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a7e:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d131      	bne.n	8003af0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a8c:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a92:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aa4:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2232      	movs	r2, #50	; 0x32
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	0c9b      	lsrs	r3, r3, #18
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ac2:	e002      	b.n	8003aca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d102      	bne.n	8003ade <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f2      	bne.n	8003ac4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aea:	d112      	bne.n	8003b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e011      	b.n	8003b14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b00:	e007      	b.n	8003b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b0a:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40007000 	.word	0x40007000
 8003b24:	20000058 	.word	0x20000058
 8003b28:	431bde83 	.word	0x431bde83

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e306      	b.n	800414c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d075      	beq.n	8003c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4a:	4b97      	ldr	r3, [pc, #604]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b54:	4b94      	ldr	r3, [pc, #592]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d102      	bne.n	8003b6a <HAL_RCC_OscConfig+0x3e>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d002      	beq.n	8003b70 <HAL_RCC_OscConfig+0x44>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	4b8d      	ldr	r3, [pc, #564]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d05b      	beq.n	8003c34 <HAL_RCC_OscConfig+0x108>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d157      	bne.n	8003c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e2e1      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x74>
 8003b92:	4b85      	ldr	r3, [pc, #532]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a84      	ldr	r2, [pc, #528]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e01d      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x98>
 8003baa:	4b7f      	ldr	r3, [pc, #508]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a7e      	ldr	r2, [pc, #504]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b7c      	ldr	r3, [pc, #496]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7b      	ldr	r2, [pc, #492]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003bc4:	4b78      	ldr	r3, [pc, #480]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a77      	ldr	r2, [pc, #476]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4b75      	ldr	r3, [pc, #468]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a74      	ldr	r2, [pc, #464]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe ff80 	bl	8002ae8 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe ff7c 	bl	8002ae8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e2a6      	b.n	800414c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	4b6a      	ldr	r3, [pc, #424]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0xc0>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe ff6c 	bl	8002ae8 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fe ff68 	bl	8002ae8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e292      	b.n	800414c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c26:	4b60      	ldr	r3, [pc, #384]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0xe8>
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d075      	beq.n	8003d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c42:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_OscConfig+0x136>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_OscConfig+0x13c>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d11f      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c68:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_OscConfig+0x154>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e265      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	4946      	ldr	r1, [pc, #280]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c94:	4b45      	ldr	r3, [pc, #276]	; (8003dac <HAL_RCC_OscConfig+0x280>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fed9 	bl	8002a50 <HAL_InitTick>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d043      	beq.n	8003d2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e251      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb0:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3c      	ldr	r2, [pc, #240]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe ff14 	bl	8002ae8 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fe ff10 	bl	8002ae8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e23a      	b.n	800414c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd6:	4b34      	ldr	r3, [pc, #208]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	061b      	lsls	r3, r3, #24
 8003cf0:	492d      	ldr	r1, [pc, #180]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
 8003cf6:	e01a      	b.n	8003d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fef0 	bl	8002ae8 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0c:	f7fe feec 	bl	8002ae8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e216      	b.n	800414c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x1e0>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d041      	beq.n	8003dbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d42:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d48:	4a17      	ldr	r2, [pc, #92]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fe fec9 	bl	8002ae8 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fec5 	bl	8002ae8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1ef      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ef      	beq.n	8003d5a <HAL_RCC_OscConfig+0x22e>
 8003d7a:	e020      	b.n	8003dbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d82:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <HAL_RCC_OscConfig+0x27c>)
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fe feac 	bl	8002ae8 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d92:	e00d      	b.n	8003db0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fe fea8 	bl	8002ae8 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d906      	bls.n	8003db0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e1d2      	b.n	800414c <HAL_RCC_OscConfig+0x620>
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db0:	4b8c      	ldr	r3, [pc, #560]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ea      	bne.n	8003d94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80a6 	beq.w	8003f18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dd0:	4b84      	ldr	r3, [pc, #528]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_OscConfig+0x2b4>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x2b6>
 8003de0:	2300      	movs	r3, #0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	4b7f      	ldr	r3, [pc, #508]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	4a7e      	ldr	r2, [pc, #504]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6593      	str	r3, [r2, #88]	; 0x58
 8003df2:	4b7c      	ldr	r3, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e02:	4b79      	ldr	r3, [pc, #484]	; (8003fe8 <HAL_RCC_OscConfig+0x4bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d118      	bne.n	8003e40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e0e:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCC_OscConfig+0x4bc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a75      	ldr	r2, [pc, #468]	; (8003fe8 <HAL_RCC_OscConfig+0x4bc>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fe65 	bl	8002ae8 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e22:	f7fe fe61 	bl	8002ae8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e18b      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e34:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <HAL_RCC_OscConfig+0x4bc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d108      	bne.n	8003e5a <HAL_RCC_OscConfig+0x32e>
 8003e48:	4b66      	ldr	r3, [pc, #408]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	4a65      	ldr	r2, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e58:	e024      	b.n	8003ea4 <HAL_RCC_OscConfig+0x378>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d110      	bne.n	8003e84 <HAL_RCC_OscConfig+0x358>
 8003e62:	4b60      	ldr	r3, [pc, #384]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	4a5e      	ldr	r2, [pc, #376]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	4a5a      	ldr	r2, [pc, #360]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e82:	e00f      	b.n	8003ea4 <HAL_RCC_OscConfig+0x378>
 8003e84:	4b57      	ldr	r3, [pc, #348]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	4a56      	ldr	r2, [pc, #344]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e94:	4b53      	ldr	r3, [pc, #332]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	4a52      	ldr	r2, [pc, #328]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe fe1c 	bl	8002ae8 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fe18 	bl	8002ae8 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e140      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eca:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ed      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x388>
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fe fe05 	bl	8002ae8 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fe fe01 	bl	8002ae8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e129      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef8:	4b3a      	ldr	r3, [pc, #232]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ed      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d03c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01c      	beq.n	8003f66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f32:	4a2c      	ldr	r2, [pc, #176]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fdd4 	bl	8002ae8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f44:	f7fe fdd0 	bl	8002ae8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0fa      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ef      	beq.n	8003f44 <HAL_RCC_OscConfig+0x418>
 8003f64:	e01b      	b.n	8003f9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f66:	4b1f      	ldr	r3, [pc, #124]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe fdb7 	bl	8002ae8 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7e:	f7fe fdb3 	bl	8002ae8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0dd      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f90:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ef      	bne.n	8003f7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80d1 	beq.w	800414a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	f000 808b 	beq.w	80040cc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d15e      	bne.n	800407c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <HAL_RCC_OscConfig+0x4b8>)
 8003fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fe fd8d 	bl	8002ae8 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd0:	e00c      	b.n	8003fec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fe fd89 	bl	8002ae8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d905      	bls.n	8003fec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e0b3      	b.n	800414c <HAL_RCC_OscConfig+0x620>
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	4b59      	ldr	r3, [pc, #356]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ec      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ff8:	4b56      	ldr	r3, [pc, #344]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4b56      	ldr	r3, [pc, #344]	; (8004158 <HAL_RCC_OscConfig+0x62c>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6a11      	ldr	r1, [r2, #32]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004008:	3a01      	subs	r2, #1
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	4311      	orrs	r1, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004012:	0212      	lsls	r2, r2, #8
 8004014:	4311      	orrs	r1, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800401a:	0852      	lsrs	r2, r2, #1
 800401c:	3a01      	subs	r2, #1
 800401e:	0552      	lsls	r2, r2, #21
 8004020:	4311      	orrs	r1, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004026:	0852      	lsrs	r2, r2, #1
 8004028:	3a01      	subs	r2, #1
 800402a:	0652      	lsls	r2, r2, #25
 800402c:	4311      	orrs	r1, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004032:	06d2      	lsls	r2, r2, #27
 8004034:	430a      	orrs	r2, r1
 8004036:	4947      	ldr	r1, [pc, #284]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8004038:	4313      	orrs	r3, r2
 800403a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	4b45      	ldr	r3, [pc, #276]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a44      	ldr	r2, [pc, #272]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8004042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004048:	4b42      	ldr	r3, [pc, #264]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a41      	ldr	r2, [pc, #260]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 800404e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004052:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fe fd48 	bl	8002ae8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fe fd44 	bl	8002ae8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e06e      	b.n	800414c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	4b39      	ldr	r3, [pc, #228]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x530>
 800407a:	e066      	b.n	800414a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407c:	4b35      	ldr	r3, [pc, #212]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a34      	ldr	r2, [pc, #208]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8004082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004086:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004088:	4b32      	ldr	r3, [pc, #200]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a31      	ldr	r2, [pc, #196]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 800408e:	f023 0303 	bic.w	r3, r3, #3
 8004092:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004094:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a2e      	ldr	r2, [pc, #184]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 800409a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fe fd20 	bl	8002ae8 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fe fd1c 	bl	8002ae8 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e046      	b.n	800414c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040be:	4b25      	ldr	r3, [pc, #148]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x580>
 80040ca:	e03e      	b.n	800414a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e039      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80040d8:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0203 	and.w	r2, r3, #3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d12c      	bne.n	8004146 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	3b01      	subs	r3, #1
 80040f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d123      	bne.n	8004146 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d11b      	bne.n	8004146 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d113      	bne.n	8004146 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	3b01      	subs	r3, #1
 800412c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d109      	bne.n	8004146 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	3b01      	subs	r3, #1
 8004140:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	019f800c 	.word	0x019f800c

0800415c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e11e      	b.n	80043b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b91      	ldr	r3, [pc, #580]	; (80043bc <HAL_RCC_ClockConfig+0x260>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d910      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b8e      	ldr	r3, [pc, #568]	; (80043bc <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 020f 	bic.w	r2, r3, #15
 800418a:	498c      	ldr	r1, [pc, #560]	; (80043bc <HAL_RCC_ClockConfig+0x260>)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b8a      	ldr	r3, [pc, #552]	; (80043bc <HAL_RCC_ClockConfig+0x260>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e106      	b.n	80043b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d073      	beq.n	8004298 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d129      	bne.n	800420c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b8:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0f4      	b.n	80043b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80041c8:	f000 f99e 	bl	8004508 <RCC_GetSysClockFreqFromPLLSource>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4a7c      	ldr	r2, [pc, #496]	; (80043c4 <HAL_RCC_ClockConfig+0x268>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d93f      	bls.n	8004256 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041d6:	4b7a      	ldr	r3, [pc, #488]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d033      	beq.n	8004256 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d12f      	bne.n	8004256 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041f6:	4b72      	ldr	r3, [pc, #456]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fe:	4a70      	ldr	r2, [pc, #448]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004204:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e024      	b.n	8004256 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d107      	bne.n	8004224 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0c6      	b.n	80043b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004224:	4b66      	ldr	r3, [pc, #408]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0be      	b.n	80043b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004234:	f000 f8ce 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004238:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4a61      	ldr	r2, [pc, #388]	; (80043c4 <HAL_RCC_ClockConfig+0x268>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d909      	bls.n	8004256 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424a:	4a5d      	ldr	r2, [pc, #372]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 800424c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004250:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004256:	4b5a      	ldr	r3, [pc, #360]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4957      	ldr	r1, [pc, #348]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fe fc3e 	bl	8002ae8 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fe fc3a 	bl	8002ae8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e095      	b.n	80043b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b4e      	ldr	r3, [pc, #312]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 020c 	and.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d1eb      	bne.n	8004270 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d023      	beq.n	80042ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b0:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4a42      	ldr	r2, [pc, #264]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80042b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80042c8:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042d0:	4a3b      	ldr	r2, [pc, #236]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80042d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4936      	ldr	r1, [pc, #216]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
 80042ea:	e008      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b80      	cmp	r3, #128	; 0x80
 80042f0:	d105      	bne.n	80042fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042f2:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	4a32      	ldr	r2, [pc, #200]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 80042f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042fe:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_RCC_ClockConfig+0x260>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d21d      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430c:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <HAL_RCC_ClockConfig+0x260>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f023 020f 	bic.w	r2, r3, #15
 8004314:	4929      	ldr	r1, [pc, #164]	; (80043bc <HAL_RCC_ClockConfig+0x260>)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800431c:	f7fe fbe4 	bl	8002ae8 <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	e00a      	b.n	800433a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004324:	f7fe fbe0 	bl	8002ae8 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e03b      	b.n	80043b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <HAL_RCC_ClockConfig+0x260>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d1ed      	bne.n	8004324 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004354:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4917      	ldr	r1, [pc, #92]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004372:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	490f      	ldr	r1, [pc, #60]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004386:	f000 f825 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 800438a:	4602      	mov	r2, r0
 800438c:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <HAL_RCC_ClockConfig+0x264>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	490c      	ldr	r1, [pc, #48]	; (80043c8 <HAL_RCC_ClockConfig+0x26c>)
 8004398:	5ccb      	ldrb	r3, [r1, r3]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	fa22 f303 	lsr.w	r3, r2, r3
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <HAL_RCC_ClockConfig+0x270>)
 80043a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_RCC_ClockConfig+0x274>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fb50 	bl	8002a50 <HAL_InitTick>
 80043b0:	4603      	mov	r3, r0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40022000 	.word	0x40022000
 80043c0:	40021000 	.word	0x40021000
 80043c4:	04c4b400 	.word	0x04c4b400
 80043c8:	080072d0 	.word	0x080072d0
 80043cc:	20000058 	.word	0x20000058
 80043d0:	2000005c 	.word	0x2000005c

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043da:	4b2c      	ldr	r3, [pc, #176]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d102      	bne.n	80043ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043e6:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	e047      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043ec:	4b27      	ldr	r3, [pc, #156]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d102      	bne.n	80043fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043f8:	4b26      	ldr	r3, [pc, #152]	; (8004494 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e03e      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d136      	bne.n	8004478 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	3301      	adds	r3, #1
 8004420:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d10c      	bne.n	8004442 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004428:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_RCC_GetSysClockFreq+0xc0>)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	4a16      	ldr	r2, [pc, #88]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004432:	68d2      	ldr	r2, [r2, #12]
 8004434:	0a12      	lsrs	r2, r2, #8
 8004436:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	617b      	str	r3, [r7, #20]
      break;
 8004440:	e00c      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004442:	4a13      	ldr	r2, [pc, #76]	; (8004490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	4a10      	ldr	r2, [pc, #64]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 800444c:	68d2      	ldr	r2, [r2, #12]
 800444e:	0a12      	lsrs	r2, r2, #8
 8004450:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]
      break;
 800445a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	0e5b      	lsrs	r3, r3, #25
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	3301      	adds	r3, #1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e001      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800447c:	693b      	ldr	r3, [r7, #16]
}
 800447e:	4618      	mov	r0, r3
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	00f42400 	.word	0x00f42400
 8004494:	007a1200 	.word	0x007a1200

08004498 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000058 	.word	0x20000058

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4904      	ldr	r1, [pc, #16]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	080072e0 	.word	0x080072e0

080044dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044e0:	f7ff ffda 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0adb      	lsrs	r3, r3, #11
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4904      	ldr	r1, [pc, #16]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40021000 	.word	0x40021000
 8004504:	080072e0 	.word	0x080072e0

08004508 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004518:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	3301      	adds	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d10c      	bne.n	8004546 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800452c:	4a17      	ldr	r2, [pc, #92]	; (800458c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	4a14      	ldr	r2, [pc, #80]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004536:	68d2      	ldr	r2, [r2, #12]
 8004538:	0a12      	lsrs	r2, r2, #8
 800453a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	617b      	str	r3, [r7, #20]
    break;
 8004544:	e00c      	b.n	8004560 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004546:	4a12      	ldr	r2, [pc, #72]	; (8004590 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	4a0e      	ldr	r2, [pc, #56]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004550:	68d2      	ldr	r2, [r2, #12]
 8004552:	0a12      	lsrs	r2, r2, #8
 8004554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
    break;
 800455e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0e5b      	lsrs	r3, r3, #25
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800457a:	687b      	ldr	r3, [r7, #4]
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40021000 	.word	0x40021000
 800458c:	007a1200 	.word	0x007a1200
 8004590:	00f42400 	.word	0x00f42400

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800459c:	2300      	movs	r3, #0
 800459e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a0:	2300      	movs	r3, #0
 80045a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8098 	beq.w	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b43      	ldr	r3, [pc, #268]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10d      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	4b40      	ldr	r3, [pc, #256]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	4a3f      	ldr	r2, [pc, #252]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6593      	str	r3, [r2, #88]	; 0x58
 80045ce:	4b3d      	ldr	r3, [pc, #244]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045da:	2301      	movs	r3, #1
 80045dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045de:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a39      	ldr	r2, [pc, #228]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ea:	f7fe fa7d 	bl	8002ae8 <HAL_GetTick>
 80045ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045f0:	e009      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fe fa79 	bl	8002ae8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d902      	bls.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	74fb      	strb	r3, [r7, #19]
        break;
 8004604:	e005      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ef      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d159      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004618:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01e      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	429a      	cmp	r2, r3
 8004632:	d019      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004672:	f7fe fa39 	bl	8002ae8 <HAL_GetTick>
 8004676:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004678:	e00b      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fe fa35 	bl	8002ae8 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d902      	bls.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	74fb      	strb	r3, [r7, #19]
            break;
 8004690:	e006      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ec      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046bc:	e008      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046be:	7cfb      	ldrb	r3, [r7, #19]
 80046c0:	74bb      	strb	r3, [r7, #18]
 80046c2:	e005      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d0:	7c7b      	ldrb	r3, [r7, #17]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4ba6      	ldr	r3, [pc, #664]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	4aa5      	ldr	r2, [pc, #660]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ee:	4ba0      	ldr	r3, [pc, #640]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f023 0203 	bic.w	r2, r3, #3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	499c      	ldr	r1, [pc, #624]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004710:	4b97      	ldr	r3, [pc, #604]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f023 020c 	bic.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4994      	ldr	r1, [pc, #592]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004732:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	498b      	ldr	r1, [pc, #556]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004754:	4b86      	ldr	r3, [pc, #536]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	4983      	ldr	r1, [pc, #524]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004776:	4b7e      	ldr	r3, [pc, #504]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	497a      	ldr	r1, [pc, #488]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004798:	4b75      	ldr	r3, [pc, #468]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	4972      	ldr	r1, [pc, #456]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ba:	4b6d      	ldr	r3, [pc, #436]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	4969      	ldr	r1, [pc, #420]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047dc:	4b64      	ldr	r3, [pc, #400]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4961      	ldr	r1, [pc, #388]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047fe:	4b5c      	ldr	r3, [pc, #368]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	4958      	ldr	r1, [pc, #352]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d015      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004820:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	4950      	ldr	r1, [pc, #320]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483e:	d105      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a4a      	ldr	r2, [pc, #296]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004854:	2b00      	cmp	r3, #0
 8004856:	d015      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004858:	4b45      	ldr	r3, [pc, #276]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	4942      	ldr	r1, [pc, #264]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004876:	d105      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004878:	4b3d      	ldr	r3, [pc, #244]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a3c      	ldr	r2, [pc, #240]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004882:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004890:	4b37      	ldr	r3, [pc, #220]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	4934      	ldr	r1, [pc, #208]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ae:	d105      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b0:	4b2f      	ldr	r3, [pc, #188]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a2e      	ldr	r2, [pc, #184]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d015      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048c8:	4b29      	ldr	r3, [pc, #164]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	4926      	ldr	r1, [pc, #152]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e6:	d105      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e8:	4b21      	ldr	r3, [pc, #132]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d015      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004900:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	4918      	ldr	r1, [pc, #96]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800491e:	d105      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004920:	4b13      	ldr	r3, [pc, #76]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800492a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d015      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004938:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	490a      	ldr	r1, [pc, #40]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004956:	d105      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004962:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004964:	7cbb      	ldrb	r3, [r7, #18]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000

08004974 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e027      	b.n	80049d6 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7a5b      	ldrb	r3, [r3, #9]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fd fc38 	bl	800220c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 0108 	bic.w	r1, r3, #8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0204 	orr.w	r2, r2, #4
 80049c6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	7a1b      	ldrb	r3, [r3, #8]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_RNG_GenerateRandomNumber+0x1a>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e044      	b.n	8004a82 <HAL_RNG_GenerateRandomNumber+0xa4>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	7a5b      	ldrb	r3, [r3, #9]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d133      	bne.n	8004a70 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a0e:	f7fe f86b 	bl	8002ae8 <HAL_GetTick>
 8004a12:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004a14:	e018      	b.n	8004a48 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004a16:	f7fe f867 	bl	8002ae8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d911      	bls.n	8004a48 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d00a      	beq.n	8004a48 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e01c      	b.n	8004a82 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d1df      	bne.n	8004a16 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	725a      	strb	r2, [r3, #9]
 8004a6e:	e004      	b.n	8004a7a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2204      	movs	r2, #4
 8004a74:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	721a      	strb	r2, [r3, #8]

  return status;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2210      	movs	r2, #16
 8004aa8:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e00b      	b.n	8004ac8 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d104      	bne.n	8004ac8 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d10b      	bne.n	8004ae6 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f839 	bl	8004b4c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004ae2:	605a      	str	r2, [r3, #4]

    return;
 8004ae4:	e024      	b.n	8004b30 <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d11d      	bne.n	8004b30 <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0208 	bic.w	r2, r2, #8
 8004b02:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	7a5b      	ldrb	r3, [r3, #9]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d00b      	beq.n	8004b30 <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f803 	bl	8004b36 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e042      	b.n	8004bf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fd fec9 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2224      	movs	r2, #36	; 0x24
 8004b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f82c 	bl	8004c00 <UART_SetConfig>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e022      	b.n	8004bf8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 faec 	bl	8005198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fb73 	bl	80052dc <UART_CheckIdleState>
 8004bf6:	4603      	mov	r3, r0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b08c      	sub	sp, #48	; 0x30
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4bab      	ldr	r3, [pc, #684]	; (8004edc <UART_SetConfig+0x2dc>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4aa0      	ldr	r2, [pc, #640]	; (8004ee0 <UART_SetConfig+0x2e0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	f023 010f 	bic.w	r1, r3, #15
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a91      	ldr	r2, [pc, #580]	; (8004ee4 <UART_SetConfig+0x2e4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d125      	bne.n	8004cf0 <UART_SetConfig+0xf0>
 8004ca4:	4b90      	ldr	r3, [pc, #576]	; (8004ee8 <UART_SetConfig+0x2e8>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d81a      	bhi.n	8004ce8 <UART_SetConfig+0xe8>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0xb8>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cc9 	.word	0x08004cc9
 8004cbc:	08004cd9 	.word	0x08004cd9
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004ce1 	.word	0x08004ce1
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cce:	e0d6      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd6:	e0d2      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cde:	e0ce      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce6:	e0ca      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cee:	e0c6      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a7d      	ldr	r2, [pc, #500]	; (8004eec <UART_SetConfig+0x2ec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d138      	bne.n	8004d6c <UART_SetConfig+0x16c>
 8004cfa:	4b7b      	ldr	r3, [pc, #492]	; (8004ee8 <UART_SetConfig+0x2e8>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d82d      	bhi.n	8004d64 <UART_SetConfig+0x164>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <UART_SetConfig+0x110>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d45 	.word	0x08004d45
 8004d14:	08004d65 	.word	0x08004d65
 8004d18:	08004d65 	.word	0x08004d65
 8004d1c:	08004d65 	.word	0x08004d65
 8004d20:	08004d55 	.word	0x08004d55
 8004d24:	08004d65 	.word	0x08004d65
 8004d28:	08004d65 	.word	0x08004d65
 8004d2c:	08004d65 	.word	0x08004d65
 8004d30:	08004d4d 	.word	0x08004d4d
 8004d34:	08004d65 	.word	0x08004d65
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4a:	e098      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d52:	e094      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004d54:	2304      	movs	r3, #4
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5a:	e090      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d62:	e08c      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d6a:	e088      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a5f      	ldr	r2, [pc, #380]	; (8004ef0 <UART_SetConfig+0x2f0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d125      	bne.n	8004dc2 <UART_SetConfig+0x1c2>
 8004d76:	4b5c      	ldr	r3, [pc, #368]	; (8004ee8 <UART_SetConfig+0x2e8>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d80:	2b30      	cmp	r3, #48	; 0x30
 8004d82:	d016      	beq.n	8004db2 <UART_SetConfig+0x1b2>
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d818      	bhi.n	8004dba <UART_SetConfig+0x1ba>
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d00a      	beq.n	8004da2 <UART_SetConfig+0x1a2>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d814      	bhi.n	8004dba <UART_SetConfig+0x1ba>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <UART_SetConfig+0x19a>
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d008      	beq.n	8004daa <UART_SetConfig+0x1aa>
 8004d98:	e00f      	b.n	8004dba <UART_SetConfig+0x1ba>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da0:	e06d      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004da2:	2302      	movs	r3, #2
 8004da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da8:	e069      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004daa:	2304      	movs	r3, #4
 8004dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db0:	e065      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004db2:	2308      	movs	r3, #8
 8004db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db8:	e061      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004dba:	2310      	movs	r3, #16
 8004dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc0:	e05d      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4b      	ldr	r2, [pc, #300]	; (8004ef4 <UART_SetConfig+0x2f4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d125      	bne.n	8004e18 <UART_SetConfig+0x218>
 8004dcc:	4b46      	ldr	r3, [pc, #280]	; (8004ee8 <UART_SetConfig+0x2e8>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd8:	d016      	beq.n	8004e08 <UART_SetConfig+0x208>
 8004dda:	2bc0      	cmp	r3, #192	; 0xc0
 8004ddc:	d818      	bhi.n	8004e10 <UART_SetConfig+0x210>
 8004dde:	2b80      	cmp	r3, #128	; 0x80
 8004de0:	d00a      	beq.n	8004df8 <UART_SetConfig+0x1f8>
 8004de2:	2b80      	cmp	r3, #128	; 0x80
 8004de4:	d814      	bhi.n	8004e10 <UART_SetConfig+0x210>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <UART_SetConfig+0x1f0>
 8004dea:	2b40      	cmp	r3, #64	; 0x40
 8004dec:	d008      	beq.n	8004e00 <UART_SetConfig+0x200>
 8004dee:	e00f      	b.n	8004e10 <UART_SetConfig+0x210>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df6:	e042      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	e03e      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e06:	e03a      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e036      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e032      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a30      	ldr	r2, [pc, #192]	; (8004ee0 <UART_SetConfig+0x2e0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d12a      	bne.n	8004e78 <UART_SetConfig+0x278>
 8004e22:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <UART_SetConfig+0x2e8>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e30:	d01a      	beq.n	8004e68 <UART_SetConfig+0x268>
 8004e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e36:	d81b      	bhi.n	8004e70 <UART_SetConfig+0x270>
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3c:	d00c      	beq.n	8004e58 <UART_SetConfig+0x258>
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e42:	d815      	bhi.n	8004e70 <UART_SetConfig+0x270>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <UART_SetConfig+0x250>
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d008      	beq.n	8004e60 <UART_SetConfig+0x260>
 8004e4e:	e00f      	b.n	8004e70 <UART_SetConfig+0x270>
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e56:	e012      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e5e:	e00e      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e60:	2304      	movs	r3, #4
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e66:	e00a      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e6e:	e006      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e76:	e002      	b.n	8004e7e <UART_SetConfig+0x27e>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <UART_SetConfig+0x2e0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	f040 80a8 	bne.w	8004fda <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d834      	bhi.n	8004efc <UART_SetConfig+0x2fc>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <UART_SetConfig+0x298>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004efd 	.word	0x08004efd
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004efd 	.word	0x08004efd
 8004ea8:	08004ecb 	.word	0x08004ecb
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	08004efd 	.word	0x08004efd
 8004eb4:	08004efd 	.word	0x08004efd
 8004eb8:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7ff faf8 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ec2:	e021      	b.n	8004f08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <UART_SetConfig+0x2f8>)
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ec8:	e01e      	b.n	8004f08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7ff fa83 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ed0:	e01a      	b.n	8004f08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ed8:	e016      	b.n	8004f08 <UART_SetConfig+0x308>
 8004eda:	bf00      	nop
 8004edc:	cfff69f3 	.word	0xcfff69f3
 8004ee0:	40008000 	.word	0x40008000
 8004ee4:	40013800 	.word	0x40013800
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40004400 	.word	0x40004400
 8004ef0:	40004800 	.word	0x40004800
 8004ef4:	40004c00 	.word	0x40004c00
 8004ef8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 812a 	beq.w	8005164 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	4a9e      	ldr	r2, [pc, #632]	; (8005190 <UART_SetConfig+0x590>)
 8004f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d305      	bcc.n	8004f40 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d903      	bls.n	8004f48 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f46:	e10d      	b.n	8005164 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	60fa      	str	r2, [r7, #12]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	4a8e      	ldr	r2, [pc, #568]	; (8005190 <UART_SetConfig+0x590>)
 8004f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f6a:	f7fb f955 	bl	8000218 <__aeabi_uldivmod>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	020b      	lsls	r3, r1, #8
 8004f80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f84:	0202      	lsls	r2, r0, #8
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	6849      	ldr	r1, [r1, #4]
 8004f8a:	0849      	lsrs	r1, r1, #1
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	4605      	mov	r5, r0
 8004f92:	eb12 0804 	adds.w	r8, r2, r4
 8004f96:	eb43 0905 	adc.w	r9, r3, r5
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	4693      	mov	fp, r2
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	465b      	mov	r3, fp
 8004fa8:	4640      	mov	r0, r8
 8004faa:	4649      	mov	r1, r9
 8004fac:	f7fb f934 	bl	8000218 <__aeabi_uldivmod>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fbe:	d308      	bcc.n	8004fd2 <UART_SetConfig+0x3d2>
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc6:	d204      	bcs.n	8004fd2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	60da      	str	r2, [r3, #12]
 8004fd0:	e0c8      	b.n	8005164 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fd8:	e0c4      	b.n	8005164 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe2:	d167      	bne.n	80050b4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d828      	bhi.n	800503e <UART_SetConfig+0x43e>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x3f4>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	0800503f 	.word	0x0800503f
 8005004:	0800502f 	.word	0x0800502f
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800503f 	.word	0x0800503f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005018:	f7ff fa4a 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 800501c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800501e:	e014      	b.n	800504a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7ff fa5c 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8005024:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005026:	e010      	b.n	800504a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005028:	4b5a      	ldr	r3, [pc, #360]	; (8005194 <UART_SetConfig+0x594>)
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800502c:	e00d      	b.n	800504a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502e:	f7ff f9d1 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005034:	e009      	b.n	800504a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800503c:	e005      	b.n	800504a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8089 	beq.w	8005164 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	4a4e      	ldr	r2, [pc, #312]	; (8005190 <UART_SetConfig+0x590>)
 8005058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800505c:	461a      	mov	r2, r3
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	fbb3 f3f2 	udiv	r3, r3, r2
 8005064:	005a      	lsls	r2, r3, #1
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	441a      	add	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	2b0f      	cmp	r3, #15
 800507c:	d916      	bls.n	80050ac <UART_SetConfig+0x4ac>
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005084:	d212      	bcs.n	80050ac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f023 030f 	bic.w	r3, r3, #15
 800508e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	b29b      	uxth	r3, r3
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	b29a      	uxth	r2, r3
 800509c:	8bfb      	ldrh	r3, [r7, #30]
 800509e:	4313      	orrs	r3, r2
 80050a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	8bfa      	ldrh	r2, [r7, #30]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	e05b      	b.n	8005164 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050b2:	e057      	b.n	8005164 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d828      	bhi.n	800510e <UART_SetConfig+0x50e>
 80050bc:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0x4c4>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	0800510f 	.word	0x0800510f
 80050d4:	080050ff 	.word	0x080050ff
 80050d8:	0800510f 	.word	0x0800510f
 80050dc:	0800510f 	.word	0x0800510f
 80050e0:	0800510f 	.word	0x0800510f
 80050e4:	08005107 	.word	0x08005107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e8:	f7ff f9e2 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 80050ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050ee:	e014      	b.n	800511a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f0:	f7ff f9f4 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 80050f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050f6:	e010      	b.n	800511a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f8:	4b26      	ldr	r3, [pc, #152]	; (8005194 <UART_SetConfig+0x594>)
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050fc:	e00d      	b.n	800511a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fe:	f7ff f969 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005104:	e009      	b.n	800511a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800510c:	e005      	b.n	800511a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005118:	bf00      	nop
    }

    if (pclk != 0U)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d021      	beq.n	8005164 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <UART_SetConfig+0x590>)
 8005126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800512a:	461a      	mov	r2, r3
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	441a      	add	r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d909      	bls.n	800515e <UART_SetConfig+0x55e>
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d205      	bcs.n	800515e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	b29a      	uxth	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60da      	str	r2, [r3, #12]
 800515c:	e002      	b.n	8005164 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2201      	movs	r2, #1
 8005168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2201      	movs	r2, #1
 8005170:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2200      	movs	r2, #0
 8005178:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005180:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005184:	4618      	mov	r0, r3
 8005186:	3730      	adds	r7, #48	; 0x30
 8005188:	46bd      	mov	sp, r7
 800518a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800518e:	bf00      	nop
 8005190:	080072e8 	.word	0x080072e8
 8005194:	00f42400 	.word	0x00f42400

08005198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01a      	beq.n	80052ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005296:	d10a      	bne.n	80052ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052ec:	f7fd fbfc 	bl	8002ae8 <HAL_GetTick>
 80052f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d10e      	bne.n	800531e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f82f 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e025      	b.n	800536a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b04      	cmp	r3, #4
 800532a:	d10e      	bne.n	800534a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800532c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f819 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e00f      	b.n	800536a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b09c      	sub	sp, #112	; 0x70
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005382:	e0a9      	b.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538a:	f000 80a5 	beq.w	80054d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fd fbab 	bl	8002ae8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800539e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d140      	bne.n	8005426 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053b8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e6      	bne.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	663b      	str	r3, [r7, #96]	; 0x60
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e069      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d051      	beq.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005442:	d149      	bne.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800544c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
 800546e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e6      	bne.n	800544e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	613b      	str	r3, [r7, #16]
   return(result);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	66bb      	str	r3, [r7, #104]	; 0x68
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054a0:	623a      	str	r2, [r7, #32]
 80054a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	69f9      	ldr	r1, [r7, #28]
 80054a6:	6a3a      	ldr	r2, [r7, #32]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e010      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	f43f af46 	beq.w	8005384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3770      	adds	r7, #112	; 0x70
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_UARTEx_DisableFifoMode+0x16>
 8005514:	2302      	movs	r3, #2
 8005516:	e027      	b.n	8005568 <HAL_UARTEx_DisableFifoMode+0x66>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	; 0x24
 8005524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005546:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005588:	2302      	movs	r3, #2
 800558a:	e02d      	b.n	80055e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2224      	movs	r2, #36	; 0x24
 8005598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f84f 	bl	800566c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e02d      	b.n	8005664 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	; 0x24
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f811 	bl	800566c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800568c:	e031      	b.n	80056f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800568e:	2308      	movs	r3, #8
 8005690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005692:	2308      	movs	r3, #8
 8005694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	0e5b      	lsrs	r3, r3, #25
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	0f5b      	lsrs	r3, r3, #29
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056b6:	7bbb      	ldrb	r3, [r7, #14]
 80056b8:	7b3a      	ldrb	r2, [r7, #12]
 80056ba:	4911      	ldr	r1, [pc, #68]	; (8005700 <UARTEx_SetNbDataToProcess+0x94>)
 80056bc:	5c8a      	ldrb	r2, [r1, r2]
 80056be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056c2:	7b3a      	ldrb	r2, [r7, #12]
 80056c4:	490f      	ldr	r1, [pc, #60]	; (8005704 <UARTEx_SetNbDataToProcess+0x98>)
 80056c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	7b7a      	ldrb	r2, [r7, #13]
 80056d8:	4909      	ldr	r1, [pc, #36]	; (8005700 <UARTEx_SetNbDataToProcess+0x94>)
 80056da:	5c8a      	ldrb	r2, [r1, r2]
 80056dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056e0:	7b7a      	ldrb	r2, [r7, #13]
 80056e2:	4908      	ldr	r1, [pc, #32]	; (8005704 <UARTEx_SetNbDataToProcess+0x98>)
 80056e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056f2:	bf00      	nop
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	08007300 	.word	0x08007300
 8005704:	08007308 	.word	0x08007308

08005708 <_ZdlPvj>:
 8005708:	f000 b800 	b.w	800570c <_ZdlPv>

0800570c <_ZdlPv>:
 800570c:	f000 b824 	b.w	8005758 <free>

08005710 <__libc_init_array>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4d0d      	ldr	r5, [pc, #52]	; (8005748 <__libc_init_array+0x38>)
 8005714:	4c0d      	ldr	r4, [pc, #52]	; (800574c <__libc_init_array+0x3c>)
 8005716:	1b64      	subs	r4, r4, r5
 8005718:	10a4      	asrs	r4, r4, #2
 800571a:	2600      	movs	r6, #0
 800571c:	42a6      	cmp	r6, r4
 800571e:	d109      	bne.n	8005734 <__libc_init_array+0x24>
 8005720:	4d0b      	ldr	r5, [pc, #44]	; (8005750 <__libc_init_array+0x40>)
 8005722:	4c0c      	ldr	r4, [pc, #48]	; (8005754 <__libc_init_array+0x44>)
 8005724:	f000 f882 	bl	800582c <_init>
 8005728:	1b64      	subs	r4, r4, r5
 800572a:	10a4      	asrs	r4, r4, #2
 800572c:	2600      	movs	r6, #0
 800572e:	42a6      	cmp	r6, r4
 8005730:	d105      	bne.n	800573e <__libc_init_array+0x2e>
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	f855 3b04 	ldr.w	r3, [r5], #4
 8005738:	4798      	blx	r3
 800573a:	3601      	adds	r6, #1
 800573c:	e7ee      	b.n	800571c <__libc_init_array+0xc>
 800573e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005742:	4798      	blx	r3
 8005744:	3601      	adds	r6, #1
 8005746:	e7f2      	b.n	800572e <__libc_init_array+0x1e>
 8005748:	08007318 	.word	0x08007318
 800574c:	08007318 	.word	0x08007318
 8005750:	08007318 	.word	0x08007318
 8005754:	08007320 	.word	0x08007320

08005758 <free>:
 8005758:	4b02      	ldr	r3, [pc, #8]	; (8005764 <free+0xc>)
 800575a:	4601      	mov	r1, r0
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f000 b80b 	b.w	8005778 <_free_r>
 8005762:	bf00      	nop
 8005764:	20000064 	.word	0x20000064

08005768 <memset>:
 8005768:	4402      	add	r2, r0
 800576a:	4603      	mov	r3, r0
 800576c:	4293      	cmp	r3, r2
 800576e:	d100      	bne.n	8005772 <memset+0xa>
 8005770:	4770      	bx	lr
 8005772:	f803 1b01 	strb.w	r1, [r3], #1
 8005776:	e7f9      	b.n	800576c <memset+0x4>

08005778 <_free_r>:
 8005778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800577a:	2900      	cmp	r1, #0
 800577c:	d044      	beq.n	8005808 <_free_r+0x90>
 800577e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005782:	9001      	str	r0, [sp, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f1a1 0404 	sub.w	r4, r1, #4
 800578a:	bfb8      	it	lt
 800578c:	18e4      	addlt	r4, r4, r3
 800578e:	f000 f83f 	bl	8005810 <__malloc_lock>
 8005792:	4a1e      	ldr	r2, [pc, #120]	; (800580c <_free_r+0x94>)
 8005794:	9801      	ldr	r0, [sp, #4]
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	b933      	cbnz	r3, 80057a8 <_free_r+0x30>
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	6014      	str	r4, [r2, #0]
 800579e:	b003      	add	sp, #12
 80057a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057a4:	f000 b83a 	b.w	800581c <__malloc_unlock>
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d908      	bls.n	80057be <_free_r+0x46>
 80057ac:	6825      	ldr	r5, [r4, #0]
 80057ae:	1961      	adds	r1, r4, r5
 80057b0:	428b      	cmp	r3, r1
 80057b2:	bf01      	itttt	eq
 80057b4:	6819      	ldreq	r1, [r3, #0]
 80057b6:	685b      	ldreq	r3, [r3, #4]
 80057b8:	1949      	addeq	r1, r1, r5
 80057ba:	6021      	streq	r1, [r4, #0]
 80057bc:	e7ed      	b.n	800579a <_free_r+0x22>
 80057be:	461a      	mov	r2, r3
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	b10b      	cbz	r3, 80057c8 <_free_r+0x50>
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	d9fa      	bls.n	80057be <_free_r+0x46>
 80057c8:	6811      	ldr	r1, [r2, #0]
 80057ca:	1855      	adds	r5, r2, r1
 80057cc:	42a5      	cmp	r5, r4
 80057ce:	d10b      	bne.n	80057e8 <_free_r+0x70>
 80057d0:	6824      	ldr	r4, [r4, #0]
 80057d2:	4421      	add	r1, r4
 80057d4:	1854      	adds	r4, r2, r1
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	6011      	str	r1, [r2, #0]
 80057da:	d1e0      	bne.n	800579e <_free_r+0x26>
 80057dc:	681c      	ldr	r4, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	6053      	str	r3, [r2, #4]
 80057e2:	4421      	add	r1, r4
 80057e4:	6011      	str	r1, [r2, #0]
 80057e6:	e7da      	b.n	800579e <_free_r+0x26>
 80057e8:	d902      	bls.n	80057f0 <_free_r+0x78>
 80057ea:	230c      	movs	r3, #12
 80057ec:	6003      	str	r3, [r0, #0]
 80057ee:	e7d6      	b.n	800579e <_free_r+0x26>
 80057f0:	6825      	ldr	r5, [r4, #0]
 80057f2:	1961      	adds	r1, r4, r5
 80057f4:	428b      	cmp	r3, r1
 80057f6:	bf04      	itt	eq
 80057f8:	6819      	ldreq	r1, [r3, #0]
 80057fa:	685b      	ldreq	r3, [r3, #4]
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	bf04      	itt	eq
 8005800:	1949      	addeq	r1, r1, r5
 8005802:	6021      	streq	r1, [r4, #0]
 8005804:	6054      	str	r4, [r2, #4]
 8005806:	e7ca      	b.n	800579e <_free_r+0x26>
 8005808:	b003      	add	sp, #12
 800580a:	bd30      	pop	{r4, r5, pc}
 800580c:	200009dc 	.word	0x200009dc

08005810 <__malloc_lock>:
 8005810:	4801      	ldr	r0, [pc, #4]	; (8005818 <__malloc_lock+0x8>)
 8005812:	f000 b809 	b.w	8005828 <__retarget_lock_acquire_recursive>
 8005816:	bf00      	nop
 8005818:	200009e0 	.word	0x200009e0

0800581c <__malloc_unlock>:
 800581c:	4801      	ldr	r0, [pc, #4]	; (8005824 <__malloc_unlock+0x8>)
 800581e:	f000 b804 	b.w	800582a <__retarget_lock_release_recursive>
 8005822:	bf00      	nop
 8005824:	200009e0 	.word	0x200009e0

08005828 <__retarget_lock_acquire_recursive>:
 8005828:	4770      	bx	lr

0800582a <__retarget_lock_release_recursive>:
 800582a:	4770      	bx	lr

0800582c <_init>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr

08005838 <_fini>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr
