
GAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005488  08005488  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005490  08005490  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b4  20000074  08005514  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08005514  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b0d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ad  00000000  00000000  00033bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  000380a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212a2  00000000  00000000  00038e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153d4  00000000  00000000  0005a12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb74d  00000000  00000000  0006f4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ac4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eec  00000000  00000000  0012ac9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b94 	.word	0x08004b94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	08004b94 	.word	0x08004b94

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_ZN5BlockC1EiiiiPKhii>:
#include "Block.h"
#include"Player.h"
#define true 1
#define false 0

Block::Block(int x, int y,int w,int h,const unsigned char* b,int ml,int mr) {//writing primary data to spike object
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <_ZN5BlockC1EiiiiPKhii+0x4c>)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
	width=w;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	60da      	str	r2, [r3, #12]
	height=h;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	611a      	str	r2, [r3, #16]
    bitmap=b;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
    moveL=ml;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6a3a      	ldr	r2, [r7, #32]
 8000552:	619a      	str	r2, [r3, #24]
    moveR=mr;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000558:	615a      	str	r2, [r3, #20]
}
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	08004bb4 	.word	0x08004bb4

0800056c <_ZN5Block11generateHITEv>:
void Block::generateHIT(){ // it generates the hit box for this block
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	441a      	add	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZN5Block13Display_BlockEv>:
void Block::Display_Block(){
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	b2d8      	uxtb	r0, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	b2d9      	uxtb	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	b2dc      	uxtb	r4, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2501      	movs	r5, #1
 80005d2:	9501      	str	r5, [sp, #4]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4623      	mov	r3, r4
 80005d8:	f001 fb3e 	bl	8001c58 <ssd1306_DrawBitmap>

}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bdb0      	pop	{r4, r5, r7, pc}

080005e4 <_ZN5Block5CheckERiR6Player>:

void Block::Check(int &barrier,Player &player){ // it checks if player hit this block (int b is int barrier for gravitation function)
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
player.generateHIT();
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 fc33 	bl	8000e5c <_ZN6Player11generateHITEv>
generateHIT();
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f7ff ffb8 	bl	800056c <_ZN5Block11generateHITEv>
if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a1a      	ldr	r2, [r3, #32]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	429a      	cmp	r2, r3
 8000606:	dd0e      	ble.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	429a      	cmp	r2, r3
 8000612:	da08      	bge.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800061c:	429a      	cmp	r2, r3
 800061e:	d102      	bne.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
barrier=1; //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
}

if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of block
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6a1a      	ldr	r2, [r3, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	429a      	cmp	r2, r3
 8000630:	db2b      	blt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800063a:	429a      	cmp	r2, r3
 800063c:	db05      	blt.n	800064a <_ZN5Block5CheckERiR6Player+0x66>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	429a      	cmp	r2, r3
 8000648:	dd0b      	ble.n	8000662 <_ZN5Block5CheckERiR6Player+0x7e>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	429a      	cmp	r2, r3
 8000654:	dc19      	bgt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065e:	429a      	cmp	r2, r3
 8000660:	dd13      	ble.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a1a      	ldr	r2, [r3, #32]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066a:	429a      	cmp	r2, r3
 800066c:	da0d      	bge.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60da      	str	r2, [r3, #12]

  if(is_block_moving==true){//because of this "if" moving block can move the moving player
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d104      	bne.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60da      	str	r2, [r3, #12]
  }

}

if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of block
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	429a      	cmp	r2, r3
 8000694:	dc2b      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069e:	429a      	cmp	r2, r3
 80006a0:	db05      	blt.n	80006ae <_ZN5Block5CheckERiR6Player+0xca>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dd0b      	ble.n	80006c6 <_ZN5Block5CheckERiR6Player+0xe2>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dc19      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dd13      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	69da      	ldr	r2, [r3, #28]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6a1b      	ldr	r3, [r3, #32]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dd0d      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]

 if(is_block_moving==true){//because of this "if" moving block can move the moving player
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d104      	bne.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60da      	str	r2, [r3, #12]
 }

 }
//TODO write function for hiting bottom of block
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZN5Block10Move_BlockEiiRiR6Player>:

void Block:: Move_Block(int point_A,int point_B,int &barrier,Player &player){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
    is_block_moving=true;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
	if(moveR==true){   //moving the block form point A to point B
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d104      	bne.n	800071c <_ZN5Block10Move_BlockEiiRiR6Player+0x26>
	   pos_x++;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	605a      	str	r2, [r3, #4]
	  }
	if(moveL==true){   //moving the block form point B to point A
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d104      	bne.n	800072e <_ZN5Block10Move_BlockEiiRiR6Player+0x38>
	   pos_x--;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	605a      	str	r2, [r3, #4]
	  }
	if(pos_x==point_A){//check if block hit the point_A
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	429a      	cmp	r2, r3
 8000736:	d105      	bne.n	8000744 <_ZN5Block10Move_BlockEiiRiR6Player+0x4e>
	   moveL=false;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
	   moveR=true;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
	  }
	if(RHIT==point_B){//check if block hit the ponit_B
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	d105      	bne.n	800075a <_ZN5Block10Move_BlockEiiRiR6Player+0x64>
	   moveL=true;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
	   moveR=false;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
 }
	//----moving character-----// /*<-- the player can ride on block (be on him and move with him without doing anything)*/
	player.generateHIT();
 800075a:	69b8      	ldr	r0, [r7, #24]
 800075c:	f000 fb7e 	bl	8000e5c <_ZN6Player11generateHITEv>
	generateHIT();
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff ff03 	bl	800056c <_ZN5Block11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	6a1a      	ldr	r2, [r3, #32]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	429a      	cmp	r2, r3
 8000770:	dd20      	ble.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	429a      	cmp	r2, r3
 800077c:	da1a      	bge.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	429a      	cmp	r2, r3
 8000788:	d114      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	barrier=1;  //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	if(moveR==true){
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d104      	bne.n	80007a2 <_ZN5Block10Move_BlockEiiRiR6Player+0xac>
		player.pos_x++;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	60da      	str	r2, [r3, #12]
	}
	if(moveL==true){
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d104      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	    player.pos_x--;
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	60da      	str	r2, [r3, #12]
	}
  }
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZN5Block15Change_positionEii>:
void Block::Change_position(int x,int y){
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	pos_x=x;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	605a      	str	r2, [r3, #4]
	pos_y=y;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_ZN5BlockD1Ev>:
Block::~Block() {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <_ZN5BlockD1Ev+0x1c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	08004bb4 	.word	0x08004bb4

08000800 <_ZN5BlockD0Ev>:
Block::~Block() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
}
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ffe9 	bl	80007e0 <_ZN5BlockD1Ev>
 800080e:	2134      	movs	r1, #52	; 0x34
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f004 f92d 	bl	8004a70 <_ZdlPvj>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_ZN4CoinC1EiiiiPKhi>:
#include <Coin.h>
#define true 1
#define false 0


Coin::Coin(int x,int y,int w,int h,const unsigned char* b,int icl){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <_ZN4CoinC1EiiiiPKhi+0x48>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	609a      	str	r2, [r3, #8]
	pos_y=y;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	60da      	str	r2, [r3, #12]
	width=w;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	611a      	str	r2, [r3, #16]
	height=h;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	615a      	str	r2, [r3, #20]
	bitmap=b;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
	is_coin_alive=icl;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a3a      	ldr	r2, [r7, #32]
 8000856:	605a      	str	r2, [r3, #4]

}
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	08004bc4 	.word	0x08004bc4

0800086c <_ZN4Coin5CheckER6Player>:

void Coin::Check(Player &player){//checking if player(boxi) grab this coin
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
if(is_coin_alive==true){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d177      	bne.n	800096e <_ZN4Coin5CheckER6Player+0x102>
	player.generateHIT();
 800087e:	6838      	ldr	r0, [r7, #0]
 8000880:	f000 faec 	bl	8000e5c <_ZN6Player11generateHITEv>
	generateHIT();
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 f876 	bl	8000976 <_ZN4Coin11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	6a1a      	ldr	r2, [r3, #32]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	429a      	cmp	r2, r3
 8000894:	dd13      	ble.n	80008be <_ZN4Coin5CheckER6Player+0x52>
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	69da      	ldr	r2, [r3, #28]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	429a      	cmp	r2, r3
 80008a0:	da0d      	bge.n	80008be <_ZN4Coin5CheckER6Player+0x52>
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6a1b      	ldr	r3, [r3, #32]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d107      	bne.n	80008be <_ZN4Coin5CheckER6Player+0x52>
	    player.Player_coins++;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	609a      	str	r2, [r3, #8]
	   is_coin_alive=false;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of coin
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	6a1a      	ldr	r2, [r3, #32]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	db25      	blt.n	8000916 <_ZN4Coin5CheckER6Player+0xaa>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6a1b      	ldr	r3, [r3, #32]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	db05      	blt.n	80008e2 <_ZN4Coin5CheckER6Player+0x76>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	429a      	cmp	r2, r3
 80008e0:	dd0b      	ble.n	80008fa <_ZN4Coin5CheckER6Player+0x8e>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ea:	429a      	cmp	r2, r3
 80008ec:	dc13      	bgt.n	8000916 <_ZN4Coin5CheckER6Player+0xaa>
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6a1b      	ldr	r3, [r3, #32]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dd0d      	ble.n	8000916 <_ZN4Coin5CheckER6Player+0xaa>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	6a1a      	ldr	r2, [r3, #32]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	429a      	cmp	r2, r3
 8000904:	da07      	bge.n	8000916 <_ZN4Coin5CheckER6Player+0xaa>
	    player.Player_coins++;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	609a      	str	r2, [r3, #8]
	    is_coin_alive=false;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of coin
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	69da      	ldr	r2, [r3, #28]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	429a      	cmp	r2, r3
 8000920:	dc25      	bgt.n	800096e <_ZN4Coin5CheckER6Player+0x102>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	429a      	cmp	r2, r3
 800092c:	db05      	blt.n	800093a <_ZN4Coin5CheckER6Player+0xce>
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	429a      	cmp	r2, r3
 8000938:	dd0b      	ble.n	8000952 <_ZN4Coin5CheckER6Player+0xe6>
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000942:	429a      	cmp	r2, r3
 8000944:	dc13      	bgt.n	800096e <_ZN4Coin5CheckER6Player+0x102>
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	429a      	cmp	r2, r3
 8000950:	dd0d      	ble.n	800096e <_ZN4Coin5CheckER6Player+0x102>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	429a      	cmp	r2, r3
 800095c:	dd07      	ble.n	800096e <_ZN4Coin5CheckER6Player+0x102>
	    player.Player_coins++;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	609a      	str	r2, [r3, #8]
	    is_coin_alive=false;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]

	 }
}
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_ZN4Coin11generateHITEv>:

void Coin::generateHIT(){ //generates hit box of coin
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	619a      	str	r2, [r3, #24]
	RHIT=pos_x+width;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	441a      	add	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	61da      	str	r2, [r3, #28]
	THIT=pos_y;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	621a      	str	r2, [r3, #32]
	BHIT=pos_y+height;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	441a      	add	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <_ZN4Coin12Display_CoinEv>:

void Coin::Display_Coin(){//if coin is alive can be displayed
 80009b6:	b5b0      	push	{r4, r5, r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af02      	add	r7, sp, #8
 80009bc:	6078      	str	r0, [r7, #4]
	if(is_coin_alive==true){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d113      	bne.n	80009ee <_ZN4Coin12Display_CoinEv+0x38>
		ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	b2d8      	uxtb	r0, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	b2d9      	uxtb	r1, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	b2dc      	uxtb	r4, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2501      	movs	r5, #1
 80009e4:	9501      	str	r5, [sp, #4]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	4623      	mov	r3, r4
 80009ea:	f001 f935 	bl	8001c58 <ssd1306_DrawBitmap>
	}
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080009f8 <_ZN4CoinD1Ev>:
void Coin::Change_position(int x,int y){//repositioning
	pos_x=x;
	pos_y=y;
}
Coin::~Coin() {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <_ZN4CoinD1Ev+0x1c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	08004bc4 	.word	0x08004bc4

08000a18 <_ZN4CoinD0Ev>:
Coin::~Coin() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
}
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ffe9 	bl	80009f8 <_ZN4CoinD1Ev>
 8000a26:	212c      	movs	r1, #44	; 0x2c
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f004 f821 	bl	8004a70 <_ZdlPvj>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_ZN3MapC1EPKhiiii>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Map.h>

Map::Map(const unsigned char* b ,int w ,int h, int x, int y){
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <_ZN3MapC1EPKhiiii+0x40>)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	609a      	str	r2, [r3, #8]
	width=w;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	60da      	str	r2, [r3, #12]
	height=h;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	611a      	str	r2, [r3, #16]
	bitmap=b;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	615a      	str	r2, [r3, #20]
}
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	08004bd4 	.word	0x08004bd4

08000a7c <_ZN3Map11Display_mapEv>:
void Map::Display_map(){
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	6078      	str	r0, [r7, #4]
	//ssd1306_Fill(Black);
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height,White);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	b2d8      	uxtb	r0, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	b2d9      	uxtb	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695a      	ldr	r2, [r3, #20]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	b2dc      	uxtb	r4, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2501      	movs	r5, #1
 8000aa2:	9501      	str	r5, [sp, #4]
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	f001 f8d6 	bl	8001c58 <ssd1306_DrawBitmap>
    //ssd1306_UpdateScreen();
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}

08000ab4 <_ZN3MapD1Ev>:
Map::~Map() {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <_ZN3MapD1Ev+0x1c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	08004bd4 	.word	0x08004bd4

08000ad4 <_ZN3MapD0Ev>:
Map::~Map() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
}
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ffe9 	bl	8000ab4 <_ZN3MapD1Ev>
 8000ae2:	2118      	movs	r1, #24
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f003 ffc3 	bl	8004a70 <_ZdlPvj>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZN3MobC1EiiiiiPKhii>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>
#include <Mob.h>

Mob::Mob(int x,int y,int is_al,int w,int h,const unsigned char* b,int ml,int mr){
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <_ZN3MobC1EiiiiiPKhii+0x54>)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	60da      	str	r2, [r3, #12]

	is_mob_alive=is_al;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	605a      	str	r2, [r3, #4]
	width=w;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	611a      	str	r2, [r3, #16]
	height=h;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	615a      	str	r2, [r3, #20]
	bitmap=b;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6a3a      	ldr	r2, [r7, #32]
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
	moveL=ml;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b30:	61da      	str	r2, [r3, #28]
	moveR=mr;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b36:	619a      	str	r2, [r3, #24]
}
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	08004be4 	.word	0x08004be4

08000b4c <_ZN3Mob11generateHITEv>:

void Mob::generateHIT(){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	441a      	add	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	441a      	add	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_ZN3Mob5checkER6Player>:

void Mob::check(Player &player){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
generateHIT();
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffd8 	bl	8000b4c <_ZN3Mob11generateHITEv>
player.generateHIT();
 8000b9c:	6838      	ldr	r0, [r7, #0]
 8000b9e:	f000 f95d 	bl	8000e5c <_ZN6Player11generateHITEv>
if(is_mob_alive==1){
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d143      	bne.n	8000c32 <_ZN3Mob5checkER6Player+0xa6>

if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){//if player hit mob's head mob dies
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	6a1a      	ldr	r2, [r3, #32]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dd0e      	ble.n	8000bd4 <_ZN3Mob5checkER6Player+0x48>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	da08      	bge.n	8000bd4 <_ZN3Mob5checkER6Player+0x48>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d102      	bne.n	8000bd4 <_ZN3Mob5checkER6Player+0x48>
  is_mob_alive=0;//Mob dies
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]


if((player.LHIT<=RHIT)&&(player.BHIT>=BHIT)&&(player.BHIT<=THIT)){// if player hit the right side of Mob
  player.Player_live--;//player is loosing his hearts
  }*/
if((player.RHIT==LHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){//if player hit left side of Mob
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	6a1a      	ldr	r2, [r3, #32]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d110      	bne.n	8000c02 <_ZN3Mob5checkER6Player+0x76>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	429a      	cmp	r2, r3
 8000bea:	db0a      	blt.n	8000c02 <_ZN3Mob5checkER6Player+0x76>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dc04      	bgt.n	8000c02 <_ZN3Mob5checkER6Player+0x76>
  player.Player_live--;//player is loosing his hearts
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	605a      	str	r2, [r3, #4]
}


if((player.LHIT==RHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){// if player hit the right side of Mob
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	69da      	ldr	r2, [r3, #28]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d114      	bne.n	8000c38 <_ZN3Mob5checkER6Player+0xac>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	429a      	cmp	r2, r3
 8000c18:	db0e      	blt.n	8000c38 <_ZN3Mob5checkER6Player+0xac>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dc08      	bgt.n	8000c38 <_ZN3Mob5checkER6Player+0xac>
  player.Player_live--;//player is loosing his hearts
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	1e5a      	subs	r2, r3, #1
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 }
else{
   pos_y=100;
   //throwing body of dead Mob out of the map
}
}
 8000c30:	e002      	b.n	8000c38 <_ZN3Mob5checkER6Player+0xac>
   pos_y=100;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2264      	movs	r2, #100	; 0x64
 8000c36:	60da      	str	r2, [r3, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZN3Mob8Move_mobEii>:

void Mob::Move_mob(int point_A, int point_B){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
	generateHIT();
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff ff7d 	bl	8000b4c <_ZN3Mob11generateHITEv>
	if(is_mob_alive==1){
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d127      	bne.n	8000caa <_ZN3Mob8Move_mobEii+0x6a>
	if(moveR==true){   //moving  Mob form point A to point B
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d104      	bne.n	8000c6c <_ZN3Mob8Move_mobEii+0x2c>
		   pos_x++;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	609a      	str	r2, [r3, #8]
		  }
		if(moveL==true){   //moving Mob form point B to point A
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d104      	bne.n	8000c7e <_ZN3Mob8Move_mobEii+0x3e>
		   pos_x--;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	609a      	str	r2, [r3, #8]
		  }
		if(pos_x==point_A){//check if Mob hit the point_A
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d105      	bne.n	8000c94 <_ZN3Mob8Move_mobEii+0x54>
		   moveL=false;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
		   moveR=true;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2201      	movs	r2, #1
 8000c92:	619a      	str	r2, [r3, #24]
		  }
		if(RHIT==point_B){//check if Mob hit the ponit_B
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d105      	bne.n	8000caa <_ZN3Mob8Move_mobEii+0x6a>
		   moveL=true;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	61da      	str	r2, [r3, #28]
		   moveR=false;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
          }
	}
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZN3Mob11Display_mobEv>:
void Mob::Display_mob(){
 8000cb2:	b5b0      	push	{r4, r5, r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af02      	add	r7, sp, #8
 8000cb8:	6078      	str	r0, [r7, #4]
	if(is_mob_alive==1){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d113      	bne.n	8000cea <_ZN3Mob11Display_mobEv+0x38>
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	b2d8      	uxtb	r0, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	b2d9      	uxtb	r1, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	b2dc      	uxtb	r4, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2501      	movs	r5, #1
 8000ce0:	9501      	str	r5, [sp, #4]
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4623      	mov	r3, r4
 8000ce6:	f000 ffb7 	bl	8001c58 <ssd1306_DrawBitmap>
	}
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000cf4 <_ZN3MobD1Ev>:
Mob::~Mob() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <_ZN3MobD1Ev+0x1c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	08004be4 	.word	0x08004be4

08000d14 <_ZN3MobD0Ev>:
Mob::~Mob() {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
}
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ffe9 	bl	8000cf4 <_ZN3MobD1Ev>
 8000d22:	2134      	movs	r1, #52	; 0x34
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f003 fea3 	bl	8004a70 <_ZdlPvj>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_ZN6PlayerC1EiiiiiPKh>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>

Player::Player(int x,int y,int w,int h,int p_l,const unsigned char* b) {//setting values and generating hit box
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <_ZN6PlayerC1EiiiiiPKh+0x48>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	611a      	str	r2, [r3, #16]
	width=w;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	615a      	str	r2, [r3, #20]
	height=h;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	619a      	str	r2, [r3, #24]
	bitmap=b;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	6a3a      	ldr	r2, [r7, #32]
 8000d64:	62da      	str	r2, [r3, #44]	; 0x2c
    Player_live=p_l;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	69fa      	ldr	r2, [r7, #28]
 8000d6a:	605a      	str	r2, [r3, #4]
	generateHIT();
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f000 f875 	bl	8000e5c <_ZN6Player11generateHITEv>
}
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	08004bfc 	.word	0x08004bfc

08000d80 <_ZN6Player14Display_PlayerEv>:
void Player::Display_Player(){ //drawing the player
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	6078      	str	r0, [r7, #4]

	ssd1306_DrawBitmap(pos_x, pos_y, bitmap,width, height, White);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	b2d8      	uxtb	r0, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	b2d9      	uxtb	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	b2dc      	uxtb	r4, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2501      	movs	r5, #1
 8000da6:	9501      	str	r5, [sp, #4]
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4623      	mov	r3, r4
 8000dac:	f000 ff54 	bl	8001c58 <ssd1306_DrawBitmap>

}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bdb0      	pop	{r4, r5, r7, pc}

08000db8 <_ZN6Player21Display_Player_heartsEv>:
void Player::Display_Player_hearts(){//drawing player's hearts
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af02      	add	r7, sp, #8
 8000dbe:	6078      	str	r0, [r7, #4]

	if(Player_live==3){//if player has all lives
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d11d      	bne.n	8000e04 <_ZN6Player21Display_Player_heartsEv+0x4c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	2305      	movs	r3, #5
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2079      	movs	r0, #121	; 0x79
 8000dd8:	f000 ff3e 	bl	8001c58 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000ddc:	2301      	movs	r3, #1
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2305      	movs	r3, #5
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2305      	movs	r3, #5
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	2074      	movs	r0, #116	; 0x74
 8000dec:	f000 ff34 	bl	8001c58 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(111,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	2305      	movs	r3, #5
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2305      	movs	r3, #5
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	206f      	movs	r0, #111	; 0x6f
 8000e00:	f000 ff2a 	bl	8001c58 <ssd1306_DrawBitmap>
	}
	if(Player_live==2){//if player lose one heart
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d113      	bne.n	8000e34 <_ZN6Player21Display_Player_heartsEv+0x7c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	2305      	movs	r3, #5
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2305      	movs	r3, #5
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2079      	movs	r0, #121	; 0x79
 8000e1c:	f000 ff1c 	bl	8001c58 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e20:	2301      	movs	r3, #1
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	2305      	movs	r3, #5
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2305      	movs	r3, #5
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2074      	movs	r0, #116	; 0x74
 8000e30:	f000 ff12 	bl	8001c58 <ssd1306_DrawBitmap>
	}
	if(Player_live==1){//if player lose two hearts
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d109      	bne.n	8000e50 <_ZN6Player21Display_Player_heartsEv+0x98>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	2305      	movs	r3, #5
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2305      	movs	r3, #5
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2079      	movs	r0, #121	; 0x79
 8000e4c:	f000 ff04 	bl	8001c58 <ssd1306_DrawBitmap>

	}

}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	08004bec 	.word	0x08004bec

08000e5c <_ZN6Player11generateHITEv>:
void Player::generateHIT(){ //generating hit box
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	441a      	add	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	441a      	add	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_ZN6PlayerD1Ev>:
Player::~Player() {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <_ZN6PlayerD1Ev+0x1c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	08004bfc 	.word	0x08004bfc

08000ebc <_ZN6PlayerD0Ev>:
Player::~Player() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
}
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffe9 	bl	8000e9c <_ZN6PlayerD1Ev>
 8000eca:	2130      	movs	r1, #48	; 0x30
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f003 fdcf 	bl	8004a70 <_ZdlPvj>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN5SpikeC1EiiiiPKh>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"
#include <Spike.h>

Spike::Spike(int x,int y,int w, int h,const unsigned char* b) {//writing primary data to spike object
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <_ZN5SpikeC1EiiiiPKh+0x40>)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	601a      	str	r2, [r3, #0]
	 pos_x=x;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	605a      	str	r2, [r3, #4]
     pos_y=y;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
   	 width=w;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	60da      	str	r2, [r3, #12]
     height=h;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	611a      	str	r2, [r3, #16]
	 bitmap=b;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	08004c0c 	.word	0x08004c0c

08000f20 <_ZN5Spike11generateHITEv>:

void Spike::generateHIT(){//generating hit box of spike
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	615a      	str	r2, [r3, #20]
	RHIT=pos_x+width;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	441a      	add	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	619a      	str	r2, [r3, #24]
	THIT=pos_y;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	61da      	str	r2, [r3, #28]
	BHIT=pos_y+height;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	441a      	add	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	621a      	str	r2, [r3, #32]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_ZN5Spike5CheckERiR6Player>:

void Spike::Check(int &barrier,Player &player){//reacting on collisions with player
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	player.generateHIT();
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff75 	bl	8000e5c <_ZN6Player11generateHITEv>
	generateHIT();
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff ffd4 	bl	8000f20 <_ZN5Spike11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1a      	ldr	r2, [r3, #32]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dd13      	ble.n	8000fac <_ZN5Spike5CheckERiR6Player+0x4c>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69da      	ldr	r2, [r3, #28]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	da0d      	bge.n	8000fac <_ZN5Spike5CheckERiR6Player+0x4c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d107      	bne.n	8000fac <_ZN5Spike5CheckERiR6Player+0x4c>
	barrier=1; //function turn of our gravitation so we do not fall of this block b is barrier for gravitation
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
	player.Player_live--;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	1e5a      	subs	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of spike
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1a      	ldr	r2, [r3, #32]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	db22      	blt.n	8000ffe <_ZN5Spike5CheckERiR6Player+0x9e>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	db05      	blt.n	8000fd0 <_ZN5Spike5CheckERiR6Player+0x70>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dd0b      	ble.n	8000fe8 <_ZN5Spike5CheckERiR6Player+0x88>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dc10      	bgt.n	8000ffe <_ZN5Spike5CheckERiR6Player+0x9e>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dd0a      	ble.n	8000ffe <_ZN5Spike5CheckERiR6Player+0x9e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1a      	ldr	r2, [r3, #32]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	da04      	bge.n	8000ffe <_ZN5Spike5CheckERiR6Player+0x9e>
	  player.pos_x--;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60da      	str	r2, [r3, #12]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit right side of spike
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	429a      	cmp	r2, r3
 8001008:	dc22      	bgt.n	8001050 <_ZN5Spike5CheckERiR6Player+0xf0>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	429a      	cmp	r2, r3
 8001014:	db05      	blt.n	8001022 <_ZN5Spike5CheckERiR6Player+0xc2>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	429a      	cmp	r2, r3
 8001020:	dd0b      	ble.n	800103a <_ZN5Spike5CheckERiR6Player+0xda>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	429a      	cmp	r2, r3
 800102c:	dc10      	bgt.n	8001050 <_ZN5Spike5CheckERiR6Player+0xf0>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	429a      	cmp	r2, r3
 8001038:	dd0a      	ble.n	8001050 <_ZN5Spike5CheckERiR6Player+0xf0>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69da      	ldr	r2, [r3, #28]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	429a      	cmp	r2, r3
 8001044:	dd04      	ble.n	8001050 <_ZN5Spike5CheckERiR6Player+0xf0>
	 player.pos_x++;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
	 }
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZN5Spike13Display_SpikeEv>:
void Spike::Display_Spike(){//draws spike
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	b2d8      	uxtb	r0, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	b2d9      	uxtb	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	b2dc      	uxtb	r4, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2501      	movs	r5, #1
 800107e:	9501      	str	r5, [sp, #4]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4623      	mov	r3, r4
 8001084:	f000 fde8 	bl	8001c58 <ssd1306_DrawBitmap>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}

08001090 <_ZN5Spike15Change_positionEii>:
void Spike::Change_position(int x,int y){//changes position of spike
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	pos_x=x;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	605a      	str	r2, [r3, #4]
	pos_y=y;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_ZN5SpikeD1Ev>:

Spike::~Spike() {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <_ZN5SpikeD1Ev+0x1c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	08004c0c 	.word	0x08004c0c

080010d4 <_ZN5SpikeD0Ev>:
Spike::~Spike() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
}
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffe9 	bl	80010b4 <_ZN5SpikeD1Ev>
 80010e2:	2128      	movs	r1, #40	; 0x28
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f003 fcc3 	bl	8004a70 <_ZdlPvj>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <MX_GPIO_Init+0xac>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <MX_GPIO_Init+0xac>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_GPIO_Init+0xac>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_GPIO_Init+0xac>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <MX_GPIO_Init+0xac>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_GPIO_Init+0xac>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <MX_GPIO_Init+0xb0>)
 8001142:	f001 fa53 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_Pin;
 8001146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800114a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f001 f8ab 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_Pin|UP_Pin;
 8001162:	2330      	movs	r3, #48	; 0x30
 8001164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <MX_GPIO_Init+0xb0>)
 8001176:	f001 f89f 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800117a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_GPIO_Init+0xb0>)
 8001194:	f001 f890 	bl	80022b8 <HAL_GPIO_Init>

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000400 	.word	0x48000400

080011a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_I2C1_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <MX_I2C1_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_I2C1_Init+0x74>)
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <MX_I2C1_Init+0x7c>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_I2C1_Init+0x74>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <MX_I2C1_Init+0x74>)
 80011e4:	f001 fa1a 	bl	800261c <HAL_I2C_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ee:	f000 fb2a 	bl	8001846 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f2:	2100      	movs	r1, #0
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <MX_I2C1_Init+0x74>)
 80011f6:	f001 fe07 	bl	8002e08 <HAL_I2CEx_ConfigAnalogFilter>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001200:	f000 fb21 	bl	8001846 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_I2C1_Init+0x74>)
 8001208:	f001 fe49 	bl	8002e9e <HAL_I2CEx_ConfigDigitalFilter>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 fb18 	bl	8001846 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000090 	.word	0x20000090
 8001220:	40005400 	.word	0x40005400
 8001224:	10802d9b 	.word	0x10802d9b

08001228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09c      	sub	sp, #112	; 0x70
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	2244      	movs	r2, #68	; 0x44
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fc41 	bl	8004ad0 <memset>
  if(i2cHandle->Instance==I2C1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <HAL_I2C_MspInit+0xe0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d153      	bne.n	8001300 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001258:	2340      	movs	r3, #64	; 0x40
 800125a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f002 fc3f 	bl	8003ae8 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001270:	f000 fae9 	bl	8001846 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_I2C_MspInit+0xe4>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	4a24      	ldr	r2, [pc, #144]	; (800130c <HAL_I2C_MspInit+0xe4>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_I2C_MspInit+0xe4>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_I2C_MspInit+0xe4>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001290:	4a1e      	ldr	r2, [pc, #120]	; (800130c <HAL_I2C_MspInit+0xe4>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_I2C_MspInit+0xe4>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012aa:	2312      	movs	r3, #18
 80012ac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b6:	2304      	movs	r3, #4
 80012b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c4:	f000 fff8 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d8:	2304      	movs	r3, #4
 80012da:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e0:	4619      	mov	r1, r3
 80012e2:	480b      	ldr	r0, [pc, #44]	; (8001310 <HAL_I2C_MspInit+0xe8>)
 80012e4:	f000 ffe8 	bl	80022b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_I2C_MspInit+0xe4>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_I2C_MspInit+0xe4>)
 80012ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f2:	6593      	str	r3, [r2, #88]	; 0x58
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_I2C_MspInit+0xe4>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001300:	bf00      	nop
 8001302:	3770      	adds	r7, #112	; 0x70
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40005400 	.word	0x40005400
 800130c:	40021000 	.word	0x40021000
 8001310:	48000400 	.word	0x48000400

08001314 <_Z4JumpR6PlayerRiS1_>:
void Display_Over_Screen();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void Jump(Player &player,int &jump_height,int &barrier){
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]

	 if((jump_height>0)&&(barrier==true))
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dd1a      	ble.n	800135e <_Z4JumpR6PlayerRiS1_+0x4a>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d116      	bne.n	800135e <_Z4JumpR6PlayerRiS1_+0x4a>
	 {
		player.pos_y--;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	611a      	str	r2, [r3, #16]
	    jump_height--;   /////////////////////////////////////////////////////
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1e5a      	subs	r2, r3, #1
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	601a      	str	r2, [r3, #0]
		player.pos_y--; /* if gravitation is off we can jump on Jump_height */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	611a      	str	r2, [r3, #16]
		jump_height--; /*     in jump we are losing Jump_height             */
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1e5a      	subs	r2, r3, #1
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	601a      	str	r2, [r3, #0]
		barrier=true; /*    when we are jumping gravitation is off          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]
                     /////////////////////////////////////////////////////////
		}
	 if(jump_height==0){
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <_Z4JumpR6PlayerRiS1_+0x58>
		 barrier=false;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
	 }
	 }
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_Z11GravitationR6PlayeriRi>:

/*---------------------gravitation function-----------------------------------*/
	void Gravitation(Player &player,int ground_level,int &barrier){
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]

	  player.generateHIT();//generating actual hit box of player
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f7ff fd69 	bl	8000e5c <_ZN6Player11generateHITEv>

	 if(player.BHIT>=ground_level){
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	429a      	cmp	r2, r3
 8001392:	dc02      	bgt.n	800139a <_Z11GravitationR6PlayeriRi+0x22>
		barrier=true;// if player hit the ground
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
	 }

	if(barrier==false){ // if player is in free air we are falling fastest
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <_Z11GravitationR6PlayeriRi+0x3e>
		player.pos_y++;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	611a      	str	r2, [r3, #16]
		player.pos_y++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	611a      	str	r2, [r3, #16]
	 }
	}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <_Z13Check_buttonsR6Playeri>:

/*-----------checking buttons-----------------*/
	void Check_buttons(Player &player,int barrier){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
		player.generateHIT();//generating actual hit box of player
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fd46 	bl	8000e5c <_ZN6Player11generateHITEv>

		if((HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0)&&(barrier==true))//jumping
 80013d0:	2120      	movs	r1, #32
 80013d2:	4820      	ldr	r0, [pc, #128]	; (8001454 <_Z13Check_buttonsR6Playeri+0x94>)
 80013d4:	f001 f8f2 	bl	80025bc <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d104      	bne.n	80013e8 <_Z13Check_buttonsR6Playeri+0x28>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <_Z13Check_buttonsR6Playeri+0x28>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <_Z13Check_buttonsR6Playeri+0x2a>
 80013e8:	2300      	movs	r3, #0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <_Z13Check_buttonsR6Playeri+0x42>
		{
          if((Jump_height==0)&&(barrier==true)){//checking if player has end his jump
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <_Z13Check_buttonsR6Playeri+0x98>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <_Z13Check_buttonsR6Playeri+0x42>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d102      	bne.n	8001402 <_Z13Check_buttonsR6Playeri+0x42>
        	  Jump_height=18;                   // and if he is on something that he jump of
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <_Z13Check_buttonsR6Playeri+0x98>)
 80013fe:	2212      	movs	r2, #18
 8001400:	601a      	str	r2, [r3, #0]
          }
		}

		if(HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin)==0){ //go into right side
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f001 f8d7 	bl	80025bc <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf0c      	ite	eq
 8001414:	2301      	moveq	r3, #1
 8001416:	2300      	movne	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <_Z13Check_buttonsR6Playeri+0x68>
			player.pos_x++;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	60da      	str	r2, [r3, #12]
		}
		if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin)==0){//go into left side
 8001428:	2110      	movs	r1, #16
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <_Z13Check_buttonsR6Playeri+0x94>)
 800142c:	f001 f8c6 	bl	80025bc <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <_Z13Check_buttonsR6Playeri+0x8a>
			player.pos_x--;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60da      	str	r2, [r3, #12]
		}
		}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	48000400 	.word	0x48000400
 8001458:	2000047c 	.word	0x2000047c

0800145c <_Z19Display_Over_Screenv>:
/*------GAME OVER SCREEN--------*/
	void Display_Over_Screen(){//displaying a 128x64 game over bitmap function
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af02      	add	r7, sp, #8
		ssd1306_Fill(Black);
 8001462:	2000      	movs	r0, #0
 8001464:	f000 fb58 	bl	8001b18 <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, Bitmap_game_over, 128, 64, White);
 8001468:	2301      	movs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <_Z19Display_Over_Screenv+0x34>)
 8001474:	2100      	movs	r1, #0
 8001476:	2000      	movs	r0, #0
 8001478:	f000 fbee 	bl	8001c58 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 800147c:	f000 fb70 	bl	8001b60 <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 8001480:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001484:	f000 fe12 	bl	80020ac <HAL_Delay>
	}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	08004c14 	.word	0x08004c14

08001494 <_Z4Game6PlayerRiS0_>:

/*----------GAME LOOP------------*/
	void Game(Player player,int &barrier,int &Jump_height){//main loop of boxi game
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
	if(player.Player_live>0){//if player is alive
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f340 808a 	ble.w	80015be <_Z4Game6PlayerRiS0_+0x12a>

		//---------DISPLAYING LAST FRAME-----------//
		//displaying all objects//
		  ssd1306_Fill(Black);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 fb34 	bl	8001b18 <ssd1306_Fill>
		  boxi.Display_Player_hearts();
 80014b0:	4846      	ldr	r0, [pc, #280]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 80014b2:	f7ff fc81 	bl	8000db8 <_ZN6Player21Display_Player_heartsEv>
		  map1.Display_map();
 80014b6:	4846      	ldr	r0, [pc, #280]	; (80015d0 <_Z4Game6PlayerRiS0_+0x13c>)
 80014b8:	f7ff fae0 	bl	8000a7c <_ZN3Map11Display_mapEv>
          c1.Display_Coin();
 80014bc:	4845      	ldr	r0, [pc, #276]	; (80015d4 <_Z4Game6PlayerRiS0_+0x140>)
 80014be:	f7ff fa7a 	bl	80009b6 <_ZN4Coin12Display_CoinEv>

		  for(int i=0; i<=9; i++){//displaying blocks
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	dc0c      	bgt.n	80014e6 <_Z4Game6PlayerRiS0_+0x52>
			  B[i].Display_Block();
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2234      	movs	r2, #52	; 0x34
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <_Z4Game6PlayerRiS0_+0x144>)
 80014d6:	4413      	add	r3, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f867 	bl	80005ac <_ZN5Block13Display_BlockEv>
		  for(int i=0; i<=9; i++){//displaying blocks
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	e7ef      	b.n	80014c6 <_Z4Game6PlayerRiS0_+0x32>
		  }

		  for(int i=0; i<=5; i++){//displaying spikes
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b05      	cmp	r3, #5
 80014ee:	dc0d      	bgt.n	800150c <_Z4Game6PlayerRiS0_+0x78>
		      S[i].Display_Spike();
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <_Z4Game6PlayerRiS0_+0x148>)
 80014fc:	4413      	add	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fdaa 	bl	8001058 <_ZN5Spike13Display_SpikeEv>
		  for(int i=0; i<=5; i++){//displaying spikes
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	3301      	adds	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	e7ee      	b.n	80014ea <_Z4Game6PlayerRiS0_+0x56>
		   }

		  m1.Display_mob();//displaying mob
 800150c:	4834      	ldr	r0, [pc, #208]	; (80015e0 <_Z4Game6PlayerRiS0_+0x14c>)
 800150e:	f7ff fbd0 	bl	8000cb2 <_ZN3Mob11Display_mobEv>

		  boxi.Display_Player();//displaying boxi
 8001512:	482e      	ldr	r0, [pc, #184]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 8001514:	f7ff fc34 	bl	8000d80 <_ZN6Player14Display_PlayerEv>

		  //updating the screen//
		  ssd1306_UpdateScreen();
 8001518:	f000 fb22 	bl	8001b60 <ssd1306_UpdateScreen>

		  //----------MOVING BLOCKS------------------//
		  B[7].Move_Block(81, 117, barrier,boxi);
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2275      	movs	r2, #117	; 0x75
 8001524:	2151      	movs	r1, #81	; 0x51
 8001526:	482f      	ldr	r0, [pc, #188]	; (80015e4 <_Z4Game6PlayerRiS0_+0x150>)
 8001528:	f7ff f8e5 	bl	80006f6 <_ZN5Block10Move_BlockEiiRiR6Player>

		  //----------MOVING MOBS-------------------//
		  m1.Move_mob(83, 116);
 800152c:	2274      	movs	r2, #116	; 0x74
 800152e:	2153      	movs	r1, #83	; 0x53
 8001530:	482b      	ldr	r0, [pc, #172]	; (80015e0 <_Z4Game6PlayerRiS0_+0x14c>)
 8001532:	f7ff fb85 	bl	8000c40 <_ZN3Mob8Move_mobEii>

		  //--------CHECKING BARRIERS----------------//
		  c1.Check(boxi);
 8001536:	4925      	ldr	r1, [pc, #148]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 8001538:	4826      	ldr	r0, [pc, #152]	; (80015d4 <_Z4Game6PlayerRiS0_+0x140>)
 800153a:	f7ff f997 	bl	800086c <_ZN4Coin5CheckER6Player>
		  m1.check(boxi);
 800153e:	4923      	ldr	r1, [pc, #140]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 8001540:	4827      	ldr	r0, [pc, #156]	; (80015e0 <_Z4Game6PlayerRiS0_+0x14c>)
 8001542:	f7ff fb23 	bl	8000b8c <_ZN3Mob5checkER6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b05      	cmp	r3, #5
 800154e:	dc0f      	bgt.n	8001570 <_Z4Game6PlayerRiS0_+0xdc>
		  	 S[i].Check(barrier, boxi);
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4a20      	ldr	r2, [pc, #128]	; (80015dc <_Z4Game6PlayerRiS0_+0x148>)
 800155c:	4413      	add	r3, r2
 800155e:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fcfc 	bl	8000f60 <_ZN5Spike5CheckERiR6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e7ec      	b.n	800154a <_Z4Game6PlayerRiS0_+0xb6>
		  }


		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	2b09      	cmp	r3, #9
 8001578:	dc0e      	bgt.n	8001598 <_Z4Game6PlayerRiS0_+0x104>
		  	B[i].Check(barrier, boxi);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	2234      	movs	r2, #52	; 0x34
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <_Z4Game6PlayerRiS0_+0x144>)
 8001584:	4413      	add	r3, r2
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f82a 	bl	80005e4 <_ZN5Block5CheckERiR6Player>
		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	3301      	adds	r3, #1
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	e7ed      	b.n	8001574 <_Z4Game6PlayerRiS0_+0xe0>
		  }

		  //----------GRAVITATION FUNCTION----------//
		  Gravitation(boxi, ground_level,barrier);
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_Z4Game6PlayerRiS0_+0x154>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	4619      	mov	r1, r3
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 80015a2:	f7ff fee9 	bl	8001378 <_Z11GravitationR6PlayeriRi>

		  //--------BUTTONS CHECKING ---------------//
	      Check_buttons(boxi,barrier);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 80015ae:	f7ff ff07 	bl	80013c0 <_Z13Check_buttonsR6Playeri>

	      //----------JUMPING FUNCTION--------------//
	      Jump(boxi,Jump_height,barrier);
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <_Z4Game6PlayerRiS0_+0x138>)
 80015b8:	f7ff feac 	bl	8001314 <_Z4JumpR6PlayerRiS1_>
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //i am turning it on for tests but game will go faster without it
	}
	else {
		Display_Over_Screen();
	}
}
 80015bc:	e001      	b.n	80015c2 <_Z4Game6PlayerRiS0_+0x12e>
		Display_Over_Screen();
 80015be:	f7ff ff4d 	bl	800145c <_Z19Display_Over_Screenv>
}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000f4 	.word	0x200000f4
 80015d0:	200000dc 	.word	0x200000dc
 80015d4:	20000450 	.word	0x20000450
 80015d8:	20000124 	.word	0x20000124
 80015dc:	20000360 	.word	0x20000360
 80015e0:	2000032c 	.word	0x2000032c
 80015e4:	20000290 	.word	0x20000290
 80015e8:	20000000 	.word	0x20000000

080015ec <_ZN6PlayerC1ERKS_>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#ifndef INC_PLAYER_H_
#define INC_PLAYER_H_

class Player {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <_ZN6PlayerC1ERKS_+0x78>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	699a      	ldr	r2, [r3, #24]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	61da      	str	r2, [r3, #28]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	621a      	str	r2, [r3, #32]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	08004bfc 	.word	0x08004bfc

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166e:	f000 fcac 	bl	8001fca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001672:	f000 f893 	bl	800179c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001676:	f7ff fd3d 	bl	80010f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800167a:	f000 fbd9 	bl	8001e30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800167e:	f7ff fd93 	bl	80011a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  //Initialize  of libraries//
  	  ssd1306_Init();
 8001682:	f000 f9df 	bl	8001a44 <ssd1306_Init>

  	  //fill black the display
  	  ssd1306_Fill(Black);
 8001686:	2000      	movs	r0, #0
 8001688:	f000 fa46 	bl	8001b18 <ssd1306_Fill>
  	  ssd1306_UpdateScreen();
 800168c:	f000 fa68 	bl	8001b60 <ssd1306_UpdateScreen>
     //--------BLOCKS------------//          //-----POSITIONING OBJECTS-----///
  	  B[0].Change_position(1,52);
 8001690:	2234      	movs	r2, #52	; 0x34
 8001692:	2101      	movs	r1, #1
 8001694:	482e      	ldr	r0, [pc, #184]	; (8001750 <main+0xe8>)
 8001696:	f7ff f891 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[1].Change_position(11,52);
 800169a:	2234      	movs	r2, #52	; 0x34
 800169c:	210b      	movs	r1, #11
 800169e:	482d      	ldr	r0, [pc, #180]	; (8001754 <main+0xec>)
 80016a0:	f7ff f88c 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[2].Change_position(21,52);
 80016a4:	2234      	movs	r2, #52	; 0x34
 80016a6:	2115      	movs	r1, #21
 80016a8:	482b      	ldr	r0, [pc, #172]	; (8001758 <main+0xf0>)
 80016aa:	f7ff f887 	bl	80007bc <_ZN5Block15Change_positionEii>

  	  B[3].Change_position(41,42);
 80016ae:	222a      	movs	r2, #42	; 0x2a
 80016b0:	2129      	movs	r1, #41	; 0x29
 80016b2:	482a      	ldr	r0, [pc, #168]	; (800175c <main+0xf4>)
 80016b4:	f7ff f882 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[4].Change_position(41,52);
 80016b8:	2234      	movs	r2, #52	; 0x34
 80016ba:	2129      	movs	r1, #41	; 0x29
 80016bc:	4828      	ldr	r0, [pc, #160]	; (8001760 <main+0xf8>)
 80016be:	f7ff f87d 	bl	80007bc <_ZN5Block15Change_positionEii>

  	  B[5].Change_position(71,42);
 80016c2:	222a      	movs	r2, #42	; 0x2a
 80016c4:	2147      	movs	r1, #71	; 0x47
 80016c6:	4827      	ldr	r0, [pc, #156]	; (8001764 <main+0xfc>)
 80016c8:	f7ff f878 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[6].Change_position(71,52);
 80016cc:	2234      	movs	r2, #52	; 0x34
 80016ce:	2147      	movs	r1, #71	; 0x47
 80016d0:	4825      	ldr	r0, [pc, #148]	; (8001768 <main+0x100>)
 80016d2:	f7ff f873 	bl	80007bc <_ZN5Block15Change_positionEii>

  	  B[7].Change_position(91,42);
 80016d6:	222a      	movs	r2, #42	; 0x2a
 80016d8:	215b      	movs	r1, #91	; 0x5b
 80016da:	4824      	ldr	r0, [pc, #144]	; (800176c <main+0x104>)
 80016dc:	f7ff f86e 	bl	80007bc <_ZN5Block15Change_positionEii>

  	  B[8].Change_position(117,42);
 80016e0:	222a      	movs	r2, #42	; 0x2a
 80016e2:	2175      	movs	r1, #117	; 0x75
 80016e4:	4822      	ldr	r0, [pc, #136]	; (8001770 <main+0x108>)
 80016e6:	f7ff f869 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[9].Change_position(117,52);
 80016ea:	2234      	movs	r2, #52	; 0x34
 80016ec:	2175      	movs	r1, #117	; 0x75
 80016ee:	4821      	ldr	r0, [pc, #132]	; (8001774 <main+0x10c>)
 80016f0:	f7ff f864 	bl	80007bc <_ZN5Block15Change_positionEii>

  	 //--------SPIKES--------------//
  	  S[0].Change_position(51, 56);
 80016f4:	2238      	movs	r2, #56	; 0x38
 80016f6:	2133      	movs	r1, #51	; 0x33
 80016f8:	481f      	ldr	r0, [pc, #124]	; (8001778 <main+0x110>)
 80016fa:	f7ff fcc9 	bl	8001090 <_ZN5Spike15Change_positionEii>
  	  S[1].Change_position(56, 56);
 80016fe:	2238      	movs	r2, #56	; 0x38
 8001700:	2138      	movs	r1, #56	; 0x38
 8001702:	481e      	ldr	r0, [pc, #120]	; (800177c <main+0x114>)
 8001704:	f7ff fcc4 	bl	8001090 <_ZN5Spike15Change_positionEii>
  	  S[2].Change_position(61, 56);
 8001708:	2238      	movs	r2, #56	; 0x38
 800170a:	213d      	movs	r1, #61	; 0x3d
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <main+0x118>)
 800170e:	f7ff fcbf 	bl	8001090 <_ZN5Spike15Change_positionEii>
  	  S[3].Change_position(66, 56);
 8001712:	2238      	movs	r2, #56	; 0x38
 8001714:	2142      	movs	r1, #66	; 0x42
 8001716:	481b      	ldr	r0, [pc, #108]	; (8001784 <main+0x11c>)
 8001718:	f7ff fcba 	bl	8001090 <_ZN5Spike15Change_positionEii>
  	  S[4].Change_position(31, 56);
 800171c:	2238      	movs	r2, #56	; 0x38
 800171e:	211f      	movs	r1, #31
 8001720:	4819      	ldr	r0, [pc, #100]	; (8001788 <main+0x120>)
 8001722:	f7ff fcb5 	bl	8001090 <_ZN5Spike15Change_positionEii>
  	  S[5].Change_position(36, 56);
 8001726:	2238      	movs	r2, #56	; 0x38
 8001728:	2124      	movs	r1, #36	; 0x24
 800172a:	4818      	ldr	r0, [pc, #96]	; (800178c <main+0x124>)
 800172c:	f7ff fcb0 	bl	8001090 <_ZN5Spike15Change_positionEii>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Game(boxi,barrier,Jump_height); //Game loop
 8001730:	463b      	mov	r3, r7
 8001732:	4917      	ldr	r1, [pc, #92]	; (8001790 <main+0x128>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff59 	bl	80015ec <_ZN6PlayerC1ERKS_>
 800173a:	463b      	mov	r3, r7
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <main+0x12c>)
 800173e:	4916      	ldr	r1, [pc, #88]	; (8001798 <main+0x130>)
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fea7 	bl	8001494 <_Z4Game6PlayerRiS0_>
 8001746:	463b      	mov	r3, r7
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fba7 	bl	8000e9c <_ZN6PlayerD1Ev>
 800174e:	e7ef      	b.n	8001730 <main+0xc8>
 8001750:	20000124 	.word	0x20000124
 8001754:	20000158 	.word	0x20000158
 8001758:	2000018c 	.word	0x2000018c
 800175c:	200001c0 	.word	0x200001c0
 8001760:	200001f4 	.word	0x200001f4
 8001764:	20000228 	.word	0x20000228
 8001768:	2000025c 	.word	0x2000025c
 800176c:	20000290 	.word	0x20000290
 8001770:	200002c4 	.word	0x200002c4
 8001774:	200002f8 	.word	0x200002f8
 8001778:	20000360 	.word	0x20000360
 800177c:	20000388 	.word	0x20000388
 8001780:	200003b0 	.word	0x200003b0
 8001784:	200003d8 	.word	0x200003d8
 8001788:	20000400 	.word	0x20000400
 800178c:	20000428 	.word	0x20000428
 8001790:	200000f4 	.word	0x200000f4
 8001794:	2000047c 	.word	0x2000047c
 8001798:	20000480 	.word	0x20000480

0800179c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	; 0x50
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0318 	add.w	r3, r7, #24
 80017a6:	2238      	movs	r2, #56	; 0x38
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 f990 	bl	8004ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017be:	2000      	movs	r0, #0
 80017c0:	f001 fbba 	bl	8002f38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ce:	2340      	movs	r3, #64	; 0x40
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d2:	2302      	movs	r3, #2
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d6:	2302      	movs	r3, #2
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017da:	2304      	movs	r3, #4
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017de:	2355      	movs	r3, #85	; 0x55
 80017e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fc44 	bl	8003080 <HAL_RCC_OscConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001808:	f000 f81d 	bl	8001846 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180c:	230f      	movs	r3, #15
 800180e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001810:	2303      	movs	r3, #3
 8001812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2104      	movs	r1, #4
 8001824:	4618      	mov	r0, r3
 8001826:	f001 ff43 	bl	80036b0 <HAL_RCC_ClockConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800183a:	f000 f804 	bl	8001846 <Error_Handler>
  }
}
 800183e:	bf00      	nop
 8001840:	3750      	adds	r7, #80	; 0x50
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184a:	b672      	cpsid	i
}
 800184c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184e:	e7fe      	b.n	800184e <Error_Handler+0x8>

08001850 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af06      	add	r7, sp, #24
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d15e      	bne.n	800191e <_Z41__static_initialization_and_destruction_0ii+0xce>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001866:	4293      	cmp	r3, r2
 8001868:	d159      	bne.n	800191e <_Z41__static_initialization_and_destruction_0ii+0xce>
Map map1(Bitmap_map);
 800186a:	2300      	movs	r3, #0
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	2300      	movs	r3, #0
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2340      	movs	r3, #64	; 0x40
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	4940      	ldr	r1, [pc, #256]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001878:	4840      	ldr	r0, [pc, #256]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800187a:	f7ff f8dd 	bl	8000a38 <_ZN3MapC1EPKhiiii>
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 800187e:	4b40      	ldr	r3, [pc, #256]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2303      	movs	r3, #3
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	2308      	movs	r3, #8
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2308      	movs	r3, #8
 800188c:	2204      	movs	r2, #4
 800188e:	210a      	movs	r1, #10
 8001890:	483c      	ldr	r0, [pc, #240]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001892:	f7ff fa4f 	bl	8000d34 <_ZN6PlayerC1EiiiiiPKh>
Block B[10];
 8001896:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001898:	2409      	movs	r4, #9
 800189a:	461d      	mov	r5, r3
 800189c:	2c00      	cmp	r4, #0
 800189e:	db10      	blt.n	80018c2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80018a0:	2301      	movs	r3, #1
 80018a2:	9303      	str	r3, [sp, #12]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	230a      	movs	r3, #10
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	230a      	movs	r3, #10
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	4628      	mov	r0, r5
 80018b8:	f7fe fe30 	bl	800051c <_ZN5BlockC1EiiiiPKhii>
 80018bc:	3534      	adds	r5, #52	; 0x34
 80018be:	3c01      	subs	r4, #1
 80018c0:	e7ec      	b.n	800189c <_Z41__static_initialization_and_destruction_0ii+0x4c>
Mob m1(95,54);
 80018c2:	2300      	movs	r3, #0
 80018c4:	9304      	str	r3, [sp, #16]
 80018c6:	2301      	movs	r3, #1
 80018c8:	9303      	str	r3, [sp, #12]
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2308      	movs	r3, #8
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	2308      	movs	r3, #8
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	2236      	movs	r2, #54	; 0x36
 80018da:	215f      	movs	r1, #95	; 0x5f
 80018dc:	482d      	ldr	r0, [pc, #180]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80018de:	f7ff f909 	bl	8000af4 <_ZN3MobC1EiiiiiPKhii>
Spike S[6];
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80018e4:	2405      	movs	r4, #5
 80018e6:	461d      	mov	r5, r3
 80018e8:	2c00      	cmp	r4, #0
 80018ea:	db0c      	blt.n	8001906 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	2305      	movs	r3, #5
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2305      	movs	r3, #5
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	4628      	mov	r0, r5
 80018fc:	f7ff faee 	bl	8000edc <_ZN5SpikeC1EiiiiPKh>
 8001900:	3528      	adds	r5, #40	; 0x28
 8001902:	3c01      	subs	r4, #1
 8001904:	e7f0      	b.n	80018e8 <_Z41__static_initialization_and_destruction_0ii+0x98>
Coin c1(119,36);
 8001906:	2301      	movs	r3, #1
 8001908:	9302      	str	r3, [sp, #8]
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2306      	movs	r3, #6
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2306      	movs	r3, #6
 8001914:	2224      	movs	r2, #36	; 0x24
 8001916:	2177      	movs	r1, #119	; 0x77
 8001918:	4822      	ldr	r0, [pc, #136]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800191a:	f7fe ff81 	bl	8000820 <_ZN4CoinC1EiiiiPKhi>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d124      	bne.n	800196e <_Z41__static_initialization_and_destruction_0ii+0x11e>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192a:	4293      	cmp	r3, r2
 800192c:	d11f      	bne.n	800196e <_Z41__static_initialization_and_destruction_0ii+0x11e>
 800192e:	481d      	ldr	r0, [pc, #116]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001930:	f7ff f862 	bl	80009f8 <_ZN4CoinD1Ev>
Spike S[6];
 8001934:	4c1c      	ldr	r4, [pc, #112]	; (80019a8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001938:	429c      	cmp	r4, r3
 800193a:	d005      	beq.n	8001948 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 800193c:	3c28      	subs	r4, #40	; 0x28
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4620      	mov	r0, r4
 8001944:	4798      	blx	r3
 8001946:	e7f6      	b.n	8001936 <_Z41__static_initialization_and_destruction_0ii+0xe6>
Mob m1(95,54);
 8001948:	4812      	ldr	r0, [pc, #72]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800194a:	f7ff f9d3 	bl	8000cf4 <_ZN3MobD1Ev>
Block B[10];
 800194e:	4c17      	ldr	r4, [pc, #92]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001952:	429c      	cmp	r4, r3
 8001954:	d005      	beq.n	8001962 <_Z41__static_initialization_and_destruction_0ii+0x112>
 8001956:	3c34      	subs	r4, #52	; 0x34
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4620      	mov	r0, r4
 800195e:	4798      	blx	r3
 8001960:	e7f6      	b.n	8001950 <_Z41__static_initialization_and_destruction_0ii+0x100>
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001964:	f7ff fa9a 	bl	8000e9c <_ZN6PlayerD1Ev>
Map map1(Bitmap_map);
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800196a:	f7ff f8a3 	bl	8000ab4 <_ZN3MapD1Ev>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bdb0      	pop	{r4, r5, r7, pc}
 8001976:	bf00      	nop
 8001978:	08005014 	.word	0x08005014
 800197c:	200000dc 	.word	0x200000dc
 8001980:	08005414 	.word	0x08005414
 8001984:	200000f4 	.word	0x200000f4
 8001988:	20000124 	.word	0x20000124
 800198c:	0800541c 	.word	0x0800541c
 8001990:	08005430 	.word	0x08005430
 8001994:	2000032c 	.word	0x2000032c
 8001998:	20000360 	.word	0x20000360
 800199c:	08005438 	.word	0x08005438
 80019a0:	08005440 	.word	0x08005440
 80019a4:	20000450 	.word	0x20000450
 80019a8:	20000450 	.word	0x20000450
 80019ac:	2000032c 	.word	0x2000032c

080019b0 <_GLOBAL__sub_I_map1>:
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff ff49 	bl	8001850 <_Z41__static_initialization_and_destruction_0ii>
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_GLOBAL__sub_D_map1>:
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff ff41 	bl	8001850 <_Z41__static_initialization_and_destruction_0ii>
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	2301      	movs	r3, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	2200      	movs	r2, #0
 80019fc:	2178      	movs	r1, #120	; 0x78
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <ssd1306_WriteCommand+0x2c>)
 8001a00:	f000 fe9c 	bl	800273c <HAL_I2C_Mem_Write>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000090 	.word	0x20000090

08001a10 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	2178      	movs	r1, #120	; 0x78
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <ssd1306_WriteData+0x30>)
 8001a32:	f000 fe83 	bl	800273c <HAL_I2C_Mem_Write>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000090 	.word	0x20000090

08001a44 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a48:	f7ff ffc2 	bl	80019d0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a4c:	2064      	movs	r0, #100	; 0x64
 8001a4e:	f000 fb2d 	bl	80020ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f96e 	bl	8001d34 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a58:	2020      	movs	r0, #32
 8001a5a:	f7ff ffc1 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff ffbe 	bl	80019e0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a64:	20b0      	movs	r0, #176	; 0xb0
 8001a66:	f7ff ffbb 	bl	80019e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a6a:	20c8      	movs	r0, #200	; 0xc8
 8001a6c:	f7ff ffb8 	bl	80019e0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ffb5 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a76:	2010      	movs	r0, #16
 8001a78:	f7ff ffb2 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a7c:	2040      	movs	r0, #64	; 0x40
 8001a7e:	f7ff ffaf 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a82:	20ff      	movs	r0, #255	; 0xff
 8001a84:	f000 f943 	bl	8001d0e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a88:	20a1      	movs	r0, #161	; 0xa1
 8001a8a:	f7ff ffa9 	bl	80019e0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a8e:	20a6      	movs	r0, #166	; 0xa6
 8001a90:	f7ff ffa6 	bl	80019e0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a94:	20a8      	movs	r0, #168	; 0xa8
 8001a96:	f7ff ffa3 	bl	80019e0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a9a:	203f      	movs	r0, #63	; 0x3f
 8001a9c:	f7ff ffa0 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aa0:	20a4      	movs	r0, #164	; 0xa4
 8001aa2:	f7ff ff9d 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001aa6:	20d3      	movs	r0, #211	; 0xd3
 8001aa8:	f7ff ff9a 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff ff97 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ab2:	20d5      	movs	r0, #213	; 0xd5
 8001ab4:	f7ff ff94 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ab8:	20f0      	movs	r0, #240	; 0xf0
 8001aba:	f7ff ff91 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001abe:	20d9      	movs	r0, #217	; 0xd9
 8001ac0:	f7ff ff8e 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ac4:	2022      	movs	r0, #34	; 0x22
 8001ac6:	f7ff ff8b 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001aca:	20da      	movs	r0, #218	; 0xda
 8001acc:	f7ff ff88 	bl	80019e0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ad0:	2012      	movs	r0, #18
 8001ad2:	f7ff ff85 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ad6:	20db      	movs	r0, #219	; 0xdb
 8001ad8:	f7ff ff82 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001adc:	2020      	movs	r0, #32
 8001ade:	f7ff ff7f 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ae2:	208d      	movs	r0, #141	; 0x8d
 8001ae4:	f7ff ff7c 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ae8:	2014      	movs	r0, #20
 8001aea:	f7ff ff79 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001aee:	2001      	movs	r0, #1
 8001af0:	f000 f920 	bl	8001d34 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f000 f80f 	bl	8001b18 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001afa:	f000 f831 	bl	8001b60 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <ssd1306_Init+0xd0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <ssd1306_Init+0xd0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b0a:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <ssd1306_Init+0xd0>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	711a      	strb	r2, [r3, #4]
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000884 	.word	0x20000884

08001b18 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e00d      	b.n	8001b44 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <ssd1306_Fill+0x1a>
 8001b2e:	2100      	movs	r1, #0
 8001b30:	e000      	b.n	8001b34 <ssd1306_Fill+0x1c>
 8001b32:	21ff      	movs	r1, #255	; 0xff
 8001b34:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <ssd1306_Fill+0x44>)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3301      	adds	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4a:	d3ed      	bcc.n	8001b28 <ssd1306_Fill+0x10>
    }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000484 	.word	0x20000484

08001b60 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	71fb      	strb	r3, [r7, #7]
 8001b6a:	e016      	b.n	8001b9a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	3b50      	subs	r3, #80	; 0x50
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff34 	bl	80019e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff ff31 	bl	80019e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b7e:	2010      	movs	r0, #16
 8001b80:	f7ff ff2e 	bl	80019e0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	01db      	lsls	r3, r3, #7
 8001b88:	4a08      	ldr	r2, [pc, #32]	; (8001bac <ssd1306_UpdateScreen+0x4c>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff3e 	bl	8001a10 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	3301      	adds	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d9e5      	bls.n	8001b6c <ssd1306_UpdateScreen+0xc>
    }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000484 	.word	0x20000484

08001bb0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	71bb      	strb	r3, [r7, #6]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db3d      	blt.n	8001c46 <ssd1306_DrawPixel+0x96>
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	2b3f      	cmp	r3, #63	; 0x3f
 8001bce:	d83a      	bhi.n	8001c46 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001bd0:	797b      	ldrb	r3, [r7, #5]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d11a      	bne.n	8001c0c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bd6:	79fa      	ldrb	r2, [r7, #7]
 8001bd8:	79bb      	ldrb	r3, [r7, #6]
 8001bda:	08db      	lsrs	r3, r3, #3
 8001bdc:	b2d8      	uxtb	r0, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	01db      	lsls	r3, r3, #7
 8001be2:	4413      	add	r3, r2
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <ssd1306_DrawPixel+0xa4>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	b25a      	sxtb	r2, r3
 8001bea:	79bb      	ldrb	r3, [r7, #6]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b259      	sxtb	r1, r3
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	01db      	lsls	r3, r3, #7
 8001c02:	4413      	add	r3, r2
 8001c04:	b2c9      	uxtb	r1, r1
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <ssd1306_DrawPixel+0xa4>)
 8001c08:	54d1      	strb	r1, [r2, r3]
 8001c0a:	e01d      	b.n	8001c48 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c0c:	79fa      	ldrb	r2, [r7, #7]
 8001c0e:	79bb      	ldrb	r3, [r7, #6]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	b2d8      	uxtb	r0, r3
 8001c14:	4603      	mov	r3, r0
 8001c16:	01db      	lsls	r3, r3, #7
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <ssd1306_DrawPixel+0xa4>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	79bb      	ldrb	r3, [r7, #6]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	4013      	ands	r3, r2
 8001c34:	b259      	sxtb	r1, r3
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	4603      	mov	r3, r0
 8001c3a:	01db      	lsls	r3, r3, #7
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b2c9      	uxtb	r1, r1
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <ssd1306_DrawPixel+0xa4>)
 8001c42:	54d1      	strb	r1, [r2, r3]
 8001c44:	e000      	b.n	8001c48 <ssd1306_DrawPixel+0x98>
        return;
 8001c46:	bf00      	nop
    }
}
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000484 	.word	0x20000484

08001c58 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	603a      	str	r2, [r7, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	460b      	mov	r3, r1
 8001c68:	71bb      	strb	r3, [r7, #6]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001c6e:	797b      	ldrb	r3, [r7, #5]
 8001c70:	3307      	adds	r3, #7
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da00      	bge.n	8001c78 <ssd1306_DrawBitmap+0x20>
 8001c76:	3307      	adds	r3, #7
 8001c78:	10db      	asrs	r3, r3, #3
 8001c7a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db3e      	blt.n	8001d06 <ssd1306_DrawBitmap+0xae>
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	2b3f      	cmp	r3, #63	; 0x3f
 8001c8c:	d83b      	bhi.n	8001d06 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73bb      	strb	r3, [r7, #14]
 8001c92:	e033      	b.n	8001cfc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	737b      	strb	r3, [r7, #13]
 8001c98:	e026      	b.n	8001ce8 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 8001c9a:	7b7b      	ldrb	r3, [r7, #13]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	e00d      	b.n	8001cc8 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	7b7a      	ldrb	r2, [r7, #13]
 8001cb8:	08d2      	lsrs	r2, r2, #3
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8001cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da08      	bge.n	8001ce2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	7b7b      	ldrb	r3, [r7, #13]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	7f3a      	ldrb	r2, [r7, #28]
 8001cda:	79b9      	ldrb	r1, [r7, #6]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff67 	bl	8001bb0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001ce2:	7b7b      	ldrb	r3, [r7, #13]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	737b      	strb	r3, [r7, #13]
 8001ce8:	7b7a      	ldrb	r2, [r7, #13]
 8001cea:	797b      	ldrb	r3, [r7, #5]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3d4      	bcc.n	8001c9a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73bb      	strb	r3, [r7, #14]
 8001cf6:	79bb      	ldrb	r3, [r7, #6]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	71bb      	strb	r3, [r7, #6]
 8001cfc:	7bba      	ldrb	r2, [r7, #14]
 8001cfe:	7e3b      	ldrb	r3, [r7, #24]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3c7      	bcc.n	8001c94 <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 8001d04:	e000      	b.n	8001d08 <ssd1306_DrawBitmap+0xb0>
        return;
 8001d06:	bf00      	nop
}
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001d18:	2381      	movs	r3, #129	; 0x81
 8001d1a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fe5e 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fe5a 	bl	80019e0 <ssd1306_WriteCommand>
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d44:	23af      	movs	r3, #175	; 0xaf
 8001d46:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <ssd1306_SetDisplayOn+0x38>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	715a      	strb	r2, [r3, #5]
 8001d4e:	e004      	b.n	8001d5a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d50:	23ae      	movs	r3, #174	; 0xae
 8001d52:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <ssd1306_SetDisplayOn+0x38>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fe3f 	bl	80019e0 <ssd1306_WriteCommand>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000884 	.word	0x20000884

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_MspInit+0x44>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_MspInit+0x44>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6613      	str	r3, [r2, #96]	; 0x60
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_MspInit+0x44>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_MspInit+0x44>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_MspInit+0x44>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MspInit+0x44>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <NMI_Handler+0x4>

08001dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 f934 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e36:	4a23      	ldr	r2, [pc, #140]	; (8001ec4 <MX_USART2_UART_Init+0x94>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e3a:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e78:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e7a:	f002 f825 	bl	8003ec8 <HAL_UART_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e84:	f7ff fcdf 	bl	8001846 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e8c:	f002 fd26 	bl	80048dc <HAL_UARTEx_SetTxFifoThreshold>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e96:	f7ff fcd6 	bl	8001846 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4808      	ldr	r0, [pc, #32]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001e9e:	f002 fd5b 	bl	8004958 <HAL_UARTEx_SetRxFifoThreshold>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ea8:	f7ff fccd 	bl	8001846 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_USART2_UART_Init+0x90>)
 8001eae:	f002 fcdc 	bl	800486a <HAL_UARTEx_DisableFifoMode>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001eb8:	f7ff fcc5 	bl	8001846 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000088c 	.word	0x2000088c
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b09a      	sub	sp, #104	; 0x68
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	2244      	movs	r2, #68	; 0x44
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fdf1 	bl	8004ad0 <memset>
  if(uartHandle->Instance==USART2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <HAL_UART_MspInit+0xa8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d136      	bne.n	8001f66 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 fdef 	bl	8003ae8 <HAL_RCCEx_PeriphCLKConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f10:	f7ff fc99 	bl	8001846 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_UART_MspInit+0xac>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <HAL_UART_MspInit+0xac>)
 8001f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_UART_MspInit+0xac>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_UART_MspInit+0xac>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_UART_MspInit+0xac>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_UART_MspInit+0xac>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001f44:	230c      	movs	r3, #12
 8001f46:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f54:	2307      	movs	r3, #7
 8001f56:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f000 f9a9 	bl	80022b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f66:	bf00      	nop
 8001f68:	3768      	adds	r7, #104	; 0x68
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40004400 	.word	0x40004400
 8001f74:	40021000 	.word	0x40021000

08001f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7e:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f80:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <LoopForever+0xe>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f94:	4c0b      	ldr	r4, [pc, #44]	; (8001fc4 <LoopForever+0x16>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa2:	f7ff ff33 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f002 fd67 	bl	8004a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001faa:	f7ff fb5d 	bl	8001668 <main>

08001fae <LoopForever>:

LoopForever:
    b LoopForever
 8001fae:	e7fe      	b.n	8001fae <LoopForever>
  ldr   r0, =_estack
 8001fb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001fbc:	080054a0 	.word	0x080054a0
  ldr r2, =_sbss
 8001fc0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fc4:	20000928 	.word	0x20000928

08001fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_2_IRQHandler>

08001fca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 f93d 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f80e 	bl	8001ffc <HAL_InitTick>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	e001      	b.n	8001ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fec:	f7ff fec0 	bl	8001d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_InitTick+0x68>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d022      	beq.n	8002056 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_InitTick+0x6c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <HAL_InitTick+0x68>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800201c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f93a 	bl	800229e <HAL_SYSTICK_Config>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10f      	bne.n	8002050 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	d809      	bhi.n	800204a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002036:	2200      	movs	r2, #0
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	f04f 30ff 	mov.w	r0, #4294967295
 800203e:	f000 f914 	bl	800226a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_InitTick+0x70>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e007      	b.n	800205a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e004      	b.n	800205a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000000c 	.word	0x2000000c
 8002068:	20000004 	.word	0x20000004
 800206c:	20000008 	.word	0x20000008

08002070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_IncTick+0x1c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x20>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4413      	add	r3, r2
 800207e:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_IncTick+0x1c>)
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	2000091c 	.word	0x2000091c
 8002090:	2000000c 	.word	0x2000000c

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	2000091c 	.word	0x2000091c

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d004      	beq.n	80020d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_Delay+0x40>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d0:	bf00      	nop
 80020d2:	f7ff ffdf 	bl	8002094 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d8f7      	bhi.n	80020d2 <HAL_Delay+0x26>
  {
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000000c 	.word	0x2000000c

080020f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800211c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f7ff ff8e 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff47 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff5e 	bl	8002138 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff90 	bl	80021a8 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5f 	bl	8002154 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffb2 	bl	8002210 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022c6:	e15a      	b.n	800257e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 814c 	beq.w	8002578 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d005      	beq.n	80022f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d130      	bne.n	800235a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800232e:	2201      	movs	r2, #1
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 0201 	and.w	r2, r3, #1
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b03      	cmp	r3, #3
 8002364:	d017      	beq.n	8002396 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d123      	bne.n	80023ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	6939      	ldr	r1, [r7, #16]
 80023e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0203 	and.w	r2, r3, #3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80a6 	beq.w	8002578 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242c:	4b5b      	ldr	r3, [pc, #364]	; (800259c <HAL_GPIO_Init+0x2e4>)
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	4a5a      	ldr	r2, [pc, #360]	; (800259c <HAL_GPIO_Init+0x2e4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6613      	str	r3, [r2, #96]	; 0x60
 8002438:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_GPIO_Init+0x2e4>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002444:	4a56      	ldr	r2, [pc, #344]	; (80025a0 <HAL_GPIO_Init+0x2e8>)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800246e:	d01f      	beq.n	80024b0 <HAL_GPIO_Init+0x1f8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a4c      	ldr	r2, [pc, #304]	; (80025a4 <HAL_GPIO_Init+0x2ec>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d019      	beq.n	80024ac <HAL_GPIO_Init+0x1f4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <HAL_GPIO_Init+0x2f0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_GPIO_Init+0x1f0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <HAL_GPIO_Init+0x2f4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00d      	beq.n	80024a4 <HAL_GPIO_Init+0x1ec>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a49      	ldr	r2, [pc, #292]	; (80025b0 <HAL_GPIO_Init+0x2f8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <HAL_GPIO_Init+0x1e8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_GPIO_Init+0x1e4>
 8002498:	2305      	movs	r3, #5
 800249a:	e00a      	b.n	80024b2 <HAL_GPIO_Init+0x1fa>
 800249c:	2306      	movs	r3, #6
 800249e:	e008      	b.n	80024b2 <HAL_GPIO_Init+0x1fa>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e006      	b.n	80024b2 <HAL_GPIO_Init+0x1fa>
 80024a4:	2303      	movs	r3, #3
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1fa>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1fa>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1fa>
 80024b0:	2300      	movs	r3, #0
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c2:	4937      	ldr	r1, [pc, #220]	; (80025a0 <HAL_GPIO_Init+0x2e8>)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d0:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_GPIO_Init+0x300>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_GPIO_Init+0x300>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <HAL_GPIO_Init+0x300>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800251e:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <HAL_GPIO_Init+0x300>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_GPIO_Init+0x300>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_GPIO_Init+0x300>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_GPIO_Init+0x300>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_GPIO_Init+0x300>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f ae9d 	bne.w	80022c8 <HAL_GPIO_Init+0x10>
  }
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	48000400 	.word	0x48000400
 80025a8:	48000800 	.word	0x48000800
 80025ac:	48000c00 	.word	0x48000c00
 80025b0:	48001000 	.word	0x48001000
 80025b4:	48001400 	.word	0x48001400
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	887b      	ldrh	r3, [r7, #2]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	e001      	b.n	80025de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002608:	e002      	b.n	8002610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e081      	b.n	8002732 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fdf0 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	e006      	b.n	80026a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d104      	bne.n	80026b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4603      	mov	r3, r0
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	460b      	mov	r3, r1
 8002750:	813b      	strh	r3, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	f040 80f9 	bne.w	8002956 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_I2C_Mem_Write+0x34>
 800276a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0ed      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_I2C_Mem_Write+0x4e>
 8002786:	2302      	movs	r3, #2
 8002788:	e0e6      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002792:	f7ff fc7f 	bl	8002094 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2319      	movs	r3, #25
 800279e:	2201      	movs	r2, #1
 80027a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f955 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0d1      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2221      	movs	r2, #33	; 0x21
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027dc:	88f8      	ldrh	r0, [r7, #6]
 80027de:	893a      	ldrh	r2, [r7, #8]
 80027e0:	8979      	ldrh	r1, [r7, #10]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	4603      	mov	r3, r0
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f8b9 	bl	8002964 <I2C_RequestMemoryWrite>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0a9      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d90e      	bls.n	800282c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	b2da      	uxtb	r2, r3
 800281a:	8979      	ldrh	r1, [r7, #10]
 800281c:	2300      	movs	r3, #0
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fabd 	bl	8002da4 <I2C_TransferConfig>
 800282a:	e00f      	b.n	800284c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	b2da      	uxtb	r2, r3
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 faac 	bl	8002da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f93f 	bl	8002ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e07b      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d034      	beq.n	8002904 <HAL_I2C_Mem_Write+0x1c8>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d130      	bne.n	8002904 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	2200      	movs	r2, #0
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f8d1 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e04d      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2bff      	cmp	r3, #255	; 0xff
 80028c4:	d90e      	bls.n	80028e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	2300      	movs	r3, #0
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa61 	bl	8002da4 <I2C_TransferConfig>
 80028e2:	e00f      	b.n	8002904 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa50 	bl	8002da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d19e      	bne.n	800284c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f91e 	bl	8002b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e01a      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_I2C_Mem_Write+0x224>)
 8002936:	400b      	ands	r3, r1
 8002938:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	fe00e800 	.word	0xfe00e800

08002964 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	460b      	mov	r3, r1
 8002978:	813b      	strh	r3, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	8979      	ldrh	r1, [r7, #10]
 8002984:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <I2C_RequestMemoryWrite+0xa4>)
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fa09 	bl	8002da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	69b9      	ldr	r1, [r7, #24]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f89c 	bl	8002ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e02c      	b.n	8002a00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
 80029b6:	e015      	b.n	80029e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029b8:	893b      	ldrh	r3, [r7, #8]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	69b9      	ldr	r1, [r7, #24]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f882 	bl	8002ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e012      	b.n	8002a00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029da:	893b      	ldrh	r3, [r7, #8]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f830 	bl	8002a54 <I2C_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	80002000 	.word	0x80002000

08002a0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d103      	bne.n	8002a2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d007      	beq.n	8002a48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	619a      	str	r2, [r3, #24]
  }
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a64:	e022      	b.n	8002aac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d01e      	beq.n	8002aac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7ff fb11 	bl	8002094 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d113      	bne.n	8002aac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e00f      	b.n	8002acc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d0cd      	beq.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae0:	e02c      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f870 	bl	8002bcc <I2C_IsErrorOccurred>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e02a      	b.n	8002b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d01e      	beq.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7ff fac9 	bl	8002094 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d113      	bne.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e007      	b.n	8002b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d1cb      	bne.n	8002ae2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b60:	e028      	b.n	8002bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f830 	bl	8002bcc <I2C_IsErrorOccurred>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e026      	b.n	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7ff fa8d 	bl	8002094 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d113      	bne.n	8002bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e007      	b.n	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d1cf      	bne.n	8002b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d075      	beq.n	8002ce4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c00:	e056      	b.n	8002cb0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d052      	beq.n	8002cb0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7ff fa43 	bl	8002094 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <I2C_IsErrorOccurred+0x54>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d147      	bne.n	8002cb0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c42:	d12e      	bne.n	8002ca2 <I2C_IsErrorOccurred+0xd6>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c4a:	d02a      	beq.n	8002ca2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d027      	beq.n	8002ca2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c60:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c62:	f7ff fa17 	bl	8002094 <HAL_GetTick>
 8002c66:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c68:	e01b      	b.n	8002ca2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c6a:	f7ff fa13 	bl	8002094 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b19      	cmp	r3, #25
 8002c76:	d914      	bls.n	8002ca2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d1dc      	bne.n	8002c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d003      	beq.n	8002cc6 <I2C_IsErrorOccurred+0xfa>
 8002cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d09d      	beq.n	8002c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01c      	beq.n	8002d94 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff fe56 	bl	8002a0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <I2C_IsErrorOccurred+0x1d4>)
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	fe00e800 	.word	0xfe00e800

08002da4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	817b      	strh	r3, [r7, #10]
 8002db2:	4613      	mov	r3, r2
 8002db4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dbc:	7a7b      	ldrb	r3, [r7, #9]
 8002dbe:	041b      	lsls	r3, r3, #16
 8002dc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dc4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	0d5b      	lsrs	r3, r3, #21
 8002dde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <I2C_TransferConfig+0x60>)
 8002de4:	430b      	orrs	r3, r1
 8002de6:	43db      	mvns	r3, r3
 8002de8:	ea02 0103 	and.w	r1, r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	03ff63ff 	.word	0x03ff63ff

08002e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d138      	bne.n	8002e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e032      	b.n	8002e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6819      	ldr	r1, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d139      	bne.n	8002f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e033      	b.n	8002f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2224      	movs	r2, #36	; 0x24
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d141      	bne.n	8002fca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f46:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f52:	d131      	bne.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f54:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	4a46      	ldr	r2, [pc, #280]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f64:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f6c:	4a41      	ldr	r2, [pc, #260]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f74:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2232      	movs	r2, #50	; 0x32
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a3f      	ldr	r2, [pc, #252]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	0c9b      	lsrs	r3, r3, #18
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8a:	e002      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d102      	bne.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f2      	bne.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	d158      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e057      	b.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fc8:	e04d      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d141      	bne.n	8003056 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fde:	d131      	bne.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe0:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2232      	movs	r2, #50	; 0x32
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	0c9b      	lsrs	r3, r3, #18
 8003012:	3301      	adds	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003016:	e002      	b.n	800301e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3b01      	subs	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302a:	d102      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f2      	bne.n	8003018 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d112      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e011      	b.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003054:	e007      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003064:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40007000 	.word	0x40007000
 8003078:	20000004 	.word	0x20000004
 800307c:	431bde83 	.word	0x431bde83

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e306      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d075      	beq.n	800318a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4b97      	ldr	r3, [pc, #604]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	4b94      	ldr	r3, [pc, #592]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0x3e>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_OscConfig+0x44>
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b8d      	ldr	r3, [pc, #564]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05b      	beq.n	8003188 <HAL_RCC_OscConfig+0x108>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d157      	bne.n	8003188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e2e1      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x74>
 80030e6:	4b85      	ldr	r3, [pc, #532]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a84      	ldr	r2, [pc, #528]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7e      	ldr	r2, [pc, #504]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a7b      	ldr	r2, [pc, #492]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 8003118:	4b78      	ldr	r3, [pc, #480]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a77      	ldr	r2, [pc, #476]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b75      	ldr	r3, [pc, #468]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a74      	ldr	r2, [pc, #464]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe ffac 	bl	8002094 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe ffa8 	bl	8002094 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e2a6      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003152:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xc0>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe ff98 	bl	8002094 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe ff94 	bl	8002094 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e292      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317a:	4b60      	ldr	r3, [pc, #384]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0xe8>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d075      	beq.n	8003282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003196:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a0:	4b56      	ldr	r3, [pc, #344]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d102      	bne.n	80031b6 <HAL_RCC_OscConfig+0x136>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_OscConfig+0x13c>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d11f      	bne.n	80031fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_OscConfig+0x154>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e265      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	4946      	ldr	r1, [pc, #280]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031e8:	4b45      	ldr	r3, [pc, #276]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe ff05 	bl	8001ffc <HAL_InitTick>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d043      	beq.n	8003280 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e251      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d023      	beq.n	800324c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3c      	ldr	r2, [pc, #240]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe ff40 	bl	8002094 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7fe ff3c 	bl	8002094 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e23a      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	492d      	ldr	r1, [pc, #180]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
 800324a:	e01a      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe ff1c 	bl	8002094 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003260:	f7fe ff18 	bl	8002094 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e216      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1e0>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d041      	beq.n	8003312 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 8003298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329c:	4a17      	ldr	r2, [pc, #92]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fe fef5 	bl	8002094 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fe fef1 	bl	8002094 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1ef      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ef      	beq.n	80032ae <HAL_RCC_OscConfig+0x22e>
 80032ce:	e020      	b.n	8003312 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_OscConfig+0x27c>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe fed8 	bl	8002094 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032e6:	e00d      	b.n	8003304 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fed4 	bl	8002094 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d906      	bls.n	8003304 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1d2      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003304:	4b8c      	ldr	r3, [pc, #560]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ea      	bne.n	80032e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a6 	beq.w	800346c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003324:	4b84      	ldr	r3, [pc, #528]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_OscConfig+0x2b4>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x2b6>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	4b7f      	ldr	r3, [pc, #508]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4a7e      	ldr	r2, [pc, #504]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	; 0x58
 8003346:	4b7c      	ldr	r3, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003352:	2301      	movs	r3, #1
 8003354:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003356:	4b79      	ldr	r3, [pc, #484]	; (800353c <HAL_RCC_OscConfig+0x4bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d118      	bne.n	8003394 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCC_OscConfig+0x4bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x4bc>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336e:	f7fe fe91 	bl	8002094 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003376:	f7fe fe8d 	bl	8002094 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e18b      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003388:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x4bc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d108      	bne.n	80033ae <HAL_RCC_OscConfig+0x32e>
 800339c:	4b66      	ldr	r3, [pc, #408]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	4a65      	ldr	r2, [pc, #404]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ac:	e024      	b.n	80033f8 <HAL_RCC_OscConfig+0x378>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d110      	bne.n	80033d8 <HAL_RCC_OscConfig+0x358>
 80033b6:	4b60      	ldr	r3, [pc, #384]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	4a5e      	ldr	r2, [pc, #376]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c6:	4b5c      	ldr	r3, [pc, #368]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	4a5a      	ldr	r2, [pc, #360]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d6:	e00f      	b.n	80033f8 <HAL_RCC_OscConfig+0x378>
 80033d8:	4b57      	ldr	r3, [pc, #348]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	4a56      	ldr	r2, [pc, #344]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d016      	beq.n	800342e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe fe48 	bl	8002094 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fe fe44 	bl	8002094 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e140      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	4b46      	ldr	r3, [pc, #280]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ed      	beq.n	8003408 <HAL_RCC_OscConfig+0x388>
 800342c:	e015      	b.n	800345a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe fe31 	bl	8002094 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fe fe2d 	bl	8002094 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e129      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ed      	bne.n	8003436 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b35      	ldr	r3, [pc, #212]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	4a34      	ldr	r2, [pc, #208]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d03c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01c      	beq.n	80034ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003480:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fe fe00 	bl	8002094 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003498:	f7fe fdfc 	bl	8002094 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0fa      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034aa:	4b23      	ldr	r3, [pc, #140]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <HAL_RCC_OscConfig+0x418>
 80034b8:	e01b      	b.n	80034f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7fe fde3 	bl	8002094 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d2:	f7fe fddf 	bl	8002094 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0dd      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e4:	4b14      	ldr	r3, [pc, #80]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ef      	bne.n	80034d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80d1 	beq.w	800369e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b0c      	cmp	r3, #12
 8003506:	f000 808b 	beq.w	8003620 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d15e      	bne.n	80035d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a08      	ldr	r2, [pc, #32]	; (8003538 <HAL_RCC_OscConfig+0x4b8>)
 8003518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe fdb9 	bl	8002094 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003524:	e00c      	b.n	8003540 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fe fdb5 	bl	8002094 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d905      	bls.n	8003540 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0b3      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ec      	bne.n	8003526 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_RCC_OscConfig+0x62c>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6a11      	ldr	r1, [r2, #32]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800355c:	3a01      	subs	r2, #1
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	4311      	orrs	r1, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003566:	0212      	lsls	r2, r2, #8
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800356e:	0852      	lsrs	r2, r2, #1
 8003570:	3a01      	subs	r2, #1
 8003572:	0552      	lsls	r2, r2, #21
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800357a:	0852      	lsrs	r2, r2, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	0652      	lsls	r2, r2, #25
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003586:	06d2      	lsls	r2, r2, #27
 8003588:	430a      	orrs	r2, r1
 800358a:	4947      	ldr	r1, [pc, #284]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 800358c:	4313      	orrs	r3, r2
 800358e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a44      	ldr	r2, [pc, #272]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	4b42      	ldr	r3, [pc, #264]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a41      	ldr	r2, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fd74 	bl	8002094 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fd70 	bl	8002094 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e06e      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x530>
 80035ce:	e066      	b.n	800369e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 80035d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035e8:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a2e      	ldr	r2, [pc, #184]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 80035ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe fd4c 	bl	8002094 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe fd48 	bl	8002094 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e046      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003612:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x580>
 800361e:	e03e      	b.n	800369e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e039      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_RCC_OscConfig+0x628>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	429a      	cmp	r2, r3
 800363e:	d12c      	bne.n	800369a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	3b01      	subs	r3, #1
 800364c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d123      	bne.n	800369a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d11b      	bne.n	800369a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d113      	bne.n	800369a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	3b01      	subs	r3, #1
 8003680:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d109      	bne.n	800369a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	019f800c 	.word	0x019f800c

080036b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e11e      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b91      	ldr	r3, [pc, #580]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d910      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b8e      	ldr	r3, [pc, #568]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 020f 	bic.w	r2, r3, #15
 80036de:	498c      	ldr	r1, [pc, #560]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b8a      	ldr	r3, [pc, #552]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e106      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d073      	beq.n	80037ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d129      	bne.n	8003760 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370c:	4b81      	ldr	r3, [pc, #516]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0f4      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800371c:	f000 f99e 	bl	8003a5c <RCC_GetSysClockFreqFromPLLSource>
 8003720:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4a7c      	ldr	r2, [pc, #496]	; (8003918 <HAL_RCC_ClockConfig+0x268>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d93f      	bls.n	80037aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800372a:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800373e:	2b00      	cmp	r3, #0
 8003740:	d033      	beq.n	80037aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d12f      	bne.n	80037aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800374a:	4b72      	ldr	r3, [pc, #456]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	4a70      	ldr	r2, [pc, #448]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003758:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e024      	b.n	80037aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d107      	bne.n	8003778 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003768:	4b6a      	ldr	r3, [pc, #424]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0c6      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003778:	4b66      	ldr	r3, [pc, #408]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0be      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003788:	f000 f8ce 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 800378c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4a61      	ldr	r2, [pc, #388]	; (8003918 <HAL_RCC_ClockConfig+0x268>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d909      	bls.n	80037aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379e:	4a5d      	ldr	r2, [pc, #372]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80037a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037aa:	4b5a      	ldr	r3, [pc, #360]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 0203 	bic.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4957      	ldr	r1, [pc, #348]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037bc:	f7fe fc6a 	bl	8002094 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fe fc66 	bl	8002094 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e095      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 020c 	and.w	r2, r3, #12
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1eb      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d023      	beq.n	8003840 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003804:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a42      	ldr	r2, [pc, #264]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800380a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800380e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800381c:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003824:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800382a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b39      	ldr	r3, [pc, #228]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4936      	ldr	r1, [pc, #216]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
 800383e:	e008      	b.n	8003852 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d105      	bne.n	8003852 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003846:	4b33      	ldr	r3, [pc, #204]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	4a32      	ldr	r2, [pc, #200]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800384c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003850:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003852:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d21d      	bcs.n	800389c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 020f 	bic.w	r2, r3, #15
 8003868:	4929      	ldr	r1, [pc, #164]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003870:	f7fe fc10 	bl	8002094 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fe fc0c 	bl	8002094 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e03b      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d1ed      	bne.n	8003878 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a8:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4917      	ldr	r1, [pc, #92]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	490f      	ldr	r1, [pc, #60]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038da:	f000 f825 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 80038de:	4602      	mov	r2, r0
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	490c      	ldr	r1, [pc, #48]	; (800391c <HAL_RCC_ClockConfig+0x26c>)
 80038ec:	5ccb      	ldrb	r3, [r1, r3]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <HAL_RCC_ClockConfig+0x270>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x274>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fb7c 	bl	8001ffc <HAL_InitTick>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40022000 	.word	0x40022000
 8003914:	40021000 	.word	0x40021000
 8003918:	04c4b400 	.word	0x04c4b400
 800391c:	08005448 	.word	0x08005448
 8003920:	20000004 	.word	0x20000004
 8003924:	20000008 	.word	0x20000008

08003928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800392e:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b04      	cmp	r3, #4
 8003938:	d102      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e047      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d102      	bne.n	8003952 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800394c:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e03e      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003952:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d136      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3301      	adds	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d10c      	bne.n	8003996 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800397c:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003986:	68d2      	ldr	r2, [r2, #12]
 8003988:	0a12      	lsrs	r2, r2, #8
 800398a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	617b      	str	r3, [r7, #20]
      break;
 8003994:	e00c      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	0a12      	lsrs	r2, r2, #8
 80039a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
      break;
 80039ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0e5b      	lsrs	r3, r3, #25
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	3301      	adds	r3, #1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e001      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039d0:	693b      	ldr	r3, [r7, #16]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	007a1200 	.word	0x007a1200

080039ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000004 	.word	0x20000004

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a08:	f7ff fff0 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4904      	ldr	r1, [pc, #16]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	08005458 	.word	0x08005458

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a34:	f7ff ffda 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0adb      	lsrs	r3, r3, #11
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4904      	ldr	r1, [pc, #16]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	08005458 	.word	0x08005458

08003a5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d10c      	bne.n	8003a9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a8a:	68d2      	ldr	r2, [r2, #12]
 8003a8c:	0a12      	lsrs	r2, r2, #8
 8003a8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	617b      	str	r3, [r7, #20]
    break;
 8003a98:	e00c      	b.n	8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a9a:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa4:	68d2      	ldr	r2, [r2, #12]
 8003aa6:	0a12      	lsrs	r2, r2, #8
 8003aa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
    break;
 8003ab2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0e5b      	lsrs	r3, r3, #25
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ace:	687b      	ldr	r3, [r7, #4]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	007a1200 	.word	0x007a1200
 8003ae4:	00f42400 	.word	0x00f42400

08003ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af4:	2300      	movs	r3, #0
 8003af6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8098 	beq.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0a:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4b40      	ldr	r3, [pc, #256]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4a3f      	ldr	r2, [pc, #252]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b32:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe faa9 	bl	8002094 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b44:	e009      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fe faa5 	bl	8002094 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d902      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	74fb      	strb	r3, [r7, #19]
        break;
 8003b58:	e005      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ef      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d159      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01e      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d019      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fa65 	bl	8002094 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fe fa61 	bl	8002094 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d902      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	74fb      	strb	r3, [r7, #19]
            break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ec      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	74bb      	strb	r3, [r7, #18]
 8003c16:	e005      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c24:	7c7b      	ldrb	r3, [r7, #17]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2a:	4ba6      	ldr	r3, [pc, #664]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	4aa5      	ldr	r2, [pc, #660]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c42:	4ba0      	ldr	r3, [pc, #640]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	f023 0203 	bic.w	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	499c      	ldr	r1, [pc, #624]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c64:	4b97      	ldr	r3, [pc, #604]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f023 020c 	bic.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4994      	ldr	r1, [pc, #592]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c86:	4b8f      	ldr	r3, [pc, #572]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	498b      	ldr	r1, [pc, #556]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca8:	4b86      	ldr	r3, [pc, #536]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4983      	ldr	r1, [pc, #524]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cca:	4b7e      	ldr	r3, [pc, #504]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	497a      	ldr	r1, [pc, #488]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cec:	4b75      	ldr	r3, [pc, #468]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	4972      	ldr	r1, [pc, #456]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4969      	ldr	r1, [pc, #420]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d30:	4b64      	ldr	r3, [pc, #400]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4961      	ldr	r1, [pc, #388]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d52:	4b5c      	ldr	r3, [pc, #368]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	4958      	ldr	r1, [pc, #352]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d74:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	4950      	ldr	r1, [pc, #320]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d92:	d105      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d94:	4b4b      	ldr	r3, [pc, #300]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dac:	4b45      	ldr	r3, [pc, #276]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4942      	ldr	r1, [pc, #264]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dcc:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a3c      	ldr	r2, [pc, #240]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dd6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d015      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003de4:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4934      	ldr	r1, [pc, #208]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e02:	d105      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e04:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a2e      	ldr	r2, [pc, #184]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d015      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e1c:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	4926      	ldr	r1, [pc, #152]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a20      	ldr	r2, [pc, #128]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d015      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	4918      	ldr	r1, [pc, #96]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e72:	d105      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d015      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	490a      	ldr	r1, [pc, #40]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003eb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000

08003ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e042      	b.n	8003f60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7fd ffeb 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2224      	movs	r2, #36	; 0x24
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f82c 	bl	8003f68 <UART_SetConfig>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e022      	b.n	8003f60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 faec 	bl	8004500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fb73 	bl	8004644 <UART_CheckIdleState>
 8003f5e:	4603      	mov	r3, r0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b08c      	sub	sp, #48	; 0x30
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4bab      	ldr	r3, [pc, #684]	; (8004244 <UART_SetConfig+0x2dc>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4aa0      	ldr	r2, [pc, #640]	; (8004248 <UART_SetConfig+0x2e0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f023 010f 	bic.w	r1, r3, #15
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a91      	ldr	r2, [pc, #580]	; (800424c <UART_SetConfig+0x2e4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d125      	bne.n	8004058 <UART_SetConfig+0xf0>
 800400c:	4b90      	ldr	r3, [pc, #576]	; (8004250 <UART_SetConfig+0x2e8>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b03      	cmp	r3, #3
 8004018:	d81a      	bhi.n	8004050 <UART_SetConfig+0xe8>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0xb8>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004031 	.word	0x08004031
 8004024:	08004041 	.word	0x08004041
 8004028:	08004039 	.word	0x08004039
 800402c:	08004049 	.word	0x08004049
 8004030:	2301      	movs	r3, #1
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004036:	e0d6      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004038:	2302      	movs	r3, #2
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403e:	e0d2      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e0ce      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e0ca      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e0c6      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a7d      	ldr	r2, [pc, #500]	; (8004254 <UART_SetConfig+0x2ec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d138      	bne.n	80040d4 <UART_SetConfig+0x16c>
 8004062:	4b7b      	ldr	r3, [pc, #492]	; (8004250 <UART_SetConfig+0x2e8>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d82d      	bhi.n	80040cc <UART_SetConfig+0x164>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x110>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080040cd 	.word	0x080040cd
 8004084:	080040cd 	.word	0x080040cd
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080040cd 	.word	0x080040cd
 8004090:	080040cd 	.word	0x080040cd
 8004094:	080040cd 	.word	0x080040cd
 8004098:	080040b5 	.word	0x080040b5
 800409c:	080040cd 	.word	0x080040cd
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	080040cd 	.word	0x080040cd
 80040a8:	080040c5 	.word	0x080040c5
 80040ac:	2300      	movs	r3, #0
 80040ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b2:	e098      	b.n	80041e6 <UART_SetConfig+0x27e>
 80040b4:	2302      	movs	r3, #2
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ba:	e094      	b.n	80041e6 <UART_SetConfig+0x27e>
 80040bc:	2304      	movs	r3, #4
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c2:	e090      	b.n	80041e6 <UART_SetConfig+0x27e>
 80040c4:	2308      	movs	r3, #8
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ca:	e08c      	b.n	80041e6 <UART_SetConfig+0x27e>
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d2:	e088      	b.n	80041e6 <UART_SetConfig+0x27e>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5f      	ldr	r2, [pc, #380]	; (8004258 <UART_SetConfig+0x2f0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d125      	bne.n	800412a <UART_SetConfig+0x1c2>
 80040de:	4b5c      	ldr	r3, [pc, #368]	; (8004250 <UART_SetConfig+0x2e8>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040e8:	2b30      	cmp	r3, #48	; 0x30
 80040ea:	d016      	beq.n	800411a <UART_SetConfig+0x1b2>
 80040ec:	2b30      	cmp	r3, #48	; 0x30
 80040ee:	d818      	bhi.n	8004122 <UART_SetConfig+0x1ba>
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d00a      	beq.n	800410a <UART_SetConfig+0x1a2>
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d814      	bhi.n	8004122 <UART_SetConfig+0x1ba>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <UART_SetConfig+0x19a>
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d008      	beq.n	8004112 <UART_SetConfig+0x1aa>
 8004100:	e00f      	b.n	8004122 <UART_SetConfig+0x1ba>
 8004102:	2300      	movs	r3, #0
 8004104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004108:	e06d      	b.n	80041e6 <UART_SetConfig+0x27e>
 800410a:	2302      	movs	r3, #2
 800410c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004110:	e069      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004112:	2304      	movs	r3, #4
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004118:	e065      	b.n	80041e6 <UART_SetConfig+0x27e>
 800411a:	2308      	movs	r3, #8
 800411c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004120:	e061      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004122:	2310      	movs	r3, #16
 8004124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004128:	e05d      	b.n	80041e6 <UART_SetConfig+0x27e>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4b      	ldr	r2, [pc, #300]	; (800425c <UART_SetConfig+0x2f4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d125      	bne.n	8004180 <UART_SetConfig+0x218>
 8004134:	4b46      	ldr	r3, [pc, #280]	; (8004250 <UART_SetConfig+0x2e8>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800413e:	2bc0      	cmp	r3, #192	; 0xc0
 8004140:	d016      	beq.n	8004170 <UART_SetConfig+0x208>
 8004142:	2bc0      	cmp	r3, #192	; 0xc0
 8004144:	d818      	bhi.n	8004178 <UART_SetConfig+0x210>
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d00a      	beq.n	8004160 <UART_SetConfig+0x1f8>
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d814      	bhi.n	8004178 <UART_SetConfig+0x210>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <UART_SetConfig+0x1f0>
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d008      	beq.n	8004168 <UART_SetConfig+0x200>
 8004156:	e00f      	b.n	8004178 <UART_SetConfig+0x210>
 8004158:	2300      	movs	r3, #0
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415e:	e042      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004160:	2302      	movs	r3, #2
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004166:	e03e      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004168:	2304      	movs	r3, #4
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416e:	e03a      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004170:	2308      	movs	r3, #8
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004176:	e036      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004178:	2310      	movs	r3, #16
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417e:	e032      	b.n	80041e6 <UART_SetConfig+0x27e>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a30      	ldr	r2, [pc, #192]	; (8004248 <UART_SetConfig+0x2e0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d12a      	bne.n	80041e0 <UART_SetConfig+0x278>
 800418a:	4b31      	ldr	r3, [pc, #196]	; (8004250 <UART_SetConfig+0x2e8>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004198:	d01a      	beq.n	80041d0 <UART_SetConfig+0x268>
 800419a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800419e:	d81b      	bhi.n	80041d8 <UART_SetConfig+0x270>
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a4:	d00c      	beq.n	80041c0 <UART_SetConfig+0x258>
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041aa:	d815      	bhi.n	80041d8 <UART_SetConfig+0x270>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <UART_SetConfig+0x250>
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b4:	d008      	beq.n	80041c8 <UART_SetConfig+0x260>
 80041b6:	e00f      	b.n	80041d8 <UART_SetConfig+0x270>
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041be:	e012      	b.n	80041e6 <UART_SetConfig+0x27e>
 80041c0:	2302      	movs	r3, #2
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c6:	e00e      	b.n	80041e6 <UART_SetConfig+0x27e>
 80041c8:	2304      	movs	r3, #4
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ce:	e00a      	b.n	80041e6 <UART_SetConfig+0x27e>
 80041d0:	2308      	movs	r3, #8
 80041d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d6:	e006      	b.n	80041e6 <UART_SetConfig+0x27e>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041de:	e002      	b.n	80041e6 <UART_SetConfig+0x27e>
 80041e0:	2310      	movs	r3, #16
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a17      	ldr	r2, [pc, #92]	; (8004248 <UART_SetConfig+0x2e0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	f040 80a8 	bne.w	8004342 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d834      	bhi.n	8004264 <UART_SetConfig+0x2fc>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <UART_SetConfig+0x298>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004225 	.word	0x08004225
 8004204:	08004265 	.word	0x08004265
 8004208:	0800422d 	.word	0x0800422d
 800420c:	08004265 	.word	0x08004265
 8004210:	08004233 	.word	0x08004233
 8004214:	08004265 	.word	0x08004265
 8004218:	08004265 	.word	0x08004265
 800421c:	08004265 	.word	0x08004265
 8004220:	0800423b 	.word	0x0800423b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004224:	f7ff fbee 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800422a:	e021      	b.n	8004270 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <UART_SetConfig+0x2f8>)
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004230:	e01e      	b.n	8004270 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004232:	f7ff fb79 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004238:	e01a      	b.n	8004270 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004240:	e016      	b.n	8004270 <UART_SetConfig+0x308>
 8004242:	bf00      	nop
 8004244:	cfff69f3 	.word	0xcfff69f3
 8004248:	40008000 	.word	0x40008000
 800424c:	40013800 	.word	0x40013800
 8004250:	40021000 	.word	0x40021000
 8004254:	40004400 	.word	0x40004400
 8004258:	40004800 	.word	0x40004800
 800425c:	40004c00 	.word	0x40004c00
 8004260:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800426e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 812a 	beq.w	80044cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	4a9e      	ldr	r2, [pc, #632]	; (80044f8 <UART_SetConfig+0x590>)
 800427e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004282:	461a      	mov	r2, r3
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	fbb3 f3f2 	udiv	r3, r3, r2
 800428a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	429a      	cmp	r2, r3
 800429a:	d305      	bcc.n	80042a8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d903      	bls.n	80042b0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042ae:	e10d      	b.n	80044cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2200      	movs	r2, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	60fa      	str	r2, [r7, #12]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	4a8e      	ldr	r2, [pc, #568]	; (80044f8 <UART_SetConfig+0x590>)
 80042be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2200      	movs	r2, #0
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042d2:	f7fb ffa1 	bl	8000218 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	020b      	lsls	r3, r1, #8
 80042e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042ec:	0202      	lsls	r2, r0, #8
 80042ee:	6979      	ldr	r1, [r7, #20]
 80042f0:	6849      	ldr	r1, [r1, #4]
 80042f2:	0849      	lsrs	r1, r1, #1
 80042f4:	2000      	movs	r0, #0
 80042f6:	460c      	mov	r4, r1
 80042f8:	4605      	mov	r5, r0
 80042fa:	eb12 0804 	adds.w	r8, r2, r4
 80042fe:	eb43 0905 	adc.w	r9, r3, r5
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	469a      	mov	sl, r3
 800430a:	4693      	mov	fp, r2
 800430c:	4652      	mov	r2, sl
 800430e:	465b      	mov	r3, fp
 8004310:	4640      	mov	r0, r8
 8004312:	4649      	mov	r1, r9
 8004314:	f7fb ff80 	bl	8000218 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004326:	d308      	bcc.n	800433a <UART_SetConfig+0x3d2>
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800432e:	d204      	bcs.n	800433a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	60da      	str	r2, [r3, #12]
 8004338:	e0c8      	b.n	80044cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004340:	e0c4      	b.n	80044cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434a:	d167      	bne.n	800441c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800434c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004350:	2b08      	cmp	r3, #8
 8004352:	d828      	bhi.n	80043a6 <UART_SetConfig+0x43e>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <UART_SetConfig+0x3f4>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004381 	.word	0x08004381
 8004360:	08004389 	.word	0x08004389
 8004364:	08004391 	.word	0x08004391
 8004368:	080043a7 	.word	0x080043a7
 800436c:	08004397 	.word	0x08004397
 8004370:	080043a7 	.word	0x080043a7
 8004374:	080043a7 	.word	0x080043a7
 8004378:	080043a7 	.word	0x080043a7
 800437c:	0800439f 	.word	0x0800439f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7ff fb40 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004384:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004386:	e014      	b.n	80043b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004388:	f7ff fb52 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 800438c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800438e:	e010      	b.n	80043b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004390:	4b5a      	ldr	r3, [pc, #360]	; (80044fc <UART_SetConfig+0x594>)
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004394:	e00d      	b.n	80043b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004396:	f7ff fac7 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 800439a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800439c:	e009      	b.n	80043b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043a4:	e005      	b.n	80043b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8089 	beq.w	80044cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	4a4e      	ldr	r2, [pc, #312]	; (80044f8 <UART_SetConfig+0x590>)
 80043c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c4:	461a      	mov	r2, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043cc:	005a      	lsls	r2, r3, #1
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	441a      	add	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	d916      	bls.n	8004414 <UART_SetConfig+0x4ac>
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d212      	bcs.n	8004414 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f023 030f 	bic.w	r3, r3, #15
 80043f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	b29a      	uxth	r2, r3
 8004404:	8bfb      	ldrh	r3, [r7, #30]
 8004406:	4313      	orrs	r3, r2
 8004408:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	8bfa      	ldrh	r2, [r7, #30]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	e05b      	b.n	80044cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800441a:	e057      	b.n	80044cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800441c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004420:	2b08      	cmp	r3, #8
 8004422:	d828      	bhi.n	8004476 <UART_SetConfig+0x50e>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x4c4>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	08004459 	.word	0x08004459
 8004434:	08004461 	.word	0x08004461
 8004438:	08004477 	.word	0x08004477
 800443c:	08004467 	.word	0x08004467
 8004440:	08004477 	.word	0x08004477
 8004444:	08004477 	.word	0x08004477
 8004448:	08004477 	.word	0x08004477
 800444c:	0800446f 	.word	0x0800446f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7ff fad8 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004456:	e014      	b.n	8004482 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004458:	f7ff faea 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 800445c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800445e:	e010      	b.n	8004482 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004460:	4b26      	ldr	r3, [pc, #152]	; (80044fc <UART_SetConfig+0x594>)
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004464:	e00d      	b.n	8004482 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004466:	f7ff fa5f 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 800446a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800446c:	e009      	b.n	8004482 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004474:	e005      	b.n	8004482 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004480:	bf00      	nop
    }

    if (pclk != 0U)
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d021      	beq.n	80044cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <UART_SetConfig+0x590>)
 800448e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004492:	461a      	mov	r2, r3
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	fbb3 f2f2 	udiv	r2, r3, r2
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	441a      	add	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b0f      	cmp	r3, #15
 80044b0:	d909      	bls.n	80044c6 <UART_SetConfig+0x55e>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d205      	bcs.n	80044c6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	e002      	b.n	80044cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2200      	movs	r2, #0
 80044e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80044e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3730      	adds	r7, #48	; 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f6:	bf00      	nop
 80044f8:	08005460 	.word	0x08005460
 80044fc:	00f42400 	.word	0x00f42400

08004500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01a      	beq.n	8004616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fe:	d10a      	bne.n	8004616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
  }
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af02      	add	r7, sp, #8
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004654:	f7fd fd1e 	bl	8002094 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b08      	cmp	r3, #8
 8004666:	d10e      	bne.n	8004686 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f82f 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e025      	b.n	80046d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b04      	cmp	r3, #4
 8004692:	d10e      	bne.n	80046b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f819 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e00f      	b.n	80046d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b09c      	sub	sp, #112	; 0x70
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ea:	e0a9      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	f000 80a5 	beq.w	8004840 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fd fccd 	bl	8002094 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <UART_WaitOnFlagUntilTimeout+0x32>
 8004706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004708:	2b00      	cmp	r3, #0
 800470a:	d140      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004720:	667b      	str	r3, [r7, #100]	; 0x64
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800472c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e6      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	663b      	str	r3, [r7, #96]	; 0x60
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800475e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800476c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e069      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d051      	beq.n	8004840 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047aa:	d149      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
 80047d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	613b      	str	r3, [r7, #16]
   return(result);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004808:	623a      	str	r2, [r7, #32]
 800480a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	69f9      	ldr	r1, [r7, #28]
 800480e:	6a3a      	ldr	r2, [r7, #32]
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	61bb      	str	r3, [r7, #24]
   return(result);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e010      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	429a      	cmp	r2, r3
 800485c:	f43f af46 	beq.w	80046ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3770      	adds	r7, #112	; 0x70
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_UARTEx_DisableFifoMode+0x16>
 800487c:	2302      	movs	r3, #2
 800487e:	e027      	b.n	80048d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80048ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e02d      	b.n	8004950 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	; 0x24
 8004900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f84f 	bl	80049d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e02d      	b.n	80049cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2224      	movs	r2, #36	; 0x24
 800497c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f811 	bl	80049d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d108      	bne.n	80049f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049f4:	e031      	b.n	8004a5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049f6:	2308      	movs	r3, #8
 80049f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049fa:	2308      	movs	r3, #8
 80049fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	0e5b      	lsrs	r3, r3, #25
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	0f5b      	lsrs	r3, r3, #29
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a1e:	7bbb      	ldrb	r3, [r7, #14]
 8004a20:	7b3a      	ldrb	r2, [r7, #12]
 8004a22:	4911      	ldr	r1, [pc, #68]	; (8004a68 <UARTEx_SetNbDataToProcess+0x94>)
 8004a24:	5c8a      	ldrb	r2, [r1, r2]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a2a:	7b3a      	ldrb	r2, [r7, #12]
 8004a2c:	490f      	ldr	r1, [pc, #60]	; (8004a6c <UARTEx_SetNbDataToProcess+0x98>)
 8004a2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	7b7a      	ldrb	r2, [r7, #13]
 8004a40:	4909      	ldr	r1, [pc, #36]	; (8004a68 <UARTEx_SetNbDataToProcess+0x94>)
 8004a42:	5c8a      	ldrb	r2, [r1, r2]
 8004a44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a48:	7b7a      	ldrb	r2, [r7, #13]
 8004a4a:	4908      	ldr	r1, [pc, #32]	; (8004a6c <UARTEx_SetNbDataToProcess+0x98>)
 8004a4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	08005478 	.word	0x08005478
 8004a6c:	08005480 	.word	0x08005480

08004a70 <_ZdlPvj>:
 8004a70:	f000 b800 	b.w	8004a74 <_ZdlPv>

08004a74 <_ZdlPv>:
 8004a74:	f000 b824 	b.w	8004ac0 <free>

08004a78 <__libc_init_array>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4d0d      	ldr	r5, [pc, #52]	; (8004ab0 <__libc_init_array+0x38>)
 8004a7c:	4c0d      	ldr	r4, [pc, #52]	; (8004ab4 <__libc_init_array+0x3c>)
 8004a7e:	1b64      	subs	r4, r4, r5
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	2600      	movs	r6, #0
 8004a84:	42a6      	cmp	r6, r4
 8004a86:	d109      	bne.n	8004a9c <__libc_init_array+0x24>
 8004a88:	4d0b      	ldr	r5, [pc, #44]	; (8004ab8 <__libc_init_array+0x40>)
 8004a8a:	4c0c      	ldr	r4, [pc, #48]	; (8004abc <__libc_init_array+0x44>)
 8004a8c:	f000 f882 	bl	8004b94 <_init>
 8004a90:	1b64      	subs	r4, r4, r5
 8004a92:	10a4      	asrs	r4, r4, #2
 8004a94:	2600      	movs	r6, #0
 8004a96:	42a6      	cmp	r6, r4
 8004a98:	d105      	bne.n	8004aa6 <__libc_init_array+0x2e>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa0:	4798      	blx	r3
 8004aa2:	3601      	adds	r6, #1
 8004aa4:	e7ee      	b.n	8004a84 <__libc_init_array+0xc>
 8004aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aaa:	4798      	blx	r3
 8004aac:	3601      	adds	r6, #1
 8004aae:	e7f2      	b.n	8004a96 <__libc_init_array+0x1e>
 8004ab0:	08005490 	.word	0x08005490
 8004ab4:	08005490 	.word	0x08005490
 8004ab8:	08005490 	.word	0x08005490
 8004abc:	08005498 	.word	0x08005498

08004ac0 <free>:
 8004ac0:	4b02      	ldr	r3, [pc, #8]	; (8004acc <free+0xc>)
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	f000 b80b 	b.w	8004ae0 <_free_r>
 8004aca:	bf00      	nop
 8004acc:	20000010 	.word	0x20000010

08004ad0 <memset>:
 8004ad0:	4402      	add	r2, r0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d100      	bne.n	8004ada <memset+0xa>
 8004ad8:	4770      	bx	lr
 8004ada:	f803 1b01 	strb.w	r1, [r3], #1
 8004ade:	e7f9      	b.n	8004ad4 <memset+0x4>

08004ae0 <_free_r>:
 8004ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ae2:	2900      	cmp	r1, #0
 8004ae4:	d044      	beq.n	8004b70 <_free_r+0x90>
 8004ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aea:	9001      	str	r0, [sp, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f1a1 0404 	sub.w	r4, r1, #4
 8004af2:	bfb8      	it	lt
 8004af4:	18e4      	addlt	r4, r4, r3
 8004af6:	f000 f83f 	bl	8004b78 <__malloc_lock>
 8004afa:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <_free_r+0x94>)
 8004afc:	9801      	ldr	r0, [sp, #4]
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	b933      	cbnz	r3, 8004b10 <_free_r+0x30>
 8004b02:	6063      	str	r3, [r4, #4]
 8004b04:	6014      	str	r4, [r2, #0]
 8004b06:	b003      	add	sp, #12
 8004b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b0c:	f000 b83a 	b.w	8004b84 <__malloc_unlock>
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	d908      	bls.n	8004b26 <_free_r+0x46>
 8004b14:	6825      	ldr	r5, [r4, #0]
 8004b16:	1961      	adds	r1, r4, r5
 8004b18:	428b      	cmp	r3, r1
 8004b1a:	bf01      	itttt	eq
 8004b1c:	6819      	ldreq	r1, [r3, #0]
 8004b1e:	685b      	ldreq	r3, [r3, #4]
 8004b20:	1949      	addeq	r1, r1, r5
 8004b22:	6021      	streq	r1, [r4, #0]
 8004b24:	e7ed      	b.n	8004b02 <_free_r+0x22>
 8004b26:	461a      	mov	r2, r3
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	b10b      	cbz	r3, 8004b30 <_free_r+0x50>
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d9fa      	bls.n	8004b26 <_free_r+0x46>
 8004b30:	6811      	ldr	r1, [r2, #0]
 8004b32:	1855      	adds	r5, r2, r1
 8004b34:	42a5      	cmp	r5, r4
 8004b36:	d10b      	bne.n	8004b50 <_free_r+0x70>
 8004b38:	6824      	ldr	r4, [r4, #0]
 8004b3a:	4421      	add	r1, r4
 8004b3c:	1854      	adds	r4, r2, r1
 8004b3e:	42a3      	cmp	r3, r4
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	d1e0      	bne.n	8004b06 <_free_r+0x26>
 8004b44:	681c      	ldr	r4, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	6053      	str	r3, [r2, #4]
 8004b4a:	4421      	add	r1, r4
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	e7da      	b.n	8004b06 <_free_r+0x26>
 8004b50:	d902      	bls.n	8004b58 <_free_r+0x78>
 8004b52:	230c      	movs	r3, #12
 8004b54:	6003      	str	r3, [r0, #0]
 8004b56:	e7d6      	b.n	8004b06 <_free_r+0x26>
 8004b58:	6825      	ldr	r5, [r4, #0]
 8004b5a:	1961      	adds	r1, r4, r5
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	bf04      	itt	eq
 8004b60:	6819      	ldreq	r1, [r3, #0]
 8004b62:	685b      	ldreq	r3, [r3, #4]
 8004b64:	6063      	str	r3, [r4, #4]
 8004b66:	bf04      	itt	eq
 8004b68:	1949      	addeq	r1, r1, r5
 8004b6a:	6021      	streq	r1, [r4, #0]
 8004b6c:	6054      	str	r4, [r2, #4]
 8004b6e:	e7ca      	b.n	8004b06 <_free_r+0x26>
 8004b70:	b003      	add	sp, #12
 8004b72:	bd30      	pop	{r4, r5, pc}
 8004b74:	20000920 	.word	0x20000920

08004b78 <__malloc_lock>:
 8004b78:	4801      	ldr	r0, [pc, #4]	; (8004b80 <__malloc_lock+0x8>)
 8004b7a:	f000 b809 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004b7e:	bf00      	nop
 8004b80:	20000924 	.word	0x20000924

08004b84 <__malloc_unlock>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__malloc_unlock+0x8>)
 8004b86:	f000 b804 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	20000924 	.word	0x20000924

08004b90 <__retarget_lock_acquire_recursive>:
 8004b90:	4770      	bx	lr

08004b92 <__retarget_lock_release_recursive>:
 8004b92:	4770      	bx	lr

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr
