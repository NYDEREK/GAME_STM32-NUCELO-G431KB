
GAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005854  08005854  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800585c  0800585c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800586c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000088  080058f4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  080058f4  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dde  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035e0  00000000  00000000  00033e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00037478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000383d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212c4  00000000  00000000  000391e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154cd  00000000  00000000  0005a4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb82d  00000000  00000000  0006f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b19e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f88  00000000  00000000  0012b1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004f60 	.word	0x08004f60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	08004f60 	.word	0x08004f60

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_ZN5BlockC1EiiiiPKhii>:
#include "Block.h"
#include"Player.h"
#define true 1
#define false 0

Block::Block(int x, int y,int w,int h,const unsigned char* b,int ml,int mr) {//writing primary data to spike object
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <_ZN5BlockC1EiiiiPKhii+0x4c>)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
	width=w;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	60da      	str	r2, [r3, #12]
	height=h;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	611a      	str	r2, [r3, #16]
    bitmap=b;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
    moveL=ml;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6a3a      	ldr	r2, [r7, #32]
 8000552:	619a      	str	r2, [r3, #24]
    moveR=mr;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000558:	615a      	str	r2, [r3, #20]
}
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	08004f80 	.word	0x08004f80

0800056c <_ZN5Block11generateHITEv>:
void Block::generateHIT(){ // it generates the hit box for this block
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	441a      	add	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZN5Block13Display_BlockEv>:
void Block::Display_Block(){
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	b2d8      	uxtb	r0, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	b2d9      	uxtb	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	b2dc      	uxtb	r4, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2501      	movs	r5, #1
 80005d2:	9501      	str	r5, [sp, #4]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4623      	mov	r3, r4
 80005d8:	f001 fd24 	bl	8002024 <ssd1306_DrawBitmap>

}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bdb0      	pop	{r4, r5, r7, pc}

080005e4 <_ZN5Block5CheckERiR6Player>:

void Block::Check(int &barrier,Player &player){ // it checks if player hit this block (int b is int barrier for gravitation function)
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
player.generateHIT();
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 fc73 	bl	8000edc <_ZN6Player11generateHITEv>
generateHIT();
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f7ff ffb8 	bl	800056c <_ZN5Block11generateHITEv>
if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a1a      	ldr	r2, [r3, #32]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	429a      	cmp	r2, r3
 8000606:	dd0e      	ble.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	429a      	cmp	r2, r3
 8000612:	da08      	bge.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800061c:	429a      	cmp	r2, r3
 800061e:	d102      	bne.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
barrier=1; //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
}

if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of block
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6a1a      	ldr	r2, [r3, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	429a      	cmp	r2, r3
 8000630:	db2b      	blt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800063a:	429a      	cmp	r2, r3
 800063c:	db05      	blt.n	800064a <_ZN5Block5CheckERiR6Player+0x66>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	429a      	cmp	r2, r3
 8000648:	dd0b      	ble.n	8000662 <_ZN5Block5CheckERiR6Player+0x7e>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	429a      	cmp	r2, r3
 8000654:	dc19      	bgt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065e:	429a      	cmp	r2, r3
 8000660:	dd13      	ble.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a1a      	ldr	r2, [r3, #32]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066a:	429a      	cmp	r2, r3
 800066c:	da0d      	bge.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60da      	str	r2, [r3, #12]

  if(is_block_moving==true){//because of this "if" moving block can move the moving player
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d104      	bne.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60da      	str	r2, [r3, #12]
  }

}

if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of block
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	429a      	cmp	r2, r3
 8000694:	dc2b      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069e:	429a      	cmp	r2, r3
 80006a0:	db05      	blt.n	80006ae <_ZN5Block5CheckERiR6Player+0xca>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dd0b      	ble.n	80006c6 <_ZN5Block5CheckERiR6Player+0xe2>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dc19      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dd13      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	69da      	ldr	r2, [r3, #28]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6a1b      	ldr	r3, [r3, #32]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dd0d      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]

 if(is_block_moving==true){//because of this "if" moving block can move the moving player
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d104      	bne.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60da      	str	r2, [r3, #12]
 }

 }
//TODO write function for hiting bottom of block
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZN5Block10Move_BlockEiiRiR6Player>:

void Block:: Move_Block(int point_A,int point_B,int &barrier,Player &player){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
    is_block_moving=true;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
	if(moveR==true){   //moving the block form point A to point B
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d104      	bne.n	800071c <_ZN5Block10Move_BlockEiiRiR6Player+0x26>
	   pos_x++;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	605a      	str	r2, [r3, #4]
	  }
	if(moveL==true){   //moving the block form point B to point A
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d104      	bne.n	800072e <_ZN5Block10Move_BlockEiiRiR6Player+0x38>
	   pos_x--;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	605a      	str	r2, [r3, #4]
	  }
	if(pos_x==point_A){//check if block hit the point_A
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	429a      	cmp	r2, r3
 8000736:	d105      	bne.n	8000744 <_ZN5Block10Move_BlockEiiRiR6Player+0x4e>
	   moveL=false;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
	   moveR=true;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
	  }
	if(RHIT==point_B){//check if block hit the ponit_B
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	d105      	bne.n	800075a <_ZN5Block10Move_BlockEiiRiR6Player+0x64>
	   moveL=true;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
	   moveR=false;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
 }
	//----moving character-----// /*<-- the player can ride on block (be on him and move with him without doing anything)*/
	player.generateHIT();
 800075a:	69b8      	ldr	r0, [r7, #24]
 800075c:	f000 fbbe 	bl	8000edc <_ZN6Player11generateHITEv>
	generateHIT();
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff ff03 	bl	800056c <_ZN5Block11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	6a1a      	ldr	r2, [r3, #32]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	429a      	cmp	r2, r3
 8000770:	dd20      	ble.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	429a      	cmp	r2, r3
 800077c:	da1a      	bge.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	429a      	cmp	r2, r3
 8000788:	d114      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	barrier=1;  //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	if(moveR==true){
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d104      	bne.n	80007a2 <_ZN5Block10Move_BlockEiiRiR6Player+0xac>
		player.pos_x++;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	60da      	str	r2, [r3, #12]
	}
	if(moveL==true){
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d104      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	    player.pos_x--;
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	60da      	str	r2, [r3, #12]
	}
  }
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZN5Block15Change_positionEii>:
void Block::Change_position(int x,int y){
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	pos_x=x;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	605a      	str	r2, [r3, #4]
	pos_y=y;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_ZN5BlockD1Ev>:
Block::~Block() {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <_ZN5BlockD1Ev+0x1c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	08004f80 	.word	0x08004f80

08000800 <_ZN5BlockD0Ev>:
Block::~Block() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
}
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ffe9 	bl	80007e0 <_ZN5BlockD1Ev>
 800080e:	2134      	movs	r1, #52	; 0x34
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f004 fb13 	bl	8004e3c <_ZdlPvj>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_ZN4CoinC1EiiiiPKhi>:
#include <Coin.h>
#define true 1
#define false 0


Coin::Coin(int x,int y,int w,int h,const unsigned char* b,int icl){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <_ZN4CoinC1EiiiiPKhi+0x48>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	60da      	str	r2, [r3, #12]
	pos_y=y;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]
	width=w;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	615a      	str	r2, [r3, #20]
	height=h;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	619a      	str	r2, [r3, #24]
	bitmap=b;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
	is_coin_alive=icl;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a3a      	ldr	r2, [r7, #32]
 8000856:	609a      	str	r2, [r3, #8]

}
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	08004f90 	.word	0x08004f90

0800086c <_ZN4Coin5CheckER6PlayerRi>:

void Coin::Check(Player &player,int &map){//checking if player(boxi) grab this coin
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
if(is_coin_alive==true){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 8093 	bne.w	80009a8 <_ZN4Coin5CheckER6PlayerRi+0x13c>
is_coin_gathered=false;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
	player.generateHIT();
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f000 fb27 	bl	8000edc <_ZN6Player11generateHITEv>
	generateHIT();
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f000 f88e 	bl	80009b0 <_ZN4Coin11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	6a1a      	ldr	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	dd1b      	ble.n	80008d8 <_ZN4Coin5CheckER6PlayerRi+0x6c>
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6a1b      	ldr	r3, [r3, #32]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	da15      	bge.n	80008d8 <_ZN4Coin5CheckER6PlayerRi+0x6c>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d10f      	bne.n	80008d8 <_ZN4Coin5CheckER6PlayerRi+0x6c>
	    player.Player_coins++;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	609a      	str	r2, [r3, #8]
	    map++;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	601a      	str	r2, [r3, #0]
	   is_coin_alive=false;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	   is_coin_gathered=true;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of coin
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	6a1a      	ldr	r2, [r3, #32]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	db2d      	blt.n	8000940 <_ZN4Coin5CheckER6PlayerRi+0xd4>
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ec:	429a      	cmp	r2, r3
 80008ee:	db05      	blt.n	80008fc <_ZN4Coin5CheckER6PlayerRi+0x90>
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f8:	429a      	cmp	r2, r3
 80008fa:	dd0b      	ble.n	8000914 <_ZN4Coin5CheckER6PlayerRi+0xa8>
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000904:	429a      	cmp	r2, r3
 8000906:	dc1b      	bgt.n	8000940 <_ZN4Coin5CheckER6PlayerRi+0xd4>
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	429a      	cmp	r2, r3
 8000912:	dd15      	ble.n	8000940 <_ZN4Coin5CheckER6PlayerRi+0xd4>
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	6a1a      	ldr	r2, [r3, #32]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	429a      	cmp	r2, r3
 800091e:	da0f      	bge.n	8000940 <_ZN4Coin5CheckER6PlayerRi+0xd4>
	    player.Player_coins++;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	609a      	str	r2, [r3, #8]
	    map++;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	601a      	str	r2, [r3, #0]
	    is_coin_alive=false;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
	    is_coin_gathered=true;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2201      	movs	r2, #1
 800093e:	605a      	str	r2, [r3, #4]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of coin
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6a1b      	ldr	r3, [r3, #32]
 8000948:	429a      	cmp	r2, r3
 800094a:	dc2d      	bgt.n	80009a8 <_ZN4Coin5CheckER6PlayerRi+0x13c>
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000954:	429a      	cmp	r2, r3
 8000956:	db05      	blt.n	8000964 <_ZN4Coin5CheckER6PlayerRi+0xf8>
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	429a      	cmp	r2, r3
 8000962:	dd0b      	ble.n	800097c <_ZN4Coin5CheckER6PlayerRi+0x110>
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	429a      	cmp	r2, r3
 800096e:	dc1b      	bgt.n	80009a8 <_ZN4Coin5CheckER6PlayerRi+0x13c>
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000978:	429a      	cmp	r2, r3
 800097a:	dd15      	ble.n	80009a8 <_ZN4Coin5CheckER6PlayerRi+0x13c>
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	69da      	ldr	r2, [r3, #28]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	429a      	cmp	r2, r3
 8000986:	dd0f      	ble.n	80009a8 <_ZN4Coin5CheckER6PlayerRi+0x13c>
	    player.Player_coins++;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	609a      	str	r2, [r3, #8]
	    map++;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
	    is_coin_alive=false;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
	    is_coin_gathered=true;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2201      	movs	r2, #1
 80009a6:	605a      	str	r2, [r3, #4]

	 }
}
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_ZN4Coin11generateHITEv>:

void Coin::generateHIT(){ //generates hit box of coin
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	441a      	add	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	691a      	ldr	r2, [r3, #16]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	441a      	add	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <_ZN4Coin12Display_CoinEv>:

void Coin::Display_Coin(){//if coin is alive can be displayed
 80009f0:	b5b0      	push	{r4, r5, r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	6078      	str	r0, [r7, #4]
	if(is_coin_alive==true){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d113      	bne.n	8000a28 <_ZN4Coin12Display_CoinEv+0x38>
		ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	b2d8      	uxtb	r0, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	b2d9      	uxtb	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	b2dc      	uxtb	r4, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2501      	movs	r5, #1
 8000a1e:	9501      	str	r5, [sp, #4]
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	4623      	mov	r3, r4
 8000a24:	f001 fafe 	bl	8002024 <ssd1306_DrawBitmap>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bdb0      	pop	{r4, r5, r7, pc}

08000a30 <_ZN4Coin15Change_positionEii>:
void Coin::Change_position(int x,int y){//repositioning
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	611a      	str	r2, [r3, #16]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_ZN4CoinD1Ev>:
Coin::~Coin() {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <_ZN4CoinD1Ev+0x1c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	08004f90 	.word	0x08004f90

08000a74 <_ZN4CoinD0Ev>:
Coin::~Coin() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
}
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ffe9 	bl	8000a54 <_ZN4CoinD1Ev>
 8000a82:	2130      	movs	r1, #48	; 0x30
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f004 f9d9 	bl	8004e3c <_ZdlPvj>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_ZN3MapC1EPKhiiii>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Map.h>

Map::Map(const unsigned char* b ,int w ,int h, int x, int y){
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <_ZN3MapC1EPKhiiii+0x40>)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	609a      	str	r2, [r3, #8]
	width=w;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	60da      	str	r2, [r3, #12]
	height=h;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	611a      	str	r2, [r3, #16]
	bitmap=b;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	615a      	str	r2, [r3, #20]
}
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	08004fa0 	.word	0x08004fa0

08000ad8 <_ZN3Map11Display_mapEv>:
void Map::Display_map(){
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	6078      	str	r0, [r7, #4]
	//ssd1306_Fill(Black);
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height,White);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	b2d8      	uxtb	r0, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	b2d9      	uxtb	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	695a      	ldr	r2, [r3, #20]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	b2dc      	uxtb	r4, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2501      	movs	r5, #1
 8000afe:	9501      	str	r5, [sp, #4]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	4623      	mov	r3, r4
 8000b04:	f001 fa8e 	bl	8002024 <ssd1306_DrawBitmap>
    //ssd1306_UpdateScreen();
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bdb0      	pop	{r4, r5, r7, pc}

08000b10 <_ZN3MapD1Ev>:
Map::~Map() {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <_ZN3MapD1Ev+0x1c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	08004fa0 	.word	0x08004fa0

08000b30 <_ZN3MapD0Ev>:
Map::~Map() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
}
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ffe9 	bl	8000b10 <_ZN3MapD1Ev>
 8000b3e:	2118      	movs	r1, #24
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f004 f97b 	bl	8004e3c <_ZdlPvj>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_ZN3MobC1EiiiiiPKhii>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>
#include <Mob.h>

Mob::Mob(int x,int y,int is_al,int w,int h,const unsigned char* b,int ml,int mr){
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <_ZN3MobC1EiiiiiPKhii+0x54>)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	60da      	str	r2, [r3, #12]

	is_mob_alive=is_al;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	605a      	str	r2, [r3, #4]
	width=w;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	611a      	str	r2, [r3, #16]
	height=h;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	615a      	str	r2, [r3, #20]
	bitmap=b;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6a3a      	ldr	r2, [r7, #32]
 8000b86:	631a      	str	r2, [r3, #48]	; 0x30
	moveL=ml;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8c:	61da      	str	r2, [r3, #28]
	moveR=mr;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b92:	619a      	str	r2, [r3, #24]
}
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	08004fb0 	.word	0x08004fb0

08000ba8 <_ZN3Mob11generateHITEv>:

void Mob::generateHIT(){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	441a      	add	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZN3Mob5checkER6Player>:

void Mob::check(Player &player){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
generateHIT();
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffd8 	bl	8000ba8 <_ZN3Mob11generateHITEv>
player.generateHIT();
 8000bf8:	6838      	ldr	r0, [r7, #0]
 8000bfa:	f000 f96f 	bl	8000edc <_ZN6Player11generateHITEv>
if(is_mob_alive==1){
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d143      	bne.n	8000c8e <_ZN3Mob5checkER6Player+0xa6>

if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){//if player hit mob's head mob dies
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	6a1a      	ldr	r2, [r3, #32]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a1b      	ldr	r3, [r3, #32]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dd0e      	ble.n	8000c30 <_ZN3Mob5checkER6Player+0x48>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	69da      	ldr	r2, [r3, #28]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	da08      	bge.n	8000c30 <_ZN3Mob5checkER6Player+0x48>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d102      	bne.n	8000c30 <_ZN3Mob5checkER6Player+0x48>
  is_mob_alive=0;//Mob dies
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]


if((player.LHIT<=RHIT)&&(player.BHIT>=BHIT)&&(player.BHIT<=THIT)){// if player hit the right side of Mob
  player.Player_live--;//player is loosing his hearts
  }*/
if((player.RHIT==LHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){//if player hit left side of Mob
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6a1a      	ldr	r2, [r3, #32]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d110      	bne.n	8000c5e <_ZN3Mob5checkER6Player+0x76>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	429a      	cmp	r2, r3
 8000c46:	db0a      	blt.n	8000c5e <_ZN3Mob5checkER6Player+0x76>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dc04      	bgt.n	8000c5e <_ZN3Mob5checkER6Player+0x76>
  player.Player_live--;//player is loosing his hearts
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
}


if((player.LHIT==RHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){// if player hit the right side of Mob
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	69da      	ldr	r2, [r3, #28]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d114      	bne.n	8000c94 <_ZN3Mob5checkER6Player+0xac>
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	429a      	cmp	r2, r3
 8000c74:	db0e      	blt.n	8000c94 <_ZN3Mob5checkER6Player+0xac>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	dc08      	bgt.n	8000c94 <_ZN3Mob5checkER6Player+0xac>
  player.Player_live--;//player is loosing his hearts
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	1e5a      	subs	r2, r3, #1
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 }
else{
   pos_y=100;
   //throwing body of dead Mob out of the map
}
}
 8000c8c:	e002      	b.n	8000c94 <_ZN3Mob5checkER6Player+0xac>
   pos_y=100;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2264      	movs	r2, #100	; 0x64
 8000c92:	60da      	str	r2, [r3, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_ZN3Mob8Move_mobEii>:

void Mob::Move_mob(int point_A, int point_B){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	generateHIT();
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff ff7d 	bl	8000ba8 <_ZN3Mob11generateHITEv>
	if(is_mob_alive==1){
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d127      	bne.n	8000d06 <_ZN3Mob8Move_mobEii+0x6a>
	if(moveR==true){   //moving  Mob form point A to point B
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d104      	bne.n	8000cc8 <_ZN3Mob8Move_mobEii+0x2c>
		   pos_x++;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	609a      	str	r2, [r3, #8]
		  }
		if(moveL==true){   //moving Mob form point B to point A
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d104      	bne.n	8000cda <_ZN3Mob8Move_mobEii+0x3e>
		   pos_x--;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	609a      	str	r2, [r3, #8]
		  }
		if(pos_x==point_A){//check if Mob hit the point_A
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d105      	bne.n	8000cf0 <_ZN3Mob8Move_mobEii+0x54>
		   moveL=false;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
		   moveR=true;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2201      	movs	r2, #1
 8000cee:	619a      	str	r2, [r3, #24]
		  }
		if(RHIT==point_B){//check if Mob hit the ponit_B
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d105      	bne.n	8000d06 <_ZN3Mob8Move_mobEii+0x6a>
		   moveL=true;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	61da      	str	r2, [r3, #28]
		   moveR=false;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
          }
	}
}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_ZN3Mob11Display_mobEv>:
void Mob::Display_mob(){
 8000d0e:	b5b0      	push	{r4, r5, r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af02      	add	r7, sp, #8
 8000d14:	6078      	str	r0, [r7, #4]
	if(is_mob_alive==1){
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d113      	bne.n	8000d46 <_ZN3Mob11Display_mobEv+0x38>
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	b2d8      	uxtb	r0, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	b2d9      	uxtb	r1, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	b2dc      	uxtb	r4, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2501      	movs	r5, #1
 8000d3c:	9501      	str	r5, [sp, #4]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	4623      	mov	r3, r4
 8000d42:	f001 f96f 	bl	8002024 <ssd1306_DrawBitmap>
	}
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bdb0      	pop	{r4, r5, r7, pc}

08000d4e <_ZN3Mob15Change_positionEii>:
void Mob::Change_position(int x,int y){
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	60da      	str	r2, [r3, #12]
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <_ZN3MobD1Ev>:
Mob::~Mob() {
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <_ZN3MobD1Ev+0x1c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	08004fb0 	.word	0x08004fb0

08000d94 <_ZN3MobD0Ev>:
Mob::~Mob() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
}
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ffe9 	bl	8000d74 <_ZN3MobD1Ev>
 8000da2:	2134      	movs	r1, #52	; 0x34
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f004 f849 	bl	8004e3c <_ZdlPvj>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZN6PlayerC1EiiiiiPKh>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>

Player::Player(int x,int y,int w,int h,int p_l,const unsigned char* b) {//setting values and generating hit box
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <_ZN6PlayerC1EiiiiiPKh+0x48>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	611a      	str	r2, [r3, #16]
	width=w;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	615a      	str	r2, [r3, #20]
	height=h;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	619a      	str	r2, [r3, #24]
	bitmap=b;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a3a      	ldr	r2, [r7, #32]
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
    Player_live=p_l;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	605a      	str	r2, [r3, #4]
	generateHIT();
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f000 f875 	bl	8000edc <_ZN6Player11generateHITEv>
}
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08004fc8 	.word	0x08004fc8

08000e00 <_ZN6Player14Display_PlayerEv>:
void Player::Display_Player(){ //drawing the player
 8000e00:	b5b0      	push	{r4, r5, r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]

	ssd1306_DrawBitmap(pos_x, pos_y, bitmap,width, height, White);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	b2d9      	uxtb	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	b2dc      	uxtb	r4, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2501      	movs	r5, #1
 8000e26:	9501      	str	r5, [sp, #4]
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	f001 f8fa 	bl	8002024 <ssd1306_DrawBitmap>

}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bdb0      	pop	{r4, r5, r7, pc}

08000e38 <_ZN6Player21Display_Player_heartsEv>:
void Player::Display_Player_hearts(){//drawing player's hearts
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	6078      	str	r0, [r7, #4]

	if(Player_live==3){//if player has all lives
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d11d      	bne.n	8000e84 <_ZN6Player21Display_Player_heartsEv+0x4c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e48:	2301      	movs	r3, #1
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2305      	movs	r3, #5
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	2079      	movs	r0, #121	; 0x79
 8000e58:	f001 f8e4 	bl	8002024 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	2305      	movs	r3, #5
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2305      	movs	r3, #5
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2074      	movs	r0, #116	; 0x74
 8000e6c:	f001 f8da 	bl	8002024 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(111,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e70:	2301      	movs	r3, #1
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	2305      	movs	r3, #5
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2305      	movs	r3, #5
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	206f      	movs	r0, #111	; 0x6f
 8000e80:	f001 f8d0 	bl	8002024 <ssd1306_DrawBitmap>
	}
	if(Player_live==2){//if player lose one heart
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d113      	bne.n	8000eb4 <_ZN6Player21Display_Player_heartsEv+0x7c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	2305      	movs	r3, #5
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2305      	movs	r3, #5
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2079      	movs	r0, #121	; 0x79
 8000e9c:	f001 f8c2 	bl	8002024 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	2074      	movs	r0, #116	; 0x74
 8000eb0:	f001 f8b8 	bl	8002024 <ssd1306_DrawBitmap>
	}
	if(Player_live==1){//if player lose two hearts
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d109      	bne.n	8000ed0 <_ZN6Player21Display_Player_heartsEv+0x98>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2079      	movs	r0, #121	; 0x79
 8000ecc:	f001 f8aa 	bl	8002024 <ssd1306_DrawBitmap>

	}

}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	08004fb8 	.word	0x08004fb8

08000edc <_ZN6Player11generateHITEv>:
void Player::generateHIT(){ //generating hit box
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	441a      	add	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZN6Player15Change_positionEii>:
void Player::Change_position(int x,int y){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	611a      	str	r2, [r3, #16]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_ZN6PlayerD1Ev>:
Player::~Player() {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <_ZN6PlayerD1Ev+0x1c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	08004fc8 	.word	0x08004fc8

08000f60 <_ZN6PlayerD0Ev>:
Player::~Player() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
}
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffe9 	bl	8000f40 <_ZN6PlayerD1Ev>
 8000f6e:	2130      	movs	r1, #48	; 0x30
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f003 ff63 	bl	8004e3c <_ZdlPvj>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_ZN5SpikeC1EiiiiPKh>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"
#include <Spike.h>

Spike::Spike(int x,int y,int w, int h,const unsigned char* b) {//writing primary data to spike object
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <_ZN5SpikeC1EiiiiPKh+0x40>)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]
	 pos_x=x;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	605a      	str	r2, [r3, #4]
     pos_y=y;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
   	 width=w;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	60da      	str	r2, [r3, #12]
     height=h;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	611a      	str	r2, [r3, #16]
	 bitmap=b;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	08004fd8 	.word	0x08004fd8

08000fc4 <_ZN5Spike11generateHITEv>:

void Spike::generateHIT(){//generating hit box of spike
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	615a      	str	r2, [r3, #20]
	RHIT=pos_x+width;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	441a      	add	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	619a      	str	r2, [r3, #24]
	THIT=pos_y;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	61da      	str	r2, [r3, #28]
	BHIT=pos_y+height;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	441a      	add	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	621a      	str	r2, [r3, #32]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_ZN5Spike5CheckERiR6Player>:

void Spike::Check(int &barrier,Player &player){//reacting on collisions with player
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	player.generateHIT();
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff63 	bl	8000edc <_ZN6Player11generateHITEv>
	generateHIT();
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ffd4 	bl	8000fc4 <_ZN5Spike11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1a      	ldr	r2, [r3, #32]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	dd13      	ble.n	8001050 <_ZN5Spike5CheckERiR6Player+0x4c>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	429a      	cmp	r2, r3
 8001032:	da0d      	bge.n	8001050 <_ZN5Spike5CheckERiR6Player+0x4c>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	429a      	cmp	r2, r3
 800103e:	d107      	bne.n	8001050 <_ZN5Spike5CheckERiR6Player+0x4c>
	barrier=1; //function turn of our gravitation so we do not fall of this block b is barrier for gravitation
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
	player.Player_live--;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of spike
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1a      	ldr	r2, [r3, #32]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	db22      	blt.n	80010a2 <_ZN5Spike5CheckERiR6Player+0x9e>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	429a      	cmp	r2, r3
 8001066:	db05      	blt.n	8001074 <_ZN5Spike5CheckERiR6Player+0x70>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	dd0b      	ble.n	800108c <_ZN5Spike5CheckERiR6Player+0x88>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	429a      	cmp	r2, r3
 800107e:	dc10      	bgt.n	80010a2 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	429a      	cmp	r2, r3
 800108a:	dd0a      	ble.n	80010a2 <_ZN5Spike5CheckERiR6Player+0x9e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1a      	ldr	r2, [r3, #32]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	429a      	cmp	r2, r3
 8001096:	da04      	bge.n	80010a2 <_ZN5Spike5CheckERiR6Player+0x9e>
	  player.pos_x--;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60da      	str	r2, [r3, #12]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit right side of spike
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69da      	ldr	r2, [r3, #28]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dc22      	bgt.n	80010f4 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	db05      	blt.n	80010c6 <_ZN5Spike5CheckERiR6Player+0xc2>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dd0b      	ble.n	80010de <_ZN5Spike5CheckERiR6Player+0xda>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dc10      	bgt.n	80010f4 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dd0a      	ble.n	80010f4 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69da      	ldr	r2, [r3, #28]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dd04      	ble.n	80010f4 <_ZN5Spike5CheckERiR6Player+0xf0>
	 player.pos_x++;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60da      	str	r2, [r3, #12]
	 }
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN5Spike13Display_SpikeEv>:
void Spike::Display_Spike(){//draws spike
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af02      	add	r7, sp, #8
 8001102:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	b2d8      	uxtb	r0, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	b2d9      	uxtb	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	b2dc      	uxtb	r4, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2501      	movs	r5, #1
 8001122:	9501      	str	r5, [sp, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4623      	mov	r3, r4
 8001128:	f000 ff7c 	bl	8002024 <ssd1306_DrawBitmap>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bdb0      	pop	{r4, r5, r7, pc}

08001134 <_ZN5Spike15Change_positionEii>:
void Spike::Change_position(int x,int y){//changes position of spike
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	609a      	str	r2, [r3, #8]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_ZN5SpikeD1Ev>:

Spike::~Spike() {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <_ZN5SpikeD1Ev+0x1c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	08004fd8 	.word	0x08004fd8

08001178 <_ZN5SpikeD0Ev>:
Spike::~Spike() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
}
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffe9 	bl	8001158 <_ZN5SpikeD1Ev>
 8001186:	2128      	movs	r1, #40	; 0x28
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f003 fe57 	bl	8004e3c <_ZdlPvj>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <MX_GPIO_Init+0xac>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a24      	ldr	r2, [pc, #144]	; (8001244 <MX_GPIO_Init+0xac>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_GPIO_Init+0xac>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <MX_GPIO_Init+0xac>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <MX_GPIO_Init+0xac>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_GPIO_Init+0xac>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <MX_GPIO_Init+0xb0>)
 80011e6:	f001 fbe7 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_Pin;
 80011ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f001 fa3f 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_Pin|UP_Pin;
 8001206:	2330      	movs	r3, #48	; 0x30
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <MX_GPIO_Init+0xb0>)
 800121a:	f001 fa33 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800121e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_GPIO_Init+0xb0>)
 8001238:	f001 fa24 	bl	8002684 <HAL_GPIO_Init>

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400

0800124c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_I2C1_Init+0x74>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <MX_I2C1_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_I2C1_Init+0x74>)
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <MX_I2C1_Init+0x7c>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_I2C1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_I2C1_Init+0x74>)
 8001264:	2201      	movs	r2, #1
 8001266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_I2C1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_I2C1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <MX_I2C1_Init+0x74>)
 8001288:	f001 fbae 	bl	80029e8 <HAL_I2C_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001292:	f000 fcbe 	bl	8001c12 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <MX_I2C1_Init+0x74>)
 800129a:	f001 ff9b 	bl	80031d4 <HAL_I2CEx_ConfigAnalogFilter>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012a4:	f000 fcb5 	bl	8001c12 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_I2C1_Init+0x74>)
 80012ac:	f001 ffdd 	bl	800326a <HAL_I2CEx_ConfigDigitalFilter>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012b6:	f000 fcac 	bl	8001c12 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000a4 	.word	0x200000a4
 80012c4:	40005400 	.word	0x40005400
 80012c8:	10802d9b 	.word	0x10802d9b

080012cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09c      	sub	sp, #112	; 0x70
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0318 	add.w	r3, r7, #24
 80012e8:	2244      	movs	r2, #68	; 0x44
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fdd5 	bl	8004e9c <memset>
  if(i2cHandle->Instance==I2C1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <HAL_I2C_MspInit+0xe0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d153      	bne.n	80013a4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012fc:	2340      	movs	r3, #64	; 0x40
 80012fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fdd3 	bl	8003eb4 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f000 fc7d 	bl	8001c12 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a24      	ldr	r2, [pc, #144]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800134c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134e:	2312      	movs	r3, #18
 8001350:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800135a:	2304      	movs	r3, #4
 800135c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f001 f98c 	bl	8002684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001370:	2312      	movs	r3, #18
 8001372:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137c:	2304      	movs	r3, #4
 800137e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001384:	4619      	mov	r1, r3
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <HAL_I2C_MspInit+0xe8>)
 8001388:	f001 f97c 	bl	8002684 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001396:	6593      	str	r3, [r2, #88]	; 0x58
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_I2C_MspInit+0xe4>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3770      	adds	r7, #112	; 0x70
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40005400 	.word	0x40005400
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400

080013b8 <_Z10change_mapRiS_S_S_S_S_4Coin>:
void change_map(int &cur_map,int &is_map_changed,int &Block_1_A,int &Block_1_B,int &Mob_1_A,int &Mob_1_B,Coin coin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void change_map(int &cur_map,int &is_map_changed,int &Block_1_A,int &Block_1_B,int &Mob_1_A,int &Mob_1_B,Coin coin){//maps~
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
if(coin.is_coin_gathered==true){//if coin gathered boxi is go to the next map
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	f040 80ea 	bne.w	80015a4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x1ec>

if(cur_map==2){//map 2
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d170      	bne.n	80014ba <_Z10change_mapRiS_S_S_S_S_4Coin+0x102>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(12, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	210c      	movs	r1, #12
 80013dc:	4873      	ldr	r0, [pc, #460]	; (80015ac <_Z10change_mapRiS_S_S_S_S_4Coin+0x1f4>)
 80013de:	f7ff fd9d 	bl	8000f1c <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,20);
 80013e2:	2214      	movs	r2, #20
 80013e4:	2101      	movs	r1, #1
 80013e6:	4872      	ldr	r0, [pc, #456]	; (80015b0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x1f8>)
 80013e8:	f7ff f9e8 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(11,20);
 80013ec:	2214      	movs	r2, #20
 80013ee:	210b      	movs	r1, #11
 80013f0:	4870      	ldr	r0, [pc, #448]	; (80015b4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x1fc>)
 80013f2:	f7ff f9e3 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(21,20);
 80013f6:	2214      	movs	r2, #20
 80013f8:	2115      	movs	r1, #21
 80013fa:	486f      	ldr	r0, [pc, #444]	; (80015b8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x200>)
 80013fc:	f7ff f9de 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(91,20);
 8001400:	2214      	movs	r2, #20
 8001402:	215b      	movs	r1, #91	; 0x5b
 8001404:	486d      	ldr	r0, [pc, #436]	; (80015bc <_Z10change_mapRiS_S_S_S_S_4Coin+0x204>)
 8001406:	f7ff f9d9 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(101,20);
 800140a:	2214      	movs	r2, #20
 800140c:	2165      	movs	r1, #101	; 0x65
 800140e:	486c      	ldr	r0, [pc, #432]	; (80015c0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x208>)
 8001410:	f7ff f9d4 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(81,52);
 8001414:	2234      	movs	r2, #52	; 0x34
 8001416:	2151      	movs	r1, #81	; 0x51
 8001418:	486a      	ldr	r0, [pc, #424]	; (80015c4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x20c>)
 800141a:	f7ff f9cf 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(91,52);
 800141e:	2234      	movs	r2, #52	; 0x34
 8001420:	215b      	movs	r1, #91	; 0x5b
 8001422:	4869      	ldr	r0, [pc, #420]	; (80015c8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x210>)
 8001424:	f7ff f9ca 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(101,52);
 8001428:	2234      	movs	r2, #52	; 0x34
 800142a:	2165      	movs	r1, #101	; 0x65
 800142c:	4867      	ldr	r0, [pc, #412]	; (80015cc <_Z10change_mapRiS_S_S_S_S_4Coin+0x214>)
 800142e:	f7ff f9c5 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(111,52);
 8001432:	2234      	movs	r2, #52	; 0x34
 8001434:	216f      	movs	r1, #111	; 0x6f
 8001436:	4866      	ldr	r0, [pc, #408]	; (80015d0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x218>)
 8001438:	f7ff f9c0 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,20);
 800143c:	2214      	movs	r2, #20
 800143e:	2146      	movs	r1, #70	; 0x46
 8001440:	4864      	ldr	r0, [pc, #400]	; (80015d4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x21c>)
 8001442:	f7ff f9bb 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=31;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	221f      	movs	r2, #31
 800144a:	601a      	str	r2, [r3, #0]
Block_1_B=81;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2251      	movs	r2, #81	; 0x51
 8001450:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(91, 44);
 8001452:	222c      	movs	r2, #44	; 0x2c
 8001454:	215b      	movs	r1, #91	; 0x5b
 8001456:	4860      	ldr	r0, [pc, #384]	; (80015d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x220>)
 8001458:	f7ff fc79 	bl	8000d4e <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800145c:	4b5e      	ldr	r3, [pc, #376]	; (80015d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x220>)
 800145e:	2201      	movs	r2, #1
 8001460:	605a      	str	r2, [r3, #4]
Mob_1_A=90;
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	225a      	movs	r2, #90	; 0x5a
 8001466:	601a      	str	r2, [r3, #0]
Mob_1_B=120;
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2278      	movs	r2, #120	; 0x78
 800146c:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(2, 14);
 800146e:	220e      	movs	r2, #14
 8001470:	2102      	movs	r1, #2
 8001472:	485a      	ldr	r0, [pc, #360]	; (80015dc <_Z10change_mapRiS_S_S_S_S_4Coin+0x224>)
 8001474:	f7ff fe5e 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[1].Change_position(7, 14);
 8001478:	220e      	movs	r2, #14
 800147a:	2107      	movs	r1, #7
 800147c:	4858      	ldr	r0, [pc, #352]	; (80015e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x228>)
 800147e:	f7ff fe59 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[2].Change_position(81, 26);
 8001482:	221a      	movs	r2, #26
 8001484:	2151      	movs	r1, #81	; 0x51
 8001486:	4857      	ldr	r0, [pc, #348]	; (80015e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x22c>)
 8001488:	f7ff fe54 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[3].Change_position(86, 26);
 800148c:	221a      	movs	r2, #26
 800148e:	2156      	movs	r1, #86	; 0x56
 8001490:	4855      	ldr	r0, [pc, #340]	; (80015e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x230>)
 8001492:	f7ff fe4f 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[4].Change_position(122, 16);
 8001496:	2210      	movs	r2, #16
 8001498:	217a      	movs	r1, #122	; 0x7a
 800149a:	4854      	ldr	r0, [pc, #336]	; (80015ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x234>)
 800149c:	f7ff fe4a 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[5].Change_position(122, 48);
 80014a0:	2230      	movs	r2, #48	; 0x30
 80014a2:	217a      	movs	r1, #122	; 0x7a
 80014a4:	4852      	ldr	r0, [pc, #328]	; (80015f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x238>)
 80014a6:	f7ff fe45 	bl	8001134 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(82,44);
 80014aa:	222c      	movs	r2, #44	; 0x2c
 80014ac:	2152      	movs	r1, #82	; 0x52
 80014ae:	4851      	ldr	r0, [pc, #324]	; (80015f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x23c>)
 80014b0:	f7ff fabe 	bl	8000a30 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 80014b4:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x23c>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	609a      	str	r2, [r3, #8]
//cur_map++;
}
if(cur_map==3){// map 3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d170      	bne.n	80015a4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x1ec>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(2, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2102      	movs	r1, #2
 80014c6:	4839      	ldr	r0, [pc, #228]	; (80015ac <_Z10change_mapRiS_S_S_S_S_4Coin+0x1f4>)
 80014c8:	f7ff fd28 	bl	8000f1c <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,20);
 80014cc:	2214      	movs	r2, #20
 80014ce:	2101      	movs	r1, #1
 80014d0:	4837      	ldr	r0, [pc, #220]	; (80015b0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x1f8>)
 80014d2:	f7ff f973 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(26,20);
 80014d6:	2214      	movs	r2, #20
 80014d8:	211a      	movs	r1, #26
 80014da:	4836      	ldr	r0, [pc, #216]	; (80015b4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x1fc>)
 80014dc:	f7ff f96e 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(31,58);
 80014e0:	223a      	movs	r2, #58	; 0x3a
 80014e2:	211f      	movs	r1, #31
 80014e4:	4834      	ldr	r0, [pc, #208]	; (80015b8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x200>)
 80014e6:	f7ff f969 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(56,58);
 80014ea:	223a      	movs	r2, #58	; 0x3a
 80014ec:	2138      	movs	r1, #56	; 0x38
 80014ee:	4833      	ldr	r0, [pc, #204]	; (80015bc <_Z10change_mapRiS_S_S_S_S_4Coin+0x204>)
 80014f0:	f7ff f964 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(86,58);
 80014f4:	223a      	movs	r2, #58	; 0x3a
 80014f6:	2156      	movs	r1, #86	; 0x56
 80014f8:	4831      	ldr	r0, [pc, #196]	; (80015c0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x208>)
 80014fa:	f7ff f95f 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(96,58);
 80014fe:	223a      	movs	r2, #58	; 0x3a
 8001500:	2160      	movs	r1, #96	; 0x60
 8001502:	4830      	ldr	r0, [pc, #192]	; (80015c4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x20c>)
 8001504:	f7ff f95a 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(106,58);
 8001508:	223a      	movs	r2, #58	; 0x3a
 800150a:	216a      	movs	r1, #106	; 0x6a
 800150c:	482e      	ldr	r0, [pc, #184]	; (80015c8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x210>)
 800150e:	f7ff f955 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(116,58);
 8001512:	223a      	movs	r2, #58	; 0x3a
 8001514:	2174      	movs	r1, #116	; 0x74
 8001516:	482d      	ldr	r0, [pc, #180]	; (80015cc <_Z10change_mapRiS_S_S_S_S_4Coin+0x214>)
 8001518:	f7ff f950 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(21,58);
 800151c:	223a      	movs	r2, #58	; 0x3a
 800151e:	2115      	movs	r1, #21
 8001520:	482b      	ldr	r0, [pc, #172]	; (80015d0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x218>)
 8001522:	f7ff f94b 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,20);
 8001526:	2214      	movs	r2, #20
 8001528:	2146      	movs	r1, #70	; 0x46
 800152a:	482a      	ldr	r0, [pc, #168]	; (80015d4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x21c>)
 800152c:	f7ff f946 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=36;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	601a      	str	r2, [r3, #0]
Block_1_B=96;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2260      	movs	r2, #96	; 0x60
 800153a:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(91, 50);
 800153c:	2232      	movs	r2, #50	; 0x32
 800153e:	215b      	movs	r1, #91	; 0x5b
 8001540:	4825      	ldr	r0, [pc, #148]	; (80015d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x220>)
 8001542:	f7ff fc04 	bl	8000d4e <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x220>)
 8001548:	2201      	movs	r2, #1
 800154a:	605a      	str	r2, [r3, #4]
Mob_1_A=86;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2256      	movs	r2, #86	; 0x56
 8001550:	601a      	str	r2, [r3, #0]
Mob_1_B=126;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	227e      	movs	r2, #126	; 0x7e
 8001556:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(18, 32);
 8001558:	2220      	movs	r2, #32
 800155a:	2112      	movs	r1, #18
 800155c:	481f      	ldr	r0, [pc, #124]	; (80015dc <_Z10change_mapRiS_S_S_S_S_4Coin+0x224>)
 800155e:	f7ff fde9 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[1].Change_position(40, 32);
 8001562:	2220      	movs	r2, #32
 8001564:	2128      	movs	r1, #40	; 0x28
 8001566:	481e      	ldr	r0, [pc, #120]	; (80015e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x228>)
 8001568:	f7ff fde4 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[2].Change_position(47, 32);
 800156c:	2220      	movs	r2, #32
 800156e:	212f      	movs	r1, #47	; 0x2f
 8001570:	481c      	ldr	r0, [pc, #112]	; (80015e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x22c>)
 8001572:	f7ff fddf 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[3].Change_position(54, 32);
 8001576:	2220      	movs	r2, #32
 8001578:	2136      	movs	r1, #54	; 0x36
 800157a:	481b      	ldr	r0, [pc, #108]	; (80015e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x230>)
 800157c:	f7ff fdda 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[4].Change_position(61, 32);
 8001580:	2220      	movs	r2, #32
 8001582:	213d      	movs	r1, #61	; 0x3d
 8001584:	4819      	ldr	r0, [pc, #100]	; (80015ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x234>)
 8001586:	f7ff fdd5 	bl	8001134 <_ZN5Spike15Change_positionEii>
S[5].Change_position(96, 32);
 800158a:	2220      	movs	r2, #32
 800158c:	2160      	movs	r1, #96	; 0x60
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x238>)
 8001590:	f7ff fdd0 	bl	8001134 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(32,45);
 8001594:	222d      	movs	r2, #45	; 0x2d
 8001596:	2120      	movs	r1, #32
 8001598:	4816      	ldr	r0, [pc, #88]	; (80015f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x23c>)
 800159a:	f7ff fa49 	bl	8000a30 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x23c>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	609a      	str	r2, [r3, #8]
//cur_map++;
 }
}
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000108 	.word	0x20000108
 80015b0:	20000138 	.word	0x20000138
 80015b4:	2000016c 	.word	0x2000016c
 80015b8:	200001a0 	.word	0x200001a0
 80015bc:	200001d4 	.word	0x200001d4
 80015c0:	20000208 	.word	0x20000208
 80015c4:	2000023c 	.word	0x2000023c
 80015c8:	20000270 	.word	0x20000270
 80015cc:	200002d8 	.word	0x200002d8
 80015d0:	2000030c 	.word	0x2000030c
 80015d4:	200002a4 	.word	0x200002a4
 80015d8:	20000340 	.word	0x20000340
 80015dc:	20000374 	.word	0x20000374
 80015e0:	2000039c 	.word	0x2000039c
 80015e4:	200003c4 	.word	0x200003c4
 80015e8:	200003ec 	.word	0x200003ec
 80015ec:	20000414 	.word	0x20000414
 80015f0:	2000043c 	.word	0x2000043c
 80015f4:	20000464 	.word	0x20000464

080015f8 <_Z4JumpR6PlayerRiS1_>:
	void Jump(Player &player,int &jump_height,int &barrier){
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]

	 if((jump_height>0)&&(barrier==true))
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	dd1a      	ble.n	8001642 <_Z4JumpR6PlayerRiS1_+0x4a>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d116      	bne.n	8001642 <_Z4JumpR6PlayerRiS1_+0x4a>
	 {
		player.pos_y--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	1e5a      	subs	r2, r3, #1
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	611a      	str	r2, [r3, #16]
	    jump_height--;   /////////////////////////////////////////////////////
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	601a      	str	r2, [r3, #0]
		player.pos_y--; /* if gravitation is off we can jump on Jump_height */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	611a      	str	r2, [r3, #16]
		jump_height--; /*     in jump we are losing Jump_height             */
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	1e5a      	subs	r2, r3, #1
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	601a      	str	r2, [r3, #0]
		barrier=true; /*    when we are jumping gravitation is off          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
                     /////////////////////////////////////////////////////////
		}
	 if(jump_height==0){
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <_Z4JumpR6PlayerRiS1_+0x58>
		 barrier=false;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
	 }
	 }
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_Z11GravitationR6PlayeriRi>:

/*---------------------gravitation function-----------------------------------*/
	void Gravitation(Player &player,int ground_level,int &barrier){
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]

	  player.generateHIT();//generating actual hit box of player
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff fc37 	bl	8000edc <_ZN6Player11generateHITEv>

	 if(player.BHIT>=ground_level){
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	429a      	cmp	r2, r3
 8001676:	dc07      	bgt.n	8001688 <_Z11GravitationR6PlayeriRi+0x2c>
		barrier=true;// if player hit the ground
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]
		player.Player_live--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	1e5a      	subs	r2, r3, #1
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
	 }

	if(barrier==false){ // if player is in free air we are falling fastest
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <_Z11GravitationR6PlayeriRi+0x48>
		player.pos_y++;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	611a      	str	r2, [r3, #16]
		player.pos_y++;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	611a      	str	r2, [r3, #16]
	 }
	}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_Z13Check_buttonsR6Playeri>:

/*-----------checking buttons-----------------*/
	void Check_buttons(Player &player,int barrier){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
		player.generateHIT();//generating actual hit box of player
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fc10 	bl	8000edc <_ZN6Player11generateHITEv>

		if((HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0)&&(barrier==true))//jumping
 80016bc:	2120      	movs	r1, #32
 80016be:	4820      	ldr	r0, [pc, #128]	; (8001740 <_Z13Check_buttonsR6Playeri+0x94>)
 80016c0:	f001 f962 	bl	8002988 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <_Z13Check_buttonsR6Playeri+0x28>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <_Z13Check_buttonsR6Playeri+0x28>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <_Z13Check_buttonsR6Playeri+0x2a>
 80016d4:	2300      	movs	r3, #0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <_Z13Check_buttonsR6Playeri+0x42>
		{
          if((Jump_height==0)&&(barrier==true)){//checking if player has end his jump
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <_Z13Check_buttonsR6Playeri+0x98>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d105      	bne.n	80016ee <_Z13Check_buttonsR6Playeri+0x42>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d102      	bne.n	80016ee <_Z13Check_buttonsR6Playeri+0x42>
        	  Jump_height=18;                   // and if he is on something that he jump of
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <_Z13Check_buttonsR6Playeri+0x98>)
 80016ea:	2212      	movs	r2, #18
 80016ec:	601a      	str	r2, [r3, #0]
          }
		}

		if(HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin)==0){ //go into right side
 80016ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f001 f947 	bl	8002988 <HAL_GPIO_ReadPin>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <_Z13Check_buttonsR6Playeri+0x68>
			player.pos_x++;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	60da      	str	r2, [r3, #12]
		}
		if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin)==0){//go into left side
 8001714:	2110      	movs	r1, #16
 8001716:	480a      	ldr	r0, [pc, #40]	; (8001740 <_Z13Check_buttonsR6Playeri+0x94>)
 8001718:	f001 f936 	bl	8002988 <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	bf0c      	ite	eq
 8001722:	2301      	moveq	r3, #1
 8001724:	2300      	movne	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <_Z13Check_buttonsR6Playeri+0x8a>
			player.pos_x--;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60da      	str	r2, [r3, #12]
		}
		}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	48000400 	.word	0x48000400
 8001744:	20000498 	.word	0x20000498

08001748 <_Z19Display_Over_Screenv>:
/*------GAME OVER SCREEN--------*/
	void Display_Over_Screen(){//displaying a 128x64 game over bitmap function
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af02      	add	r7, sp, #8
		ssd1306_Fill(Black);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 fbc8 	bl	8001ee4 <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, Bitmap_game_over, 128, 64, White);
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	2340      	movs	r3, #64	; 0x40
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <_Z19Display_Over_Screenv+0x34>)
 8001760:	2100      	movs	r1, #0
 8001762:	2000      	movs	r0, #0
 8001764:	f000 fc5e 	bl	8002024 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 8001768:	f000 fbe0 	bl	8001f2c <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 800176c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001770:	f000 fe82 	bl	8002478 <HAL_Delay>
	}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	08004fe0 	.word	0x08004fe0

08001780 <_ZN4CoinC1ERKS_>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"

class Coin {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <_ZN4CoinC1ERKS_+0x78>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	61da      	str	r2, [r3, #28]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6a1a      	ldr	r2, [r3, #32]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	621a      	str	r2, [r3, #32]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	08004f90 	.word	0x08004f90

080017fc <_Z4Game6PlayerRiS0_>:

/*----------GAME LOOP------------*/
	void Game(Player player,int &barrier,int &Jump_height){//main loop of boxi game
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b098      	sub	sp, #96	; 0x60
 8001800:	af04      	add	r7, sp, #16
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
	if(player.Player_live>0){//if player is alive
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f340 80a8 	ble.w	8001962 <_Z4Game6PlayerRiS0_+0x166>

		//---------DISPLAYING LAST FRAME-----------//
		//displaying all objects//
		  ssd1306_Fill(Black);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 fb66 	bl	8001ee4 <ssd1306_Fill>
		  boxi.Display_Player_hearts();
 8001818:	4855      	ldr	r0, [pc, #340]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 800181a:	f7ff fb0d 	bl	8000e38 <_ZN6Player21Display_Player_heartsEv>
		  map1.Display_map();
 800181e:	4855      	ldr	r0, [pc, #340]	; (8001974 <_Z4Game6PlayerRiS0_+0x178>)
 8001820:	f7ff f95a 	bl	8000ad8 <_ZN3Map11Display_mapEv>
          c1.Display_Coin();
 8001824:	4854      	ldr	r0, [pc, #336]	; (8001978 <_Z4Game6PlayerRiS0_+0x17c>)
 8001826:	f7ff f8e3 	bl	80009f0 <_ZN4Coin12Display_CoinEv>

		  for(int i=0; i<=9; i++){//displaying blocks
 800182a:	2300      	movs	r3, #0
 800182c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800182e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001830:	2b09      	cmp	r3, #9
 8001832:	dc0c      	bgt.n	800184e <_Z4Game6PlayerRiS0_+0x52>
			  B[i].Display_Block();
 8001834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001836:	2234      	movs	r2, #52	; 0x34
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	4a4f      	ldr	r2, [pc, #316]	; (800197c <_Z4Game6PlayerRiS0_+0x180>)
 800183e:	4413      	add	r3, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe feb3 	bl	80005ac <_ZN5Block13Display_BlockEv>
		  for(int i=0; i<=9; i++){//displaying blocks
 8001846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001848:	3301      	adds	r3, #1
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800184c:	e7ef      	b.n	800182e <_Z4Game6PlayerRiS0_+0x32>
		  }

		  for(int i=0; i<=5; i++){//displaying spikes
 800184e:	2300      	movs	r3, #0
 8001850:	64bb      	str	r3, [r7, #72]	; 0x48
 8001852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001854:	2b05      	cmp	r3, #5
 8001856:	dc0d      	bgt.n	8001874 <_Z4Game6PlayerRiS0_+0x78>
		      S[i].Display_Spike();
 8001858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4a47      	ldr	r2, [pc, #284]	; (8001980 <_Z4Game6PlayerRiS0_+0x184>)
 8001864:	4413      	add	r3, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fc48 	bl	80010fc <_ZN5Spike13Display_SpikeEv>
		  for(int i=0; i<=5; i++){//displaying spikes
 800186c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800186e:	3301      	adds	r3, #1
 8001870:	64bb      	str	r3, [r7, #72]	; 0x48
 8001872:	e7ee      	b.n	8001852 <_Z4Game6PlayerRiS0_+0x56>
		   }

		  m1.Display_mob();//displaying mob
 8001874:	4843      	ldr	r0, [pc, #268]	; (8001984 <_Z4Game6PlayerRiS0_+0x188>)
 8001876:	f7ff fa4a 	bl	8000d0e <_ZN3Mob11Display_mobEv>

		  boxi.Display_Player();//displaying boxi
 800187a:	483d      	ldr	r0, [pc, #244]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 800187c:	f7ff fac0 	bl	8000e00 <_ZN6Player14Display_PlayerEv>

		  //updating the screen//
		  ssd1306_UpdateScreen();
 8001880:	f000 fb54 	bl	8001f2c <ssd1306_UpdateScreen>

		  //----------MOVING BLOCKS------------------//
		  B[7].Move_Block(Block_1_A, Block_1_B, barrier,boxi);
 8001884:	4b40      	ldr	r3, [pc, #256]	; (8001988 <_Z4Game6PlayerRiS0_+0x18c>)
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <_Z4Game6PlayerRiS0_+0x190>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b38      	ldr	r3, [pc, #224]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	483f      	ldr	r0, [pc, #252]	; (8001990 <_Z4Game6PlayerRiS0_+0x194>)
 8001894:	f7fe ff2f 	bl	80006f6 <_ZN5Block10Move_BlockEiiRiR6Player>

		  //----------MOVING MOBS-------------------//
		  m1.Move_mob(Mob_1_A,Mob_1_B);
 8001898:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <_Z4Game6PlayerRiS0_+0x198>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3e      	ldr	r2, [pc, #248]	; (8001998 <_Z4Game6PlayerRiS0_+0x19c>)
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4838      	ldr	r0, [pc, #224]	; (8001984 <_Z4Game6PlayerRiS0_+0x188>)
 80018a4:	f7ff f9fa 	bl	8000c9c <_ZN3Mob8Move_mobEii>

		  //--------CHECKING BARRIERS----------------//
		  c1.Check(boxi,current_map);
 80018a8:	4a3c      	ldr	r2, [pc, #240]	; (800199c <_Z4Game6PlayerRiS0_+0x1a0>)
 80018aa:	4931      	ldr	r1, [pc, #196]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 80018ac:	4832      	ldr	r0, [pc, #200]	; (8001978 <_Z4Game6PlayerRiS0_+0x17c>)
 80018ae:	f7fe ffdd 	bl	800086c <_ZN4Coin5CheckER6PlayerRi>
		  m1.check(boxi);
 80018b2:	492f      	ldr	r1, [pc, #188]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 80018b4:	4833      	ldr	r0, [pc, #204]	; (8001984 <_Z4Game6PlayerRiS0_+0x188>)
 80018b6:	f7ff f997 	bl	8000be8 <_ZN3Mob5checkER6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 80018ba:	2300      	movs	r3, #0
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
 80018be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	dc0f      	bgt.n	80018e4 <_Z4Game6PlayerRiS0_+0xe8>
		  	 S[i].Check(barrier, boxi);
 80018c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4a2c      	ldr	r2, [pc, #176]	; (8001980 <_Z4Game6PlayerRiS0_+0x184>)
 80018d0:	4413      	add	r3, r2
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb94 	bl	8001004 <_ZN5Spike5CheckERiR6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 80018dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018de:	3301      	adds	r3, #1
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
 80018e2:	e7ec      	b.n	80018be <_Z4Game6PlayerRiS0_+0xc2>
		  }


		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 80018e4:	2300      	movs	r3, #0
 80018e6:	643b      	str	r3, [r7, #64]	; 0x40
 80018e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ea:	2b09      	cmp	r3, #9
 80018ec:	dc0e      	bgt.n	800190c <_Z4Game6PlayerRiS0_+0x110>
		  	B[i].Check(barrier, boxi);
 80018ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f0:	2234      	movs	r2, #52	; 0x34
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <_Z4Game6PlayerRiS0_+0x180>)
 80018f8:	4413      	add	r3, r2
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe70 	bl	80005e4 <_ZN5Block5CheckERiR6Player>
		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001906:	3301      	adds	r3, #1
 8001908:	643b      	str	r3, [r7, #64]	; 0x40
 800190a:	e7ed      	b.n	80018e8 <_Z4Game6PlayerRiS0_+0xec>
		  }

		  //----------GRAVITATION FUNCTION----------//
		  Gravitation(boxi, ground_level,barrier);
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <_Z4Game6PlayerRiS0_+0x1a4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	4619      	mov	r1, r3
 8001914:	4816      	ldr	r0, [pc, #88]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 8001916:	f7ff fea1 	bl	800165c <_Z11GravitationR6PlayeriRi>

		  //--------BUTTONS CHECKING ---------------//
	      Check_buttons(boxi,barrier);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	4813      	ldr	r0, [pc, #76]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 8001922:	f7ff fec3 	bl	80016ac <_Z13Check_buttonsR6Playeri>

	      //----------JUMPING FUNCTION--------------//
	      Jump(boxi,Jump_height,barrier);
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4811      	ldr	r0, [pc, #68]	; (8001970 <_Z4Game6PlayerRiS0_+0x174>)
 800192c:	f7ff fe64 	bl	80015f8 <_Z4JumpR6PlayerRiS1_>
	      //-----------CHANGE MAP FUNCTION----------//
	      change_map(current_map,is_map_changed,Block_1_A,Block_1_B,Mob_1_A,Mob_1_B,c1);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4910      	ldr	r1, [pc, #64]	; (8001978 <_Z4Game6PlayerRiS0_+0x17c>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff22 	bl	8001780 <_ZN4CoinC1ERKS_>
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <_Z4Game6PlayerRiS0_+0x19c>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_Z4Game6PlayerRiS0_+0x198>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <_Z4Game6PlayerRiS0_+0x190>)
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <_Z4Game6PlayerRiS0_+0x18c>)
 800194e:	4915      	ldr	r1, [pc, #84]	; (80019a4 <_Z4Game6PlayerRiS0_+0x1a8>)
 8001950:	4812      	ldr	r0, [pc, #72]	; (800199c <_Z4Game6PlayerRiS0_+0x1a0>)
 8001952:	f7ff fd31 	bl	80013b8 <_Z10change_mapRiS_S_S_S_S_4Coin>
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f87a 	bl	8000a54 <_ZN4CoinD1Ev>
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //i am turning it on for tests but game will go faster without it
	}
	else {
		Display_Over_Screen();
	}
}
 8001960:	e001      	b.n	8001966 <_Z4Game6PlayerRiS0_+0x16a>
		Display_Over_Screen();
 8001962:	f7ff fef1 	bl	8001748 <_Z19Display_Over_Screenv>
}
 8001966:	bf00      	nop
 8001968:	3750      	adds	r7, #80	; 0x50
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000108 	.word	0x20000108
 8001974:	200000f0 	.word	0x200000f0
 8001978:	20000464 	.word	0x20000464
 800197c:	20000138 	.word	0x20000138
 8001980:	20000374 	.word	0x20000374
 8001984:	20000340 	.word	0x20000340
 8001988:	20000010 	.word	0x20000010
 800198c:	20000014 	.word	0x20000014
 8001990:	200002a4 	.word	0x200002a4
 8001994:	20000008 	.word	0x20000008
 8001998:	2000000c 	.word	0x2000000c
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004
 80019a4:	20000494 	.word	0x20000494

080019a8 <_ZN6PlayerC1ERKS_>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#ifndef INC_PLAYER_H_
#define INC_PLAYER_H_

class Player {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <_ZN6PlayerC1ERKS_+0x78>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	699a      	ldr	r2, [r3, #24]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	61da      	str	r2, [r3, #28]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	621a      	str	r2, [r3, #32]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	08004fc8 	.word	0x08004fc8

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2a:	f000 fcb4 	bl	8002396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2e:	f000 f89b 	bl	8001b68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a32:	f7ff fbb1 	bl	8001198 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a36:	f000 fbe1 	bl	80021fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a3a:	f7ff fc07 	bl	800124c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  //Initialize  of libraries//
  	  ssd1306_Init();
 8001a3e:	f000 f9e7 	bl	8001e10 <ssd1306_Init>

  	  //fill black the display
  	  ssd1306_Fill(Black);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 fa4e 	bl	8001ee4 <ssd1306_Fill>
  	  ssd1306_UpdateScreen();
 8001a48:	f000 fa70 	bl	8001f2c <ssd1306_UpdateScreen>
  	//-----POSITIONING OBJECTS-----//
     //--------BLOCKS------------//
  	  B[0].Change_position(1,52);
 8001a4c:	2234      	movs	r2, #52	; 0x34
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4831      	ldr	r0, [pc, #196]	; (8001b18 <main+0xf4>)
 8001a52:	f7fe feb3 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[1].Change_position(11,52);
 8001a56:	2234      	movs	r2, #52	; 0x34
 8001a58:	210b      	movs	r1, #11
 8001a5a:	4830      	ldr	r0, [pc, #192]	; (8001b1c <main+0xf8>)
 8001a5c:	f7fe feae 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[2].Change_position(21,52);
 8001a60:	2234      	movs	r2, #52	; 0x34
 8001a62:	2115      	movs	r1, #21
 8001a64:	482e      	ldr	r0, [pc, #184]	; (8001b20 <main+0xfc>)
 8001a66:	f7fe fea9 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[3].Change_position(41,42);
 8001a6a:	222a      	movs	r2, #42	; 0x2a
 8001a6c:	2129      	movs	r1, #41	; 0x29
 8001a6e:	482d      	ldr	r0, [pc, #180]	; (8001b24 <main+0x100>)
 8001a70:	f7fe fea4 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[4].Change_position(41,52);
 8001a74:	2234      	movs	r2, #52	; 0x34
 8001a76:	2129      	movs	r1, #41	; 0x29
 8001a78:	482b      	ldr	r0, [pc, #172]	; (8001b28 <main+0x104>)
 8001a7a:	f7fe fe9f 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[5].Change_position(71,42);
 8001a7e:	222a      	movs	r2, #42	; 0x2a
 8001a80:	2147      	movs	r1, #71	; 0x47
 8001a82:	482a      	ldr	r0, [pc, #168]	; (8001b2c <main+0x108>)
 8001a84:	f7fe fe9a 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[6].Change_position(71,52);
 8001a88:	2234      	movs	r2, #52	; 0x34
 8001a8a:	2147      	movs	r1, #71	; 0x47
 8001a8c:	4828      	ldr	r0, [pc, #160]	; (8001b30 <main+0x10c>)
 8001a8e:	f7fe fe95 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[7].Change_position(91,42);
 8001a92:	222a      	movs	r2, #42	; 0x2a
 8001a94:	215b      	movs	r1, #91	; 0x5b
 8001a96:	4827      	ldr	r0, [pc, #156]	; (8001b34 <main+0x110>)
 8001a98:	f7fe fe90 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[8].Change_position(117,42);
 8001a9c:	222a      	movs	r2, #42	; 0x2a
 8001a9e:	2175      	movs	r1, #117	; 0x75
 8001aa0:	4825      	ldr	r0, [pc, #148]	; (8001b38 <main+0x114>)
 8001aa2:	f7fe fe8b 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[9].Change_position(117,52);
 8001aa6:	2234      	movs	r2, #52	; 0x34
 8001aa8:	2175      	movs	r1, #117	; 0x75
 8001aaa:	4824      	ldr	r0, [pc, #144]	; (8001b3c <main+0x118>)
 8001aac:	f7fe fe86 	bl	80007bc <_ZN5Block15Change_positionEii>
  	 //--------SPIKES--------------//
  	  S[0].Change_position(51, 56);
 8001ab0:	2238      	movs	r2, #56	; 0x38
 8001ab2:	2133      	movs	r1, #51	; 0x33
 8001ab4:	4822      	ldr	r0, [pc, #136]	; (8001b40 <main+0x11c>)
 8001ab6:	f7ff fb3d 	bl	8001134 <_ZN5Spike15Change_positionEii>
  	  S[1].Change_position(56, 56);
 8001aba:	2238      	movs	r2, #56	; 0x38
 8001abc:	2138      	movs	r1, #56	; 0x38
 8001abe:	4821      	ldr	r0, [pc, #132]	; (8001b44 <main+0x120>)
 8001ac0:	f7ff fb38 	bl	8001134 <_ZN5Spike15Change_positionEii>
  	  S[2].Change_position(61, 56);
 8001ac4:	2238      	movs	r2, #56	; 0x38
 8001ac6:	213d      	movs	r1, #61	; 0x3d
 8001ac8:	481f      	ldr	r0, [pc, #124]	; (8001b48 <main+0x124>)
 8001aca:	f7ff fb33 	bl	8001134 <_ZN5Spike15Change_positionEii>
  	  S[3].Change_position(66, 56);
 8001ace:	2238      	movs	r2, #56	; 0x38
 8001ad0:	2142      	movs	r1, #66	; 0x42
 8001ad2:	481e      	ldr	r0, [pc, #120]	; (8001b4c <main+0x128>)
 8001ad4:	f7ff fb2e 	bl	8001134 <_ZN5Spike15Change_positionEii>
  	  S[4].Change_position(31, 56);
 8001ad8:	2238      	movs	r2, #56	; 0x38
 8001ada:	211f      	movs	r1, #31
 8001adc:	481c      	ldr	r0, [pc, #112]	; (8001b50 <main+0x12c>)
 8001ade:	f7ff fb29 	bl	8001134 <_ZN5Spike15Change_positionEii>
  	  S[5].Change_position(36, 56);
 8001ae2:	2238      	movs	r2, #56	; 0x38
 8001ae4:	2124      	movs	r1, #36	; 0x24
 8001ae6:	481b      	ldr	r0, [pc, #108]	; (8001b54 <main+0x130>)
 8001ae8:	f7ff fb24 	bl	8001134 <_ZN5Spike15Change_positionEii>
  	  c1.Change_position(119, 36);
 8001aec:	2224      	movs	r2, #36	; 0x24
 8001aee:	2177      	movs	r1, #119	; 0x77
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <main+0x134>)
 8001af2:	f7fe ff9d 	bl	8000a30 <_ZN4Coin15Change_positionEii>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Game(boxi,barrier,Jump_height); //Game loop
 8001af6:	463b      	mov	r3, r7
 8001af8:	4918      	ldr	r1, [pc, #96]	; (8001b5c <main+0x138>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff54 	bl	80019a8 <_ZN6PlayerC1ERKS_>
 8001b00:	463b      	mov	r3, r7
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <main+0x13c>)
 8001b04:	4917      	ldr	r1, [pc, #92]	; (8001b64 <main+0x140>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fe78 	bl	80017fc <_Z4Game6PlayerRiS0_>
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fa16 	bl	8000f40 <_ZN6PlayerD1Ev>
 8001b14:	e7ef      	b.n	8001af6 <main+0xd2>
 8001b16:	bf00      	nop
 8001b18:	20000138 	.word	0x20000138
 8001b1c:	2000016c 	.word	0x2000016c
 8001b20:	200001a0 	.word	0x200001a0
 8001b24:	200001d4 	.word	0x200001d4
 8001b28:	20000208 	.word	0x20000208
 8001b2c:	2000023c 	.word	0x2000023c
 8001b30:	20000270 	.word	0x20000270
 8001b34:	200002a4 	.word	0x200002a4
 8001b38:	200002d8 	.word	0x200002d8
 8001b3c:	2000030c 	.word	0x2000030c
 8001b40:	20000374 	.word	0x20000374
 8001b44:	2000039c 	.word	0x2000039c
 8001b48:	200003c4 	.word	0x200003c4
 8001b4c:	200003ec 	.word	0x200003ec
 8001b50:	20000414 	.word	0x20000414
 8001b54:	2000043c 	.word	0x2000043c
 8001b58:	20000464 	.word	0x20000464
 8001b5c:	20000108 	.word	0x20000108
 8001b60:	20000498 	.word	0x20000498
 8001b64:	2000049c 	.word	0x2000049c

08001b68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b094      	sub	sp, #80	; 0x50
 8001b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	f107 0318 	add.w	r3, r7, #24
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 f990 	bl	8004e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f001 fbba 	bl	8003304 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001baa:	2355      	movs	r3, #85	; 0x55
 8001bac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bba:	f107 0318 	add.w	r3, r7, #24
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 fc44 	bl	800344c <HAL_RCC_OscConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001bd4:	f000 f81d 	bl	8001c12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd8:	230f      	movs	r3, #15
 8001bda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 ff43 	bl	8003a7c <HAL_RCC_ClockConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001c06:	f000 f804 	bl	8001c12 <Error_Handler>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3750      	adds	r7, #80	; 0x50
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c16:	b672      	cpsid	i
}
 8001c18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <Error_Handler+0x8>

08001c1c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af06      	add	r7, sp, #24
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d15e      	bne.n	8001cea <_Z41__static_initialization_and_destruction_0ii+0xce>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d159      	bne.n	8001cea <_Z41__static_initialization_and_destruction_0ii+0xce>
#include"string.h"
#include "Spike.h"
#include "Coin.h"

 // creating a map//
Map map1(Bitmap_map);
 8001c36:	2300      	movs	r3, #0
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2340      	movs	r3, #64	; 0x40
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	4940      	ldr	r1, [pc, #256]	; (8001d44 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001c44:	4840      	ldr	r0, [pc, #256]	; (8001d48 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001c46:	f7fe ff25 	bl	8000a94 <_ZN3MapC1EPKhiiii>
// creating the player//
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 8001c4a:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2303      	movs	r3, #3
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	2308      	movs	r3, #8
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2308      	movs	r3, #8
 8001c58:	2204      	movs	r2, #4
 8001c5a:	210a      	movs	r1, #10
 8001c5c:	483c      	ldr	r0, [pc, #240]	; (8001d50 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001c5e:	f7ff f8a9 	bl	8000db4 <_ZN6PlayerC1EiiiiiPKh>

//creating blocks//
Block B[10];
 8001c62:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001c64:	2409      	movs	r4, #9
 8001c66:	461d      	mov	r5, r3
 8001c68:	2c00      	cmp	r4, #0
 8001c6a:	db10      	blt.n	8001c8e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	9303      	str	r3, [sp, #12]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	230a      	movs	r3, #10
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	4628      	mov	r0, r5
 8001c84:	f7fe fc4a 	bl	800051c <_ZN5BlockC1EiiiiPKhii>
 8001c88:	3534      	adds	r5, #52	; 0x34
 8001c8a:	3c01      	subs	r4, #1
 8001c8c:	e7ec      	b.n	8001c68 <_Z41__static_initialization_and_destruction_0ii+0x4c>

//creating Mobs//
Mob m1(95,54);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9304      	str	r3, [sp, #16]
 8001c92:	2301      	movs	r3, #1
 8001c94:	9303      	str	r3, [sp, #12]
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2236      	movs	r2, #54	; 0x36
 8001ca6:	215f      	movs	r1, #95	; 0x5f
 8001ca8:	482d      	ldr	r0, [pc, #180]	; (8001d60 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001caa:	f7fe ff51 	bl	8000b50 <_ZN3MobC1EiiiiiPKhii>

//creating spikes//
Spike S[6];
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001cb0:	2405      	movs	r4, #5
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	2c00      	cmp	r4, #0
 8001cb6:	db0c      	blt.n	8001cd2 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	f7ff f95a 	bl	8000f80 <_ZN5SpikeC1EiiiiPKh>
 8001ccc:	3528      	adds	r5, #40	; 0x28
 8001cce:	3c01      	subs	r4, #1
 8001cd0:	e7f0      	b.n	8001cb4 <_Z41__static_initialization_and_destruction_0ii+0x98>

//creating coins
Coin c1(119,36);
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	2306      	movs	r3, #6
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2306      	movs	r3, #6
 8001ce0:	2224      	movs	r2, #36	; 0x24
 8001ce2:	2177      	movs	r1, #119	; 0x77
 8001ce4:	4822      	ldr	r0, [pc, #136]	; (8001d70 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001ce6:	f7fe fd9b 	bl	8000820 <_ZN4CoinC1EiiiiPKhi>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d124      	bne.n	8001d3a <_Z41__static_initialization_and_destruction_0ii+0x11e>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d11f      	bne.n	8001d3a <_Z41__static_initialization_and_destruction_0ii+0x11e>
 8001cfa:	481d      	ldr	r0, [pc, #116]	; (8001d70 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001cfc:	f7fe feaa 	bl	8000a54 <_ZN4CoinD1Ev>
Spike S[6];
 8001d00:	4c1c      	ldr	r4, [pc, #112]	; (8001d74 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001d04:	429c      	cmp	r4, r3
 8001d06:	d005      	beq.n	8001d14 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 8001d08:	3c28      	subs	r4, #40	; 0x28
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4620      	mov	r0, r4
 8001d10:	4798      	blx	r3
 8001d12:	e7f6      	b.n	8001d02 <_Z41__static_initialization_and_destruction_0ii+0xe6>
Mob m1(95,54);
 8001d14:	4812      	ldr	r0, [pc, #72]	; (8001d60 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001d16:	f7ff f82d 	bl	8000d74 <_ZN3MobD1Ev>
Block B[10];
 8001d1a:	4c17      	ldr	r4, [pc, #92]	; (8001d78 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001d1e:	429c      	cmp	r4, r3
 8001d20:	d005      	beq.n	8001d2e <_Z41__static_initialization_and_destruction_0ii+0x112>
 8001d22:	3c34      	subs	r4, #52	; 0x34
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4798      	blx	r3
 8001d2c:	e7f6      	b.n	8001d1c <_Z41__static_initialization_and_destruction_0ii+0x100>
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 8001d2e:	4808      	ldr	r0, [pc, #32]	; (8001d50 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001d30:	f7ff f906 	bl	8000f40 <_ZN6PlayerD1Ev>
Map map1(Bitmap_map);
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001d36:	f7fe feeb 	bl	8000b10 <_ZN3MapD1Ev>
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bdb0      	pop	{r4, r5, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	080053e0 	.word	0x080053e0
 8001d48:	200000f0 	.word	0x200000f0
 8001d4c:	080057e0 	.word	0x080057e0
 8001d50:	20000108 	.word	0x20000108
 8001d54:	20000138 	.word	0x20000138
 8001d58:	080057e8 	.word	0x080057e8
 8001d5c:	080057fc 	.word	0x080057fc
 8001d60:	20000340 	.word	0x20000340
 8001d64:	20000374 	.word	0x20000374
 8001d68:	08005804 	.word	0x08005804
 8001d6c:	0800580c 	.word	0x0800580c
 8001d70:	20000464 	.word	0x20000464
 8001d74:	20000464 	.word	0x20000464
 8001d78:	20000340 	.word	0x20000340

08001d7c <_GLOBAL__sub_I_map1>:
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff ff49 	bl	8001c1c <_Z41__static_initialization_and_destruction_0ii>
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_GLOBAL__sub_D_map1>:
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ff41 	bl	8001c1c <_Z41__static_initialization_and_destruction_0ii>
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	9302      	str	r3, [sp, #8]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	1dfb      	adds	r3, r7, #7
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2178      	movs	r1, #120	; 0x78
 8001dca:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <ssd1306_WriteCommand+0x2c>)
 8001dcc:	f000 fe9c 	bl	8002b08 <HAL_I2C_Mem_Write>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200000a4 	.word	0x200000a4

08001ddc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af04      	add	r7, sp, #16
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f04f 32ff 	mov.w	r2, #4294967295
 8001dee:	9202      	str	r2, [sp, #8]
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	2178      	movs	r1, #120	; 0x78
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <ssd1306_WriteData+0x30>)
 8001dfe:	f000 fe83 	bl	8002b08 <HAL_I2C_Mem_Write>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200000a4 	.word	0x200000a4

08001e10 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e14:	f7ff ffc2 	bl	8001d9c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e18:	2064      	movs	r0, #100	; 0x64
 8001e1a:	f000 fb2d 	bl	8002478 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f96e 	bl	8002100 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e24:	2020      	movs	r0, #32
 8001e26:	f7ff ffc1 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff ffbe 	bl	8001dac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e30:	20b0      	movs	r0, #176	; 0xb0
 8001e32:	f7ff ffbb 	bl	8001dac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e36:	20c8      	movs	r0, #200	; 0xc8
 8001e38:	f7ff ffb8 	bl	8001dac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff ffb5 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e42:	2010      	movs	r0, #16
 8001e44:	f7ff ffb2 	bl	8001dac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e48:	2040      	movs	r0, #64	; 0x40
 8001e4a:	f7ff ffaf 	bl	8001dac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001e4e:	20ff      	movs	r0, #255	; 0xff
 8001e50:	f000 f943 	bl	80020da <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e54:	20a1      	movs	r0, #161	; 0xa1
 8001e56:	f7ff ffa9 	bl	8001dac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e5a:	20a6      	movs	r0, #166	; 0xa6
 8001e5c:	f7ff ffa6 	bl	8001dac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001e60:	20a8      	movs	r0, #168	; 0xa8
 8001e62:	f7ff ffa3 	bl	8001dac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001e66:	203f      	movs	r0, #63	; 0x3f
 8001e68:	f7ff ffa0 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e6c:	20a4      	movs	r0, #164	; 0xa4
 8001e6e:	f7ff ff9d 	bl	8001dac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001e72:	20d3      	movs	r0, #211	; 0xd3
 8001e74:	f7ff ff9a 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff ff97 	bl	8001dac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e7e:	20d5      	movs	r0, #213	; 0xd5
 8001e80:	f7ff ff94 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001e84:	20f0      	movs	r0, #240	; 0xf0
 8001e86:	f7ff ff91 	bl	8001dac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001e8a:	20d9      	movs	r0, #217	; 0xd9
 8001e8c:	f7ff ff8e 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001e90:	2022      	movs	r0, #34	; 0x22
 8001e92:	f7ff ff8b 	bl	8001dac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001e96:	20da      	movs	r0, #218	; 0xda
 8001e98:	f7ff ff88 	bl	8001dac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001e9c:	2012      	movs	r0, #18
 8001e9e:	f7ff ff85 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ea2:	20db      	movs	r0, #219	; 0xdb
 8001ea4:	f7ff ff82 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ea8:	2020      	movs	r0, #32
 8001eaa:	f7ff ff7f 	bl	8001dac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001eae:	208d      	movs	r0, #141	; 0x8d
 8001eb0:	f7ff ff7c 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001eb4:	2014      	movs	r0, #20
 8001eb6:	f7ff ff79 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 f920 	bl	8002100 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f000 f80f 	bl	8001ee4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ec6:	f000 f831 	bl	8001f2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <ssd1306_Init+0xd0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <ssd1306_Init+0xd0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ed6:	4b02      	ldr	r3, [pc, #8]	; (8001ee0 <ssd1306_Init+0xd0>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	711a      	strb	r2, [r3, #4]
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200008a0 	.word	0x200008a0

08001ee4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e00d      	b.n	8001f10 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <ssd1306_Fill+0x1a>
 8001efa:	2100      	movs	r1, #0
 8001efc:	e000      	b.n	8001f00 <ssd1306_Fill+0x1c>
 8001efe:	21ff      	movs	r1, #255	; 0xff
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <ssd1306_Fill+0x44>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	460a      	mov	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	d3ed      	bcc.n	8001ef4 <ssd1306_Fill+0x10>
    }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200004a0 	.word	0x200004a0

08001f2c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f32:	2300      	movs	r3, #0
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	e016      	b.n	8001f66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	3b50      	subs	r3, #80	; 0x50
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff34 	bl	8001dac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff ff31 	bl	8001dac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001f4a:	2010      	movs	r0, #16
 8001f4c:	f7ff ff2e 	bl	8001dac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <ssd1306_UpdateScreen+0x4c>)
 8001f56:	4413      	add	r3, r2
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff3e 	bl	8001ddc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	3301      	adds	r3, #1
 8001f64:	71fb      	strb	r3, [r7, #7]
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b07      	cmp	r3, #7
 8001f6a:	d9e5      	bls.n	8001f38 <ssd1306_UpdateScreen+0xc>
    }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200004a0 	.word	0x200004a0

08001f7c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
 8001f86:	460b      	mov	r3, r1
 8001f88:	71bb      	strb	r3, [r7, #6]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db3d      	blt.n	8002012 <ssd1306_DrawPixel+0x96>
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	2b3f      	cmp	r3, #63	; 0x3f
 8001f9a:	d83a      	bhi.n	8002012 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001f9c:	797b      	ldrb	r3, [r7, #5]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d11a      	bne.n	8001fd8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	08db      	lsrs	r3, r3, #3
 8001fa8:	b2d8      	uxtb	r0, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	01db      	lsls	r3, r3, #7
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <ssd1306_DrawPixel+0xa4>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	b25a      	sxtb	r2, r3
 8001fb6:	79bb      	ldrb	r3, [r7, #6]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b259      	sxtb	r1, r3
 8001fc8:	79fa      	ldrb	r2, [r7, #7]
 8001fca:	4603      	mov	r3, r0
 8001fcc:	01db      	lsls	r3, r3, #7
 8001fce:	4413      	add	r3, r2
 8001fd0:	b2c9      	uxtb	r1, r1
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <ssd1306_DrawPixel+0xa4>)
 8001fd4:	54d1      	strb	r1, [r2, r3]
 8001fd6:	e01d      	b.n	8002014 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fd8:	79fa      	ldrb	r2, [r7, #7]
 8001fda:	79bb      	ldrb	r3, [r7, #6]
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	b2d8      	uxtb	r0, r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	01db      	lsls	r3, r3, #7
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <ssd1306_DrawPixel+0xa4>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	4013      	ands	r3, r2
 8002000:	b259      	sxtb	r1, r3
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	4603      	mov	r3, r0
 8002006:	01db      	lsls	r3, r3, #7
 8002008:	4413      	add	r3, r2
 800200a:	b2c9      	uxtb	r1, r1
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <ssd1306_DrawPixel+0xa4>)
 800200e:	54d1      	strb	r1, [r2, r3]
 8002010:	e000      	b.n	8002014 <ssd1306_DrawPixel+0x98>
        return;
 8002012:	bf00      	nop
    }
}
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200004a0 	.word	0x200004a0

08002024 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	603a      	str	r2, [r7, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
 8002032:	460b      	mov	r3, r1
 8002034:	71bb      	strb	r3, [r7, #6]
 8002036:	4613      	mov	r3, r2
 8002038:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800203a:	797b      	ldrb	r3, [r7, #5]
 800203c:	3307      	adds	r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	da00      	bge.n	8002044 <ssd1306_DrawBitmap+0x20>
 8002042:	3307      	adds	r3, #7
 8002044:	10db      	asrs	r3, r3, #3
 8002046:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db3e      	blt.n	80020d2 <ssd1306_DrawBitmap+0xae>
 8002054:	79bb      	ldrb	r3, [r7, #6]
 8002056:	2b3f      	cmp	r3, #63	; 0x3f
 8002058:	d83b      	bhi.n	80020d2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800205a:	2300      	movs	r3, #0
 800205c:	73bb      	strb	r3, [r7, #14]
 800205e:	e033      	b.n	80020c8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002060:	2300      	movs	r3, #0
 8002062:	737b      	strb	r3, [r7, #13]
 8002064:	e026      	b.n	80020b4 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 8002066:	7b7b      	ldrb	r3, [r7, #13]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e00d      	b.n	8002094 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	7b7a      	ldrb	r2, [r7, #13]
 8002084:	08d2      	lsrs	r2, r2, #3
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4413      	add	r3, r2
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4413      	add	r3, r2
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8002094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002098:	2b00      	cmp	r3, #0
 800209a:	da08      	bge.n	80020ae <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800209c:	79fa      	ldrb	r2, [r7, #7]
 800209e:	7b7b      	ldrb	r3, [r7, #13]
 80020a0:	4413      	add	r3, r2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	7f3a      	ldrb	r2, [r7, #28]
 80020a6:	79b9      	ldrb	r1, [r7, #6]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff67 	bl	8001f7c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80020ae:	7b7b      	ldrb	r3, [r7, #13]
 80020b0:	3301      	adds	r3, #1
 80020b2:	737b      	strb	r3, [r7, #13]
 80020b4:	7b7a      	ldrb	r2, [r7, #13]
 80020b6:	797b      	ldrb	r3, [r7, #5]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d3d4      	bcc.n	8002066 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80020bc:	7bbb      	ldrb	r3, [r7, #14]
 80020be:	3301      	adds	r3, #1
 80020c0:	73bb      	strb	r3, [r7, #14]
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	3301      	adds	r3, #1
 80020c6:	71bb      	strb	r3, [r7, #6]
 80020c8:	7bba      	ldrb	r2, [r7, #14]
 80020ca:	7e3b      	ldrb	r3, [r7, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3c7      	bcc.n	8002060 <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 80020d0:	e000      	b.n	80020d4 <ssd1306_DrawBitmap+0xb0>
        return;
 80020d2:	bf00      	nop
}
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80020e4:	2381      	movs	r3, #129	; 0x81
 80020e6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fe5e 	bl	8001dac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe5a 	bl	8001dac <ssd1306_WriteCommand>
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002110:	23af      	movs	r3, #175	; 0xaf
 8002112:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <ssd1306_SetDisplayOn+0x38>)
 8002116:	2201      	movs	r2, #1
 8002118:	715a      	strb	r2, [r3, #5]
 800211a:	e004      	b.n	8002126 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800211c:	23ae      	movs	r3, #174	; 0xae
 800211e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <ssd1306_SetDisplayOn+0x38>)
 8002122:	2200      	movs	r2, #0
 8002124:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fe3f 	bl	8001dac <ssd1306_WriteCommand>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200008a0 	.word	0x200008a0

0800213c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_MspInit+0x44>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_MspInit+0x44>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6613      	str	r3, [r2, #96]	; 0x60
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_MspInit+0x44>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_MspInit+0x44>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_MspInit+0x44>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_MspInit+0x44>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d0:	f000 f934 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <SystemInit+0x20>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <SystemInit+0x20>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002202:	4a23      	ldr	r2, [pc, #140]	; (8002290 <MX_USART2_UART_Init+0x94>)
 8002204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_USART2_UART_Init+0x90>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_USART2_UART_Init+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_USART2_UART_Init+0x90>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002244:	4811      	ldr	r0, [pc, #68]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002246:	f002 f825 	bl	8004294 <HAL_UART_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002250:	f7ff fcdf 	bl	8001c12 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002254:	2100      	movs	r1, #0
 8002256:	480d      	ldr	r0, [pc, #52]	; (800228c <MX_USART2_UART_Init+0x90>)
 8002258:	f002 fd26 	bl	8004ca8 <HAL_UARTEx_SetTxFifoThreshold>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002262:	f7ff fcd6 	bl	8001c12 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002266:	2100      	movs	r1, #0
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <MX_USART2_UART_Init+0x90>)
 800226a:	f002 fd5b 	bl	8004d24 <HAL_UARTEx_SetRxFifoThreshold>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002274:	f7ff fccd 	bl	8001c12 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <MX_USART2_UART_Init+0x90>)
 800227a:	f002 fcdc 	bl	8004c36 <HAL_UARTEx_DisableFifoMode>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002284:	f7ff fcc5 	bl	8001c12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200008a8 	.word	0x200008a8
 8002290:	40004400 	.word	0x40004400

08002294 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b09a      	sub	sp, #104	; 0x68
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	2244      	movs	r2, #68	; 0x44
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fdf1 	bl	8004e9c <memset>
  if(uartHandle->Instance==USART2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1f      	ldr	r2, [pc, #124]	; (800233c <HAL_UART_MspInit+0xa8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d136      	bne.n	8002332 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 fdef 	bl	8003eb4 <HAL_RCCEx_PeriphCLKConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022dc:	f7ff fc99 	bl	8001c12 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_UART_MspInit+0xac>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	4a16      	ldr	r2, [pc, #88]	; (8002340 <HAL_UART_MspInit+0xac>)
 80022e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ea:	6593      	str	r3, [r2, #88]	; 0x58
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_UART_MspInit+0xac>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_UART_MspInit+0xac>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_UART_MspInit+0xac>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_UART_MspInit+0xac>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002310:	230c      	movs	r3, #12
 8002312:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002320:	2307      	movs	r3, #7
 8002322:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232e:	f000 f9a9 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002332:	bf00      	nop
 8002334:	3768      	adds	r7, #104	; 0x68
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40004400 	.word	0x40004400
 8002340:	40021000 	.word	0x40021000

08002344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002346:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <LoopForever+0x6>)
  ldr r1, =_edata
 800234a:	490e      	ldr	r1, [pc, #56]	; (8002384 <LoopForever+0xa>)
  ldr r2, =_sidata
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <LoopForever+0xe>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002350:	e002      	b.n	8002358 <LoopCopyDataInit>

08002352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002356:	3304      	adds	r3, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800235c:	d3f9      	bcc.n	8002352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002360:	4c0b      	ldr	r4, [pc, #44]	; (8002390 <LoopForever+0x16>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002364:	e001      	b.n	800236a <LoopFillZerobss>

08002366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002368:	3204      	adds	r2, #4

0800236a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800236c:	d3fb      	bcc.n	8002366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800236e:	f7ff ff33 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002372:	f002 fd67 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002376:	f7ff fb55 	bl	8001a24 <main>

0800237a <LoopForever>:

LoopForever:
    b LoopForever
 800237a:	e7fe      	b.n	800237a <LoopForever>
  ldr   r0, =_estack
 800237c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002388:	0800586c 	.word	0x0800586c
  ldr r2, =_sbss
 800238c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002390:	20000944 	.word	0x20000944

08002394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_2_IRQHandler>

08002396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f93d 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f80e 	bl	80023c8 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	e001      	b.n	80023bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b8:	f7ff fec0 	bl	800213c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023bc:	79fb      	ldrb	r3, [r7, #7]

}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_InitTick+0x68>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d022      	beq.n	8002422 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_InitTick+0x6c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_InitTick+0x68>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f93a 	bl	800266a <HAL_SYSTICK_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	d809      	bhi.n	8002416 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002402:	2200      	movs	r2, #0
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	f04f 30ff 	mov.w	r0, #4294967295
 800240a:	f000 f914 	bl	8002636 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_InitTick+0x70>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e007      	b.n	8002426 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e004      	b.n	8002426 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e001      	b.n	8002426 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000020 	.word	0x20000020
 8002434:	20000018 	.word	0x20000018
 8002438:	2000001c 	.word	0x2000001c

0800243c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_IncTick+0x1c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_IncTick+0x20>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4413      	add	r3, r2
 800244a:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_IncTick+0x1c>)
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	20000938 	.word	0x20000938
 800245c:	20000020 	.word	0x20000020

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000938 	.word	0x20000938

08002478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff ffee 	bl	8002460 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d004      	beq.n	800249c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_Delay+0x40>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249c:	bf00      	nop
 800249e:	f7ff ffdf 	bl	8002460 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d8f7      	bhi.n	800249e <HAL_Delay+0x26>
  {
  }
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000020 	.word	0x20000020

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff47 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002644:	f7ff ff5e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7ff ff90 	bl	8002574 <NVIC_EncodePriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff5f 	bl	8002520 <__NVIC_SetPriority>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffb2 	bl	80025dc <SysTick_Config>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002692:	e15a      	b.n	800294a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 814c 	beq.w	8002944 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d005      	beq.n	80026c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d130      	bne.n	8002726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026fa:	2201      	movs	r2, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 0201 	and.w	r2, r3, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b03      	cmp	r3, #3
 8002730:	d017      	beq.n	8002762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d123      	bne.n	80027b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	08da      	lsrs	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3208      	adds	r2, #8
 8002776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	6939      	ldr	r1, [r7, #16]
 80027b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0203 	and.w	r2, r3, #3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80a6 	beq.w	8002944 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f8:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_GPIO_Init+0x2e4>)
 80027fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fc:	4a5a      	ldr	r2, [pc, #360]	; (8002968 <HAL_GPIO_Init+0x2e4>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6613      	str	r3, [r2, #96]	; 0x60
 8002804:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_GPIO_Init+0x2e4>)
 8002806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002810:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_GPIO_Init+0x2e8>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800283a:	d01f      	beq.n	800287c <HAL_GPIO_Init+0x1f8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a4c      	ldr	r2, [pc, #304]	; (8002970 <HAL_GPIO_Init+0x2ec>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d019      	beq.n	8002878 <HAL_GPIO_Init+0x1f4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a4b      	ldr	r2, [pc, #300]	; (8002974 <HAL_GPIO_Init+0x2f0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_GPIO_Init+0x1f0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a4a      	ldr	r2, [pc, #296]	; (8002978 <HAL_GPIO_Init+0x2f4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00d      	beq.n	8002870 <HAL_GPIO_Init+0x1ec>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a49      	ldr	r2, [pc, #292]	; (800297c <HAL_GPIO_Init+0x2f8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <HAL_GPIO_Init+0x1e8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a48      	ldr	r2, [pc, #288]	; (8002980 <HAL_GPIO_Init+0x2fc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_GPIO_Init+0x1e4>
 8002864:	2305      	movs	r3, #5
 8002866:	e00a      	b.n	800287e <HAL_GPIO_Init+0x1fa>
 8002868:	2306      	movs	r3, #6
 800286a:	e008      	b.n	800287e <HAL_GPIO_Init+0x1fa>
 800286c:	2304      	movs	r3, #4
 800286e:	e006      	b.n	800287e <HAL_GPIO_Init+0x1fa>
 8002870:	2303      	movs	r3, #3
 8002872:	e004      	b.n	800287e <HAL_GPIO_Init+0x1fa>
 8002874:	2302      	movs	r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x1fa>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_GPIO_Init+0x1fa>
 800287c:	2300      	movs	r3, #0
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288e:	4937      	ldr	r1, [pc, #220]	; (800296c <HAL_GPIO_Init+0x2e8>)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800289c:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_GPIO_Init+0x300>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c0:	4a30      	ldr	r2, [pc, #192]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028c6:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ea:	4a26      	ldr	r2, [pc, #152]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_GPIO_Init+0x300>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_GPIO_Init+0x300>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800293e:	4a11      	ldr	r2, [pc, #68]	; (8002984 <HAL_GPIO_Init+0x300>)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f ae9d 	bne.w	8002694 <HAL_GPIO_Init+0x10>
  }
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000
 8002970:	48000400 	.word	0x48000400
 8002974:	48000800 	.word	0x48000800
 8002978:	48000c00 	.word	0x48000c00
 800297c:	48001000 	.word	0x48001000
 8002980:	48001400 	.word	0x48001400
 8002984:	40010400 	.word	0x40010400

08002988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e001      	b.n	80029aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e081      	b.n	8002afe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe fc5c 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e006      	b.n	8002a70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d104      	bne.n	8002a82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69d9      	ldr	r1, [r3, #28]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	817b      	strh	r3, [r7, #10]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	813b      	strh	r3, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	f040 80f9 	bne.w	8002d22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x34>
 8002b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0ed      	b.n	8002d24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Mem_Write+0x4e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e0e6      	b.n	8002d24 <HAL_I2C_Mem_Write+0x21c>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b5e:	f7ff fc7f 	bl	8002460 <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2319      	movs	r3, #25
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f955 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0d1      	b.n	8002d24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2221      	movs	r2, #33	; 0x21
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ba8:	88f8      	ldrh	r0, [r7, #6]
 8002baa:	893a      	ldrh	r2, [r7, #8]
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f8b9 	bl	8002d30 <I2C_RequestMemoryWrite>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0a9      	b.n	8002d24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2bff      	cmp	r3, #255	; 0xff
 8002bd8:	d90e      	bls.n	8002bf8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	22ff      	movs	r2, #255	; 0xff
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	8979      	ldrh	r1, [r7, #10]
 8002be8:	2300      	movs	r3, #0
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fabd 	bl	8003170 <I2C_TransferConfig>
 8002bf6:	e00f      	b.n	8002c18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	8979      	ldrh	r1, [r7, #10]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 faac 	bl	8003170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f93f 	bl	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e07b      	b.n	8002d24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d034      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x1c8>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d130      	bne.n	8002cd0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	2200      	movs	r2, #0
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f8d1 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e04d      	b.n	8002d24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2bff      	cmp	r3, #255	; 0xff
 8002c90:	d90e      	bls.n	8002cb0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fa61 	bl	8003170 <I2C_TransferConfig>
 8002cae:	e00f      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	8979      	ldrh	r1, [r7, #10]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fa50 	bl	8003170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d19e      	bne.n	8002c18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f91e 	bl	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e01a      	b.n	8002d24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_I2C_Mem_Write+0x224>)
 8002d02:	400b      	ands	r3, r1
 8002d04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	fe00e800 	.word	0xfe00e800

08002d30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	460b      	mov	r3, r1
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <I2C_RequestMemoryWrite+0xa4>)
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa09 	bl	8003170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f89c 	bl	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02c      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d78:	893b      	ldrh	r3, [r7, #8]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
 8002d82:	e015      	b.n	8002db0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d84:	893b      	ldrh	r3, [r7, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	69b9      	ldr	r1, [r7, #24]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f882 	bl	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e012      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f830 	bl	8002e20 <I2C_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	80002000 	.word	0x80002000

08002dd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d103      	bne.n	8002df6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d007      	beq.n	8002e14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	619a      	str	r2, [r3, #24]
  }
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e30:	e022      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d01e      	beq.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7ff fb11 	bl	8002460 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d113      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e00f      	b.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4013      	ands	r3, r2
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d0cd      	beq.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eac:	e02c      	b.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f870 	bl	8002f98 <I2C_IsErrorOccurred>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e02a      	b.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d01e      	beq.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7ff fac9 	bl	8002460 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d113      	bne.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e007      	b.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d1cb      	bne.n	8002eae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f2c:	e028      	b.n	8002f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f830 	bl	8002f98 <I2C_IsErrorOccurred>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e026      	b.n	8002f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7ff fa8d 	bl	8002460 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d113      	bne.n	8002f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e007      	b.n	8002f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d1cf      	bne.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d075      	beq.n	80030b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fcc:	e056      	b.n	800307c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d052      	beq.n	800307c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7ff fa43 	bl	8002460 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_IsErrorOccurred+0x54>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d147      	bne.n	800307c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ffe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300e:	d12e      	bne.n	800306e <I2C_IsErrorOccurred+0xd6>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003016:	d02a      	beq.n	800306e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	2b20      	cmp	r3, #32
 800301c:	d027      	beq.n	800306e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800302c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800302e:	f7ff fa17 	bl	8002460 <HAL_GetTick>
 8003032:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003034:	e01b      	b.n	800306e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003036:	f7ff fa13 	bl	8002460 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b19      	cmp	r3, #25
 8003042:	d914      	bls.n	800306e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d1dc      	bne.n	8003036 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b20      	cmp	r3, #32
 8003088:	d003      	beq.n	8003092 <I2C_IsErrorOccurred+0xfa>
 800308a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800308e:	2b00      	cmp	r3, #0
 8003090:	d09d      	beq.n	8002fce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2220      	movs	r2, #32
 80030a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f043 0308 	orr.w	r3, r3, #8
 80030ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800311e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01c      	beq.n	8003160 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fe56 	bl	8002dd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <I2C_IsErrorOccurred+0x1d4>)
 8003138:	400b      	ands	r3, r1
 800313a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003164:	4618      	mov	r0, r3
 8003166:	3728      	adds	r7, #40	; 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	4613      	mov	r3, r2
 8003180:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003188:	7a7b      	ldrb	r3, [r7, #9]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003190:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	4313      	orrs	r3, r2
 800319a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800319e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	0d5b      	lsrs	r3, r3, #21
 80031aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <I2C_TransferConfig+0x60>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	43db      	mvns	r3, r3
 80031b4:	ea02 0103 	and.w	r1, r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	03ff63ff 	.word	0x03ff63ff

080031d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d138      	bne.n	800325c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e032      	b.n	800325e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2224      	movs	r2, #36	; 0x24
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b20      	cmp	r3, #32
 800327e:	d139      	bne.n	80032f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800328a:	2302      	movs	r3, #2
 800328c:	e033      	b.n	80032f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2224      	movs	r2, #36	; 0x24
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d141      	bne.n	8003396 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003312:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d131      	bne.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003320:	4b47      	ldr	r3, [pc, #284]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003326:	4a46      	ldr	r2, [pc, #280]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800332c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003338:	4a41      	ldr	r2, [pc, #260]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003340:	4b40      	ldr	r3, [pc, #256]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2232      	movs	r2, #50	; 0x32
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	4a3f      	ldr	r2, [pc, #252]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	0c9b      	lsrs	r3, r3, #18
 8003352:	3301      	adds	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003356:	e002      	b.n	800335e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3b01      	subs	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d102      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f2      	bne.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337e:	d158      	bne.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e057      	b.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003384:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338a:	4a2d      	ldr	r2, [pc, #180]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003394:	e04d      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d141      	bne.n	8003422 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800339e:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033aa:	d131      	bne.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033ac:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b2:	4a23      	ldr	r2, [pc, #140]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033cc:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2232      	movs	r2, #50	; 0x32
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	0c9b      	lsrs	r3, r3, #18
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e2:	e002      	b.n	80033ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f6:	d102      	bne.n	80033fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f2      	bne.n	80033e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340a:	d112      	bne.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e011      	b.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003420:	e007      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800342a:	4a05      	ldr	r2, [pc, #20]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003430:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	40007000 	.word	0x40007000
 8003444:	20000018 	.word	0x20000018
 8003448:	431bde83 	.word	0x431bde83

0800344c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e306      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d075      	beq.n	8003556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346a:	4b97      	ldr	r3, [pc, #604]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003474:	4b94      	ldr	r3, [pc, #592]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d102      	bne.n	800348a <HAL_RCC_OscConfig+0x3e>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d002      	beq.n	8003490 <HAL_RCC_OscConfig+0x44>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10b      	bne.n	80034a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	4b8d      	ldr	r3, [pc, #564]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d05b      	beq.n	8003554 <HAL_RCC_OscConfig+0x108>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d157      	bne.n	8003554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e2e1      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d106      	bne.n	80034c0 <HAL_RCC_OscConfig+0x74>
 80034b2:	4b85      	ldr	r3, [pc, #532]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a84      	ldr	r2, [pc, #528]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e01d      	b.n	80034fc <HAL_RCC_OscConfig+0xb0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x98>
 80034ca:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7e      	ldr	r2, [pc, #504]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7b      	ldr	r2, [pc, #492]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0xb0>
 80034e4:	4b78      	ldr	r3, [pc, #480]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a77      	ldr	r2, [pc, #476]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b75      	ldr	r3, [pc, #468]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a74      	ldr	r2, [pc, #464]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80034f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe ffac 	bl	8002460 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe ffa8 	bl	8002460 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e2a6      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351e:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0xc0>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe ff98 	bl	8002460 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe ff94 	bl	8002460 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e292      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003546:	4b60      	ldr	r3, [pc, #384]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0xe8>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d075      	beq.n	800364e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003562:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356c:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d102      	bne.n	8003582 <HAL_RCC_OscConfig+0x136>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d002      	beq.n	8003588 <HAL_RCC_OscConfig+0x13c>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d11f      	bne.n	80035c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003588:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_OscConfig+0x154>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e265      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	4946      	ldr	r1, [pc, #280]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035b4:	4b45      	ldr	r3, [pc, #276]	; (80036cc <HAL_RCC_OscConfig+0x280>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe ff05 	bl	80023c8 <HAL_InitTick>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d043      	beq.n	800364c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e251      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d023      	beq.n	8003618 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d0:	4b3d      	ldr	r3, [pc, #244]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe ff40 	bl	8002460 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e4:	f7fe ff3c 	bl	8002460 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e23a      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	492d      	ldr	r1, [pc, #180]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
 8003616:	e01a      	b.n	800364e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800361e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe ff1c 	bl	8002460 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362c:	f7fe ff18 	bl	8002460 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e216      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x1e0>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d041      	beq.n	80036de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01c      	beq.n	800369c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fe fef5 	bl	8002460 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367a:	f7fe fef1 	bl	8002460 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e1ef      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800368c:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800368e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0ef      	beq.n	800367a <HAL_RCC_OscConfig+0x22e>
 800369a:	e020      	b.n	80036de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_RCC_OscConfig+0x27c>)
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe fed8 	bl	8002460 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b2:	e00d      	b.n	80036d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b4:	f7fe fed4 	bl	8002460 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d906      	bls.n	80036d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1d2      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036d0:	4b8c      	ldr	r3, [pc, #560]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1ea      	bne.n	80036b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80a6 	beq.w	8003838 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036f0:	4b84      	ldr	r3, [pc, #528]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_OscConfig+0x2b4>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x2b6>
 8003700:	2300      	movs	r3, #0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b7f      	ldr	r3, [pc, #508]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	4a7e      	ldr	r2, [pc, #504]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003710:	6593      	str	r3, [r2, #88]	; 0x58
 8003712:	4b7c      	ldr	r3, [pc, #496]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800371e:	2301      	movs	r3, #1
 8003720:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003722:	4b79      	ldr	r3, [pc, #484]	; (8003908 <HAL_RCC_OscConfig+0x4bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d118      	bne.n	8003760 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800372e:	4b76      	ldr	r3, [pc, #472]	; (8003908 <HAL_RCC_OscConfig+0x4bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a75      	ldr	r2, [pc, #468]	; (8003908 <HAL_RCC_OscConfig+0x4bc>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373a:	f7fe fe91 	bl	8002460 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003742:	f7fe fe8d 	bl	8002460 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e18b      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003754:	4b6c      	ldr	r3, [pc, #432]	; (8003908 <HAL_RCC_OscConfig+0x4bc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d108      	bne.n	800377a <HAL_RCC_OscConfig+0x32e>
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	4a65      	ldr	r2, [pc, #404]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003778:	e024      	b.n	80037c4 <HAL_RCC_OscConfig+0x378>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d110      	bne.n	80037a4 <HAL_RCC_OscConfig+0x358>
 8003782:	4b60      	ldr	r3, [pc, #384]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	4a5e      	ldr	r2, [pc, #376]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 800378a:	f043 0304 	orr.w	r3, r3, #4
 800378e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003792:	4b5c      	ldr	r3, [pc, #368]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	4a5a      	ldr	r2, [pc, #360]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a2:	e00f      	b.n	80037c4 <HAL_RCC_OscConfig+0x378>
 80037a4:	4b57      	ldr	r3, [pc, #348]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	4a56      	ldr	r2, [pc, #344]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d016      	beq.n	80037fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fe fe48 	bl	8002460 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe fe44 	bl	8002460 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e140      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ea:	4b46      	ldr	r3, [pc, #280]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ed      	beq.n	80037d4 <HAL_RCC_OscConfig+0x388>
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fe fe31 	bl	8002460 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe fe2d 	bl	8002460 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e129      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003818:	4b3a      	ldr	r3, [pc, #232]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1ed      	bne.n	8003802 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003826:	7ffb      	ldrb	r3, [r7, #31]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382c:	4b35      	ldr	r3, [pc, #212]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	4a34      	ldr	r2, [pc, #208]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003836:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d03c      	beq.n	80038be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01c      	beq.n	8003886 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800384c:	4b2d      	ldr	r3, [pc, #180]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003852:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe fe00 	bl	8002460 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003864:	f7fe fdfc 	bl	8002460 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0fa      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <HAL_RCC_OscConfig+0x418>
 8003884:	e01b      	b.n	80038be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 8003888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fe fde3 	bl	8002460 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800389e:	f7fe fddf 	bl	8002460 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0dd      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80038b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ef      	bne.n	800389e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80d1 	beq.w	8003a6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	f000 808b 	beq.w	80039ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d15e      	bne.n	800399c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a08      	ldr	r2, [pc, #32]	; (8003904 <HAL_RCC_OscConfig+0x4b8>)
 80038e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe fdb9 	bl	8002460 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f0:	e00c      	b.n	800390c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe fdb5 	bl	8002460 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d905      	bls.n	800390c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0b3      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
 8003904:	40021000 	.word	0x40021000
 8003908:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390c:	4b59      	ldr	r3, [pc, #356]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ec      	bne.n	80038f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003918:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <HAL_RCC_OscConfig+0x62c>)
 800391e:	4013      	ands	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6a11      	ldr	r1, [r2, #32]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003928:	3a01      	subs	r2, #1
 800392a:	0112      	lsls	r2, r2, #4
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003932:	0212      	lsls	r2, r2, #8
 8003934:	4311      	orrs	r1, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800393a:	0852      	lsrs	r2, r2, #1
 800393c:	3a01      	subs	r2, #1
 800393e:	0552      	lsls	r2, r2, #21
 8003940:	4311      	orrs	r1, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003946:	0852      	lsrs	r2, r2, #1
 8003948:	3a01      	subs	r2, #1
 800394a:	0652      	lsls	r2, r2, #25
 800394c:	4311      	orrs	r1, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003952:	06d2      	lsls	r2, r2, #27
 8003954:	430a      	orrs	r2, r1
 8003956:	4947      	ldr	r1, [pc, #284]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 8003958:	4313      	orrs	r3, r2
 800395a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a44      	ldr	r2, [pc, #272]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 8003962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003966:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003968:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a41      	ldr	r2, [pc, #260]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 800396e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003972:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe fd74 	bl	8002460 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe fd70 	bl	8002460 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e06e      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398e:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x530>
 800399a:	e066      	b.n	8003a6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399c:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a34      	ldr	r2, [pc, #208]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 80039a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039a8:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4a31      	ldr	r2, [pc, #196]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039b4:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 80039ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe fd4c 	bl	8002460 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe fd48 	bl	8002460 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e046      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039de:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x580>
 80039ea:	e03e      	b.n	8003a6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e039      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039f8:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <HAL_RCC_OscConfig+0x628>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d12c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	3b01      	subs	r3, #1
 8003a18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d123      	bne.n	8003a66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d11b      	bne.n	8003a66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d113      	bne.n	8003a66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	019f800c 	.word	0x019f800c

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e11e      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a94:	4b91      	ldr	r3, [pc, #580]	; (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d910      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b8e      	ldr	r3, [pc, #568]	; (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 020f 	bic.w	r2, r3, #15
 8003aaa:	498c      	ldr	r1, [pc, #560]	; (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b8a      	ldr	r3, [pc, #552]	; (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e106      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d073      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d129      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad8:	4b81      	ldr	r3, [pc, #516]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0f4      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ae8:	f000 f99e 	bl	8003e28 <RCC_GetSysClockFreqFromPLLSource>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4a7c      	ldr	r2, [pc, #496]	; (8003ce4 <HAL_RCC_ClockConfig+0x268>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d93f      	bls.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003af6:	4b7a      	ldr	r3, [pc, #488]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d033      	beq.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d12f      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b16:	4b72      	ldr	r3, [pc, #456]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b1e:	4a70      	ldr	r2, [pc, #448]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e024      	b.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b34:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0c6      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b44:	4b66      	ldr	r3, [pc, #408]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0be      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b54:	f000 f8ce 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4a61      	ldr	r2, [pc, #388]	; (8003ce4 <HAL_RCC_ClockConfig+0x268>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d909      	bls.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b62:	4b5f      	ldr	r3, [pc, #380]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b6a:	4a5d      	ldr	r2, [pc, #372]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b5a      	ldr	r3, [pc, #360]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4957      	ldr	r1, [pc, #348]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fe fc6a 	bl	8002460 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fe fc66 	bl	8002460 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e095      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b4e      	ldr	r3, [pc, #312]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd0:	4b43      	ldr	r3, [pc, #268]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a42      	ldr	r2, [pc, #264]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003be8:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bf0:	4a3b      	ldr	r2, [pc, #236]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4936      	ldr	r1, [pc, #216]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d105      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c12:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4a32      	ldr	r2, [pc, #200]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d21d      	bcs.n	8003c68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 020f 	bic.w	r2, r3, #15
 8003c34:	4929      	ldr	r1, [pc, #164]	; (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c3c:	f7fe fc10 	bl	8002460 <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fe fc0c 	bl	8002460 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e03b      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <HAL_RCC_ClockConfig+0x260>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1ed      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c74:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4917      	ldr	r1, [pc, #92]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	490f      	ldr	r1, [pc, #60]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ca6:	f000 f825 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_RCC_ClockConfig+0x264>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	490c      	ldr	r1, [pc, #48]	; (8003ce8 <HAL_RCC_ClockConfig+0x26c>)
 8003cb8:	5ccb      	ldrb	r3, [r1, r3]
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x270>)
 8003cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RCC_ClockConfig+0x274>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe fb7c 	bl	80023c8 <HAL_InitTick>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	04c4b400 	.word	0x04c4b400
 8003ce8:	08005814 	.word	0x08005814
 8003cec:	20000018 	.word	0x20000018
 8003cf0:	2000001c 	.word	0x2000001c

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cfa:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d102      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d06:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	e047      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d102      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	e03e      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d1e:	4b23      	ldr	r3, [pc, #140]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d136      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d10c      	bne.n	8003d62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d48:	4a1a      	ldr	r2, [pc, #104]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	4a16      	ldr	r2, [pc, #88]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d52:	68d2      	ldr	r2, [r2, #12]
 8003d54:	0a12      	lsrs	r2, r2, #8
 8003d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	617b      	str	r3, [r7, #20]
      break;
 8003d60:	e00c      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d62:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6c:	68d2      	ldr	r2, [r2, #12]
 8003d6e:	0a12      	lsrs	r2, r2, #8
 8003d70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]
      break;
 8003d7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0e5b      	lsrs	r3, r3, #25
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e001      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d9c:	693b      	ldr	r3, [r7, #16]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000018 	.word	0x20000018

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dd4:	f7ff fff0 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4904      	ldr	r1, [pc, #16]	; (8003df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	08005824 	.word	0x08005824

08003dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e00:	f7ff ffda 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	0adb      	lsrs	r3, r3, #11
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4904      	ldr	r1, [pc, #16]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	08005824 	.word	0x08005824

08003e28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3301      	adds	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d10c      	bne.n	8003e66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e4c:	4a17      	ldr	r2, [pc, #92]	; (8003eac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e56:	68d2      	ldr	r2, [r2, #12]
 8003e58:	0a12      	lsrs	r2, r2, #8
 8003e5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	617b      	str	r3, [r7, #20]
    break;
 8003e64:	e00c      	b.n	8003e80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	0a12      	lsrs	r2, r2, #8
 8003e74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]
    break;
 8003e7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	0e5b      	lsrs	r3, r3, #25
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e9a:	687b      	ldr	r3, [r7, #4]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	007a1200 	.word	0x007a1200
 8003eb0:	00f42400 	.word	0x00f42400

08003eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8098 	beq.w	8004002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed6:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10d      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	4a3f      	ldr	r2, [pc, #252]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eec:	6593      	str	r3, [r2, #88]	; 0x58
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efa:	2301      	movs	r3, #1
 8003efc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003efe:	4b3a      	ldr	r3, [pc, #232]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a39      	ldr	r2, [pc, #228]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f0a:	f7fe faa9 	bl	8002460 <HAL_GetTick>
 8003f0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f10:	e009      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f12:	f7fe faa5 	bl	8002460 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d902      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	74fb      	strb	r3, [r7, #19]
        break;
 8003f24:	e005      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f26:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ef      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d159      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f38:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01e      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d019      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f54:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f60:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fe fa65 	bl	8002460 <HAL_GetTick>
 8003f96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f98:	e00b      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe fa61 	bl	8002460 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d902      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	74fb      	strb	r3, [r7, #19]
            break;
 8003fb0:	e006      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ec      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	74bb      	strb	r3, [r7, #18]
 8003fe2:	e005      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff0:	7c7b      	ldrb	r3, [r7, #17]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4ba6      	ldr	r3, [pc, #664]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4aa5      	ldr	r2, [pc, #660]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400e:	4ba0      	ldr	r3, [pc, #640]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f023 0203 	bic.w	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	499c      	ldr	r1, [pc, #624]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004030:	4b97      	ldr	r3, [pc, #604]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 020c 	bic.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4994      	ldr	r1, [pc, #592]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004052:	4b8f      	ldr	r3, [pc, #572]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	498b      	ldr	r1, [pc, #556]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004074:	4b86      	ldr	r3, [pc, #536]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	4983      	ldr	r1, [pc, #524]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004096:	4b7e      	ldr	r3, [pc, #504]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	497a      	ldr	r1, [pc, #488]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b8:	4b75      	ldr	r3, [pc, #468]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	4972      	ldr	r1, [pc, #456]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040da:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	4969      	ldr	r1, [pc, #420]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040fc:	4b64      	ldr	r3, [pc, #400]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4961      	ldr	r1, [pc, #388]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800411e:	4b5c      	ldr	r3, [pc, #368]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	4958      	ldr	r1, [pc, #352]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004140:	4b53      	ldr	r3, [pc, #332]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	4950      	ldr	r1, [pc, #320]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004160:	4b4b      	ldr	r3, [pc, #300]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a4a      	ldr	r2, [pc, #296]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800416a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004178:	4b45      	ldr	r3, [pc, #276]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	4942      	ldr	r1, [pc, #264]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004198:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a3c      	ldr	r2, [pc, #240]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041b0:	4b37      	ldr	r3, [pc, #220]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	4934      	ldr	r1, [pc, #208]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ce:	d105      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d0:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e8:	4b29      	ldr	r3, [pc, #164]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	4926      	ldr	r1, [pc, #152]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004206:	d105      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004208:	4b21      	ldr	r3, [pc, #132]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004212:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004220:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	4918      	ldr	r1, [pc, #96]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423e:	d105      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004240:	4b13      	ldr	r3, [pc, #76]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a12      	ldr	r2, [pc, #72]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	490a      	ldr	r1, [pc, #40]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004282:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004284:	7cbb      	ldrb	r3, [r7, #18]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000

08004294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e042      	b.n	800432c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fd ffeb 	bl	8002294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2224      	movs	r2, #36	; 0x24
 80042c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f82c 	bl	8004334 <UART_SetConfig>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e022      	b.n	800432c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 faec 	bl	80048cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fb73 	bl	8004a10 <UART_CheckIdleState>
 800432a:	4603      	mov	r3, r0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004338:	b08c      	sub	sp, #48	; 0x30
 800433a:	af00      	add	r7, sp, #0
 800433c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	431a      	orrs	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	431a      	orrs	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	4313      	orrs	r3, r2
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4bab      	ldr	r3, [pc, #684]	; (8004610 <UART_SetConfig+0x2dc>)
 8004364:	4013      	ands	r3, r2
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800436c:	430b      	orrs	r3, r1
 800436e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4aa0      	ldr	r2, [pc, #640]	; (8004614 <UART_SetConfig+0x2e0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439c:	4313      	orrs	r3, r2
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80043aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	f023 010f 	bic.w	r1, r3, #15
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a91      	ldr	r2, [pc, #580]	; (8004618 <UART_SetConfig+0x2e4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d125      	bne.n	8004424 <UART_SetConfig+0xf0>
 80043d8:	4b90      	ldr	r3, [pc, #576]	; (800461c <UART_SetConfig+0x2e8>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d81a      	bhi.n	800441c <UART_SetConfig+0xe8>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0xb8>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004415 	.word	0x08004415
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004402:	e0d6      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800440a:	e0d2      	b.n	80045b2 <UART_SetConfig+0x27e>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004412:	e0ce      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800441a:	e0ca      	b.n	80045b2 <UART_SetConfig+0x27e>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004422:	e0c6      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7d      	ldr	r2, [pc, #500]	; (8004620 <UART_SetConfig+0x2ec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d138      	bne.n	80044a0 <UART_SetConfig+0x16c>
 800442e:	4b7b      	ldr	r3, [pc, #492]	; (800461c <UART_SetConfig+0x2e8>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b0c      	cmp	r3, #12
 800443a:	d82d      	bhi.n	8004498 <UART_SetConfig+0x164>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x110>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004479 	.word	0x08004479
 8004448:	08004499 	.word	0x08004499
 800444c:	08004499 	.word	0x08004499
 8004450:	08004499 	.word	0x08004499
 8004454:	08004489 	.word	0x08004489
 8004458:	08004499 	.word	0x08004499
 800445c:	08004499 	.word	0x08004499
 8004460:	08004499 	.word	0x08004499
 8004464:	08004481 	.word	0x08004481
 8004468:	08004499 	.word	0x08004499
 800446c:	08004499 	.word	0x08004499
 8004470:	08004499 	.word	0x08004499
 8004474:	08004491 	.word	0x08004491
 8004478:	2300      	movs	r3, #0
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800447e:	e098      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004480:	2302      	movs	r3, #2
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004486:	e094      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800448e:	e090      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004496:	e08c      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449e:	e088      	b.n	80045b2 <UART_SetConfig+0x27e>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a5f      	ldr	r2, [pc, #380]	; (8004624 <UART_SetConfig+0x2f0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d125      	bne.n	80044f6 <UART_SetConfig+0x1c2>
 80044aa:	4b5c      	ldr	r3, [pc, #368]	; (800461c <UART_SetConfig+0x2e8>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d016      	beq.n	80044e6 <UART_SetConfig+0x1b2>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d818      	bhi.n	80044ee <UART_SetConfig+0x1ba>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d00a      	beq.n	80044d6 <UART_SetConfig+0x1a2>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d814      	bhi.n	80044ee <UART_SetConfig+0x1ba>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <UART_SetConfig+0x19a>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d008      	beq.n	80044de <UART_SetConfig+0x1aa>
 80044cc:	e00f      	b.n	80044ee <UART_SetConfig+0x1ba>
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d4:	e06d      	b.n	80045b2 <UART_SetConfig+0x27e>
 80044d6:	2302      	movs	r3, #2
 80044d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044dc:	e069      	b.n	80045b2 <UART_SetConfig+0x27e>
 80044de:	2304      	movs	r3, #4
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e4:	e065      	b.n	80045b2 <UART_SetConfig+0x27e>
 80044e6:	2308      	movs	r3, #8
 80044e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ec:	e061      	b.n	80045b2 <UART_SetConfig+0x27e>
 80044ee:	2310      	movs	r3, #16
 80044f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f4:	e05d      	b.n	80045b2 <UART_SetConfig+0x27e>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4b      	ldr	r2, [pc, #300]	; (8004628 <UART_SetConfig+0x2f4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d125      	bne.n	800454c <UART_SetConfig+0x218>
 8004500:	4b46      	ldr	r3, [pc, #280]	; (800461c <UART_SetConfig+0x2e8>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800450a:	2bc0      	cmp	r3, #192	; 0xc0
 800450c:	d016      	beq.n	800453c <UART_SetConfig+0x208>
 800450e:	2bc0      	cmp	r3, #192	; 0xc0
 8004510:	d818      	bhi.n	8004544 <UART_SetConfig+0x210>
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d00a      	beq.n	800452c <UART_SetConfig+0x1f8>
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d814      	bhi.n	8004544 <UART_SetConfig+0x210>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <UART_SetConfig+0x1f0>
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d008      	beq.n	8004534 <UART_SetConfig+0x200>
 8004522:	e00f      	b.n	8004544 <UART_SetConfig+0x210>
 8004524:	2300      	movs	r3, #0
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452a:	e042      	b.n	80045b2 <UART_SetConfig+0x27e>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004532:	e03e      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453a:	e03a      	b.n	80045b2 <UART_SetConfig+0x27e>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004542:	e036      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454a:	e032      	b.n	80045b2 <UART_SetConfig+0x27e>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a30      	ldr	r2, [pc, #192]	; (8004614 <UART_SetConfig+0x2e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d12a      	bne.n	80045ac <UART_SetConfig+0x278>
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <UART_SetConfig+0x2e8>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004564:	d01a      	beq.n	800459c <UART_SetConfig+0x268>
 8004566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456a:	d81b      	bhi.n	80045a4 <UART_SetConfig+0x270>
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004570:	d00c      	beq.n	800458c <UART_SetConfig+0x258>
 8004572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004576:	d815      	bhi.n	80045a4 <UART_SetConfig+0x270>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <UART_SetConfig+0x250>
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d008      	beq.n	8004594 <UART_SetConfig+0x260>
 8004582:	e00f      	b.n	80045a4 <UART_SetConfig+0x270>
 8004584:	2300      	movs	r3, #0
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458a:	e012      	b.n	80045b2 <UART_SetConfig+0x27e>
 800458c:	2302      	movs	r3, #2
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004592:	e00e      	b.n	80045b2 <UART_SetConfig+0x27e>
 8004594:	2304      	movs	r3, #4
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459a:	e00a      	b.n	80045b2 <UART_SetConfig+0x27e>
 800459c:	2308      	movs	r3, #8
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a2:	e006      	b.n	80045b2 <UART_SetConfig+0x27e>
 80045a4:	2310      	movs	r3, #16
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045aa:	e002      	b.n	80045b2 <UART_SetConfig+0x27e>
 80045ac:	2310      	movs	r3, #16
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a17      	ldr	r2, [pc, #92]	; (8004614 <UART_SetConfig+0x2e0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	f040 80a8 	bne.w	800470e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d834      	bhi.n	8004630 <UART_SetConfig+0x2fc>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x298>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	08004631 	.word	0x08004631
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	08004631 	.word	0x08004631
 80045dc:	080045ff 	.word	0x080045ff
 80045e0:	08004631 	.word	0x08004631
 80045e4:	08004631 	.word	0x08004631
 80045e8:	08004631 	.word	0x08004631
 80045ec:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f0:	f7ff fbee 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 80045f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045f6:	e021      	b.n	800463c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <UART_SetConfig+0x2f8>)
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045fc:	e01e      	b.n	800463c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7ff fb79 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8004602:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004604:	e01a      	b.n	800463c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800460c:	e016      	b.n	800463c <UART_SetConfig+0x308>
 800460e:	bf00      	nop
 8004610:	cfff69f3 	.word	0xcfff69f3
 8004614:	40008000 	.word	0x40008000
 8004618:	40013800 	.word	0x40013800
 800461c:	40021000 	.word	0x40021000
 8004620:	40004400 	.word	0x40004400
 8004624:	40004800 	.word	0x40004800
 8004628:	40004c00 	.word	0x40004c00
 800462c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800463a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 812a 	beq.w	8004898 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	4a9e      	ldr	r2, [pc, #632]	; (80048c4 <UART_SetConfig+0x590>)
 800464a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800464e:	461a      	mov	r2, r3
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	fbb3 f3f2 	udiv	r3, r3, r2
 8004656:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	429a      	cmp	r2, r3
 8004666:	d305      	bcc.n	8004674 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	429a      	cmp	r2, r3
 8004672:	d903      	bls.n	800467c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800467a:	e10d      	b.n	8004898 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	2200      	movs	r2, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	60fa      	str	r2, [r7, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	4a8e      	ldr	r2, [pc, #568]	; (80048c4 <UART_SetConfig+0x590>)
 800468a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800468e:	b29b      	uxth	r3, r3
 8004690:	2200      	movs	r2, #0
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800469e:	f7fb fdbb 	bl	8000218 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	020b      	lsls	r3, r1, #8
 80046b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046b8:	0202      	lsls	r2, r0, #8
 80046ba:	6979      	ldr	r1, [r7, #20]
 80046bc:	6849      	ldr	r1, [r1, #4]
 80046be:	0849      	lsrs	r1, r1, #1
 80046c0:	2000      	movs	r0, #0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4605      	mov	r5, r0
 80046c6:	eb12 0804 	adds.w	r8, r2, r4
 80046ca:	eb43 0905 	adc.w	r9, r3, r5
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	469a      	mov	sl, r3
 80046d6:	4693      	mov	fp, r2
 80046d8:	4652      	mov	r2, sl
 80046da:	465b      	mov	r3, fp
 80046dc:	4640      	mov	r0, r8
 80046de:	4649      	mov	r1, r9
 80046e0:	f7fb fd9a 	bl	8000218 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4613      	mov	r3, r2
 80046ea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046f2:	d308      	bcc.n	8004706 <UART_SetConfig+0x3d2>
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046fa:	d204      	bcs.n	8004706 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	60da      	str	r2, [r3, #12]
 8004704:	e0c8      	b.n	8004898 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800470c:	e0c4      	b.n	8004898 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004716:	d167      	bne.n	80047e8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800471c:	2b08      	cmp	r3, #8
 800471e:	d828      	bhi.n	8004772 <UART_SetConfig+0x43e>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <UART_SetConfig+0x3f4>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800474d 	.word	0x0800474d
 800472c:	08004755 	.word	0x08004755
 8004730:	0800475d 	.word	0x0800475d
 8004734:	08004773 	.word	0x08004773
 8004738:	08004763 	.word	0x08004763
 800473c:	08004773 	.word	0x08004773
 8004740:	08004773 	.word	0x08004773
 8004744:	08004773 	.word	0x08004773
 8004748:	0800476b 	.word	0x0800476b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800474c:	f7ff fb40 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8004750:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004752:	e014      	b.n	800477e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004754:	f7ff fb52 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8004758:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800475a:	e010      	b.n	800477e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800475c:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <UART_SetConfig+0x594>)
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004760:	e00d      	b.n	800477e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004762:	f7ff fac7 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8004766:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004768:	e009      	b.n	800477e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800476a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004770:	e005      	b.n	800477e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800477c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8089 	beq.w	8004898 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	4a4e      	ldr	r2, [pc, #312]	; (80048c4 <UART_SetConfig+0x590>)
 800478c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004790:	461a      	mov	r2, r3
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	fbb3 f3f2 	udiv	r3, r3, r2
 8004798:	005a      	lsls	r2, r3, #1
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	441a      	add	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	2b0f      	cmp	r3, #15
 80047b0:	d916      	bls.n	80047e0 <UART_SetConfig+0x4ac>
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b8:	d212      	bcs.n	80047e0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f023 030f 	bic.w	r3, r3, #15
 80047c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	8bfb      	ldrh	r3, [r7, #30]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	8bfa      	ldrh	r2, [r7, #30]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	e05b      	b.n	8004898 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047e6:	e057      	b.n	8004898 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d828      	bhi.n	8004842 <UART_SetConfig+0x50e>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x4c4>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004843 	.word	0x08004843
 8004808:	08004833 	.word	0x08004833
 800480c:	08004843 	.word	0x08004843
 8004810:	08004843 	.word	0x08004843
 8004814:	08004843 	.word	0x08004843
 8004818:	0800483b 	.word	0x0800483b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7ff fad8 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8004820:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004822:	e014      	b.n	800484e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7ff faea 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800482a:	e010      	b.n	800484e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800482c:	4b26      	ldr	r3, [pc, #152]	; (80048c8 <UART_SetConfig+0x594>)
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004830:	e00d      	b.n	800484e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004832:	f7ff fa5f 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004838:	e009      	b.n	800484e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004840:	e005      	b.n	800484e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800484c:	bf00      	nop
    }

    if (pclk != 0U)
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d021      	beq.n	8004898 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <UART_SetConfig+0x590>)
 800485a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800485e:	461a      	mov	r2, r3
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	fbb3 f2f2 	udiv	r2, r3, r2
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	441a      	add	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	d909      	bls.n	8004892 <UART_SetConfig+0x55e>
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	d205      	bcs.n	8004892 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	b29a      	uxth	r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60da      	str	r2, [r3, #12]
 8004890:	e002      	b.n	8004898 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2201      	movs	r2, #1
 800489c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2200      	movs	r2, #0
 80048ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80048b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3730      	adds	r7, #48	; 0x30
 80048bc:	46bd      	mov	sp, r7
 80048be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c2:	bf00      	nop
 80048c4:	0800582c 	.word	0x0800582c
 80048c8:	00f42400 	.word	0x00f42400

080048cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01a      	beq.n	80049e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ca:	d10a      	bne.n	80049e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]
  }
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a20:	f7fd fd1e 	bl	8002460 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d10e      	bne.n	8004a52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f82f 	bl	8004aa6 <UART_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e025      	b.n	8004a9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d10e      	bne.n	8004a7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f819 	bl	8004aa6 <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e00f      	b.n	8004a9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b09c      	sub	sp, #112	; 0x70
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab6:	e0a9      	b.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	f000 80a5 	beq.w	8004c0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fd fccd 	bl	8002460 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d140      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aec:	667b      	str	r3, [r7, #100]	; 0x64
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e6      	bne.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	663b      	str	r3, [r7, #96]	; 0x60
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3308      	adds	r3, #8
 8004b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e5      	bne.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e069      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d051      	beq.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b76:	d149      	bne.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e6      	bne.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bd4:	623a      	str	r2, [r7, #32]
 8004bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	69f9      	ldr	r1, [r7, #28]
 8004bda:	6a3a      	ldr	r2, [r7, #32]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e010      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4013      	ands	r3, r2
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	f43f af46 	beq.w	8004ab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3770      	adds	r7, #112	; 0x70
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UARTEx_DisableFifoMode+0x16>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e027      	b.n	8004c9c <HAL_UARTEx_DisableFifoMode+0x66>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e02d      	b.n	8004d1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2224      	movs	r2, #36	; 0x24
 8004ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0201 	bic.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f84f 	bl	8004da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e02d      	b.n	8004d98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2224      	movs	r2, #36	; 0x24
 8004d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f811 	bl	8004da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004dc0:	e031      	b.n	8004e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	0e5b      	lsrs	r3, r3, #25
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	0f5b      	lsrs	r3, r3, #29
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dea:	7bbb      	ldrb	r3, [r7, #14]
 8004dec:	7b3a      	ldrb	r2, [r7, #12]
 8004dee:	4911      	ldr	r1, [pc, #68]	; (8004e34 <UARTEx_SetNbDataToProcess+0x94>)
 8004df0:	5c8a      	ldrb	r2, [r1, r2]
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004df6:	7b3a      	ldrb	r2, [r7, #12]
 8004df8:	490f      	ldr	r1, [pc, #60]	; (8004e38 <UARTEx_SetNbDataToProcess+0x98>)
 8004dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	7b7a      	ldrb	r2, [r7, #13]
 8004e0c:	4909      	ldr	r1, [pc, #36]	; (8004e34 <UARTEx_SetNbDataToProcess+0x94>)
 8004e0e:	5c8a      	ldrb	r2, [r1, r2]
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e14:	7b7a      	ldrb	r2, [r7, #13]
 8004e16:	4908      	ldr	r1, [pc, #32]	; (8004e38 <UARTEx_SetNbDataToProcess+0x98>)
 8004e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	08005844 	.word	0x08005844
 8004e38:	0800584c 	.word	0x0800584c

08004e3c <_ZdlPvj>:
 8004e3c:	f000 b800 	b.w	8004e40 <_ZdlPv>

08004e40 <_ZdlPv>:
 8004e40:	f000 b824 	b.w	8004e8c <free>

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4d0d      	ldr	r5, [pc, #52]	; (8004e7c <__libc_init_array+0x38>)
 8004e48:	4c0d      	ldr	r4, [pc, #52]	; (8004e80 <__libc_init_array+0x3c>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	2600      	movs	r6, #0
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	4d0b      	ldr	r5, [pc, #44]	; (8004e84 <__libc_init_array+0x40>)
 8004e56:	4c0c      	ldr	r4, [pc, #48]	; (8004e88 <__libc_init_array+0x44>)
 8004e58:	f000 f882 	bl	8004f60 <_init>
 8004e5c:	1b64      	subs	r4, r4, r5
 8004e5e:	10a4      	asrs	r4, r4, #2
 8004e60:	2600      	movs	r6, #0
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	0800585c 	.word	0x0800585c
 8004e80:	0800585c 	.word	0x0800585c
 8004e84:	0800585c 	.word	0x0800585c
 8004e88:	08005864 	.word	0x08005864

08004e8c <free>:
 8004e8c:	4b02      	ldr	r3, [pc, #8]	; (8004e98 <free+0xc>)
 8004e8e:	4601      	mov	r1, r0
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f000 b80b 	b.w	8004eac <_free_r>
 8004e96:	bf00      	nop
 8004e98:	20000024 	.word	0x20000024

08004e9c <memset>:
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <_free_r>:
 8004eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	d044      	beq.n	8004f3c <_free_r+0x90>
 8004eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb6:	9001      	str	r0, [sp, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f1a1 0404 	sub.w	r4, r1, #4
 8004ebe:	bfb8      	it	lt
 8004ec0:	18e4      	addlt	r4, r4, r3
 8004ec2:	f000 f83f 	bl	8004f44 <__malloc_lock>
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <_free_r+0x94>)
 8004ec8:	9801      	ldr	r0, [sp, #4]
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	b933      	cbnz	r3, 8004edc <_free_r+0x30>
 8004ece:	6063      	str	r3, [r4, #4]
 8004ed0:	6014      	str	r4, [r2, #0]
 8004ed2:	b003      	add	sp, #12
 8004ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ed8:	f000 b83a 	b.w	8004f50 <__malloc_unlock>
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	d908      	bls.n	8004ef2 <_free_r+0x46>
 8004ee0:	6825      	ldr	r5, [r4, #0]
 8004ee2:	1961      	adds	r1, r4, r5
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf01      	itttt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	1949      	addeq	r1, r1, r5
 8004eee:	6021      	streq	r1, [r4, #0]
 8004ef0:	e7ed      	b.n	8004ece <_free_r+0x22>
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	b10b      	cbz	r3, 8004efc <_free_r+0x50>
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	d9fa      	bls.n	8004ef2 <_free_r+0x46>
 8004efc:	6811      	ldr	r1, [r2, #0]
 8004efe:	1855      	adds	r5, r2, r1
 8004f00:	42a5      	cmp	r5, r4
 8004f02:	d10b      	bne.n	8004f1c <_free_r+0x70>
 8004f04:	6824      	ldr	r4, [r4, #0]
 8004f06:	4421      	add	r1, r4
 8004f08:	1854      	adds	r4, r2, r1
 8004f0a:	42a3      	cmp	r3, r4
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	d1e0      	bne.n	8004ed2 <_free_r+0x26>
 8004f10:	681c      	ldr	r4, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	6053      	str	r3, [r2, #4]
 8004f16:	4421      	add	r1, r4
 8004f18:	6011      	str	r1, [r2, #0]
 8004f1a:	e7da      	b.n	8004ed2 <_free_r+0x26>
 8004f1c:	d902      	bls.n	8004f24 <_free_r+0x78>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	6003      	str	r3, [r0, #0]
 8004f22:	e7d6      	b.n	8004ed2 <_free_r+0x26>
 8004f24:	6825      	ldr	r5, [r4, #0]
 8004f26:	1961      	adds	r1, r4, r5
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf04      	itt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	6063      	str	r3, [r4, #4]
 8004f32:	bf04      	itt	eq
 8004f34:	1949      	addeq	r1, r1, r5
 8004f36:	6021      	streq	r1, [r4, #0]
 8004f38:	6054      	str	r4, [r2, #4]
 8004f3a:	e7ca      	b.n	8004ed2 <_free_r+0x26>
 8004f3c:	b003      	add	sp, #12
 8004f3e:	bd30      	pop	{r4, r5, pc}
 8004f40:	2000093c 	.word	0x2000093c

08004f44 <__malloc_lock>:
 8004f44:	4801      	ldr	r0, [pc, #4]	; (8004f4c <__malloc_lock+0x8>)
 8004f46:	f000 b809 	b.w	8004f5c <__retarget_lock_acquire_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	20000940 	.word	0x20000940

08004f50 <__malloc_unlock>:
 8004f50:	4801      	ldr	r0, [pc, #4]	; (8004f58 <__malloc_unlock+0x8>)
 8004f52:	f000 b804 	b.w	8004f5e <__retarget_lock_release_recursive>
 8004f56:	bf00      	nop
 8004f58:	20000940 	.word	0x20000940

08004f5c <__retarget_lock_acquire_recursive>:
 8004f5c:	4770      	bx	lr

08004f5e <__retarget_lock_release_recursive>:
 8004f5e:	4770      	bx	lr

08004f60 <_init>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	bf00      	nop
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr

08004f6c <_fini>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr
