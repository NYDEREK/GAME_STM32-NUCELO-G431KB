
GAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a78  08005a78  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a80  08005a80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000088  08005b18  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08005b18  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014165  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a4  00000000  00000000  0003421d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  000378c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00038858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216f2  00000000  00000000  00039680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fcd  00000000  00000000  0005ad72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbe7c  00000000  00000000  00070d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012cbbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  0012cc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005184 	.word	0x08005184

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	08005184 	.word	0x08005184

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <_ZN5BlockC1EiiiiPKhii>:
#include "Block.h"
#include"Player.h"
#define true 1
#define false 0

Block::Block(int x, int y,int w,int h,const unsigned char* b,int ml,int mr) {//writing primary data to spike object
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <_ZN5BlockC1EiiiiPKhii+0x4c>)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
	width=w;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	60da      	str	r2, [r3, #12]
	height=h;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	611a      	str	r2, [r3, #16]
    bitmap=b;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
    moveL=ml;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6a3a      	ldr	r2, [r7, #32]
 8000552:	619a      	str	r2, [r3, #24]
    moveR=mr;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000558:	615a      	str	r2, [r3, #20]
}
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	080051a4 	.word	0x080051a4

0800056c <_ZN5Block11generateHITEv>:
void Block::generateHIT(){ // it generates the hit box for this block
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	441a      	add	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	441a      	add	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_ZN5Block13Display_BlockEv>:
void Block::Display_Block(){
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	b2d8      	uxtb	r0, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	b2d9      	uxtb	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	b2dc      	uxtb	r4, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2501      	movs	r5, #1
 80005d2:	9501      	str	r5, [sp, #4]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4623      	mov	r3, r4
 80005d8:	f001 fe1e 	bl	8002218 <ssd1306_DrawBitmap>

}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bdb0      	pop	{r4, r5, r7, pc}

080005e4 <_ZN5Block5CheckERiR6Player>:

void Block::Check(int &barrier,Player &player){ // it checks if player hit this block (int b is int barrier for gravitation function)
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
player.generateHIT();
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 fc65 	bl	8000ec0 <_ZN6Player11generateHITEv>
generateHIT();
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f7ff ffb8 	bl	800056c <_ZN5Block11generateHITEv>
if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a1a      	ldr	r2, [r3, #32]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	429a      	cmp	r2, r3
 8000606:	dd0e      	ble.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	429a      	cmp	r2, r3
 8000612:	da08      	bge.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800061c:	429a      	cmp	r2, r3
 800061e:	d102      	bne.n	8000626 <_ZN5Block5CheckERiR6Player+0x42>
barrier=1; //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
}

if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of block
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6a1a      	ldr	r2, [r3, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	429a      	cmp	r2, r3
 8000630:	db2b      	blt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800063a:	429a      	cmp	r2, r3
 800063c:	db05      	blt.n	800064a <_ZN5Block5CheckERiR6Player+0x66>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	429a      	cmp	r2, r3
 8000648:	dd0b      	ble.n	8000662 <_ZN5Block5CheckERiR6Player+0x7e>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	429a      	cmp	r2, r3
 8000654:	dc19      	bgt.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065e:	429a      	cmp	r2, r3
 8000660:	dd13      	ble.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a1a      	ldr	r2, [r3, #32]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066a:	429a      	cmp	r2, r3
 800066c:	da0d      	bge.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60da      	str	r2, [r3, #12]

  if(is_block_moving==true){//because of this "if" moving block can move the moving player
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d104      	bne.n	800068a <_ZN5Block5CheckERiR6Player+0xa6>
  player.pos_x--;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60da      	str	r2, [r3, #12]
  }

}

if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of block
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	69da      	ldr	r2, [r3, #28]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	429a      	cmp	r2, r3
 8000694:	dc2b      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069e:	429a      	cmp	r2, r3
 80006a0:	db05      	blt.n	80006ae <_ZN5Block5CheckERiR6Player+0xca>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dd0b      	ble.n	80006c6 <_ZN5Block5CheckERiR6Player+0xe2>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dc19      	bgt.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dd13      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	69da      	ldr	r2, [r3, #28]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6a1b      	ldr	r3, [r3, #32]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dd0d      	ble.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]

 if(is_block_moving==true){//because of this "if" moving block can move the moving player
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d104      	bne.n	80006ee <_ZN5Block5CheckERiR6Player+0x10a>
 player.pos_x++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60da      	str	r2, [r3, #12]
 }

 }
//TODO write function for hiting bottom of block
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZN5Block10Move_BlockEiiRiR6Player>:

void Block:: Move_Block(int point_A,int point_B,int &barrier,Player &player){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
    is_block_moving=true;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
	if(moveR==true){   //moving the block form point A to point B
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d104      	bne.n	800071c <_ZN5Block10Move_BlockEiiRiR6Player+0x26>
	   pos_x++;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	605a      	str	r2, [r3, #4]
	  }
	if(moveL==true){   //moving the block form point B to point A
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d104      	bne.n	800072e <_ZN5Block10Move_BlockEiiRiR6Player+0x38>
	   pos_x--;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	605a      	str	r2, [r3, #4]
	  }
	if(pos_x==point_A){//check if block hit the point_A
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	429a      	cmp	r2, r3
 8000736:	d105      	bne.n	8000744 <_ZN5Block10Move_BlockEiiRiR6Player+0x4e>
	   moveL=false;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
	   moveR=true;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
	  }
	if(RHIT==point_B){//check if block hit the ponit_B
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	d105      	bne.n	800075a <_ZN5Block10Move_BlockEiiRiR6Player+0x64>
	   moveL=true;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
	   moveR=false;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
 }
	//----moving character-----// /*<-- the player can ride on block (be on him and move with him without doing anything)*/
	player.generateHIT();
 800075a:	69b8      	ldr	r0, [r7, #24]
 800075c:	f000 fbb0 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff ff03 	bl	800056c <_ZN5Block11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	6a1a      	ldr	r2, [r3, #32]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	429a      	cmp	r2, r3
 8000770:	dd20      	ble.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	429a      	cmp	r2, r3
 800077c:	da1a      	bge.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	429a      	cmp	r2, r3
 8000788:	d114      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	barrier=1;  //function turn of our gravitation so we do not fall of this block {is barrier for gravitation)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	if(moveR==true){
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d104      	bne.n	80007a2 <_ZN5Block10Move_BlockEiiRiR6Player+0xac>
		player.pos_x++;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	60da      	str	r2, [r3, #12]
	}
	if(moveL==true){
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d104      	bne.n	80007b4 <_ZN5Block10Move_BlockEiiRiR6Player+0xbe>
	    player.pos_x--;
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	1e5a      	subs	r2, r3, #1
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	60da      	str	r2, [r3, #12]
	}
  }
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZN5Block15Change_positionEii>:
void Block::Change_position(int x,int y){
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	pos_x=x;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	605a      	str	r2, [r3, #4]
	pos_y=y;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_ZN5BlockD1Ev>:
Block::~Block() {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <_ZN5BlockD1Ev+0x1c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	080051a4 	.word	0x080051a4

08000800 <_ZN5BlockD0Ev>:
Block::~Block() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
}
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ffe9 	bl	80007e0 <_ZN5BlockD1Ev>
 800080e:	2134      	movs	r1, #52	; 0x34
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f004 fc25 	bl	8005060 <_ZdlPvj>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_ZN4CoinC1EiiiiPKhi>:
#include <Coin.h>
#define true 1
#define false 0


Coin::Coin(int x,int y,int w,int h,const unsigned char* b,int icl){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <_ZN4CoinC1EiiiiPKhi+0x48>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	60da      	str	r2, [r3, #12]
	pos_y=y;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]
	width=w;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	615a      	str	r2, [r3, #20]
	height=h;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	619a      	str	r2, [r3, #24]
	bitmap=b;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
	is_coin_alive=icl;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a3a      	ldr	r2, [r7, #32]
 8000856:	609a      	str	r2, [r3, #8]

}
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	080051b4 	.word	0x080051b4

0800086c <_ZN4Coin5CheckER6PlayerRi>:

void Coin::Check(Player &player,int &map){//checking if player(boxi) grab this coin
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
if(is_coin_alive==true){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 8084 	bne.w	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
is_coin_gathered=false;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
	player.generateHIT();
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f000 fb19 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f000 f87f 	bl	8000992 <_ZN4Coin11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	6a1a      	ldr	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	dd16      	ble.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6a1b      	ldr	r3, [r3, #32]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	da10      	bge.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d10a      	bne.n	80008ce <_ZN4Coin5CheckER6PlayerRi+0x62>
	    player.Player_coins++;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	609a      	str	r2, [r3, #8]
	    //map++;
	   is_coin_alive=false;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	   is_coin_gathered=true;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2201      	movs	r2, #1
 80008cc:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of coin
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	6a1a      	ldr	r2, [r3, #32]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	db28      	blt.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	429a      	cmp	r2, r3
 80008e4:	db05      	blt.n	80008f2 <_ZN4Coin5CheckER6PlayerRi+0x86>
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dd0b      	ble.n	800090a <_ZN4Coin5CheckER6PlayerRi+0x9e>
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dc16      	bgt.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	429a      	cmp	r2, r3
 8000908:	dd10      	ble.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	6a1a      	ldr	r2, [r3, #32]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	429a      	cmp	r2, r3
 8000914:	da0a      	bge.n	800092c <_ZN4Coin5CheckER6PlayerRi+0xc0>
	    player.Player_coins++;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	609a      	str	r2, [r3, #8]
	    //map++;
	    is_coin_alive=false;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
	    is_coin_gathered=true;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit the right side of coin
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	429a      	cmp	r2, r3
 8000936:	dc28      	bgt.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000940:	429a      	cmp	r2, r3
 8000942:	db05      	blt.n	8000950 <_ZN4Coin5CheckER6PlayerRi+0xe4>
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094c:	429a      	cmp	r2, r3
 800094e:	dd0b      	ble.n	8000968 <_ZN4Coin5CheckER6PlayerRi+0xfc>
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	429a      	cmp	r2, r3
 800095a:	dc16      	bgt.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000964:	429a      	cmp	r2, r3
 8000966:	dd10      	ble.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	429a      	cmp	r2, r3
 8000972:	dd0a      	ble.n	800098a <_ZN4Coin5CheckER6PlayerRi+0x11e>
	    player.Player_coins++;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	609a      	str	r2, [r3, #8]
	    //map++;
	    is_coin_alive=false;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	    is_coin_gathered=true;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2201      	movs	r2, #1
 8000988:	605a      	str	r2, [r3, #4]

	 }
}
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_ZN4Coin11generateHITEv>:

void Coin::generateHIT(){ //generates hit box of coin
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	441a      	add	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691a      	ldr	r2, [r3, #16]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	441a      	add	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_ZN4Coin12Display_CoinEv>:

void Coin::Display_Coin(){//if coin is alive can be displayed
 80009d2:	b5b0      	push	{r4, r5, r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af02      	add	r7, sp, #8
 80009d8:	6078      	str	r0, [r7, #4]
	if(is_coin_alive==true){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d113      	bne.n	8000a0a <_ZN4Coin12Display_CoinEv+0x38>
		ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	b2d8      	uxtb	r0, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	b2d9      	uxtb	r1, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	b2dc      	uxtb	r4, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2501      	movs	r5, #1
 8000a00:	9501      	str	r5, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4623      	mov	r3, r4
 8000a06:	f001 fc07 	bl	8002218 <ssd1306_DrawBitmap>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdb0      	pop	{r4, r5, r7, pc}

08000a12 <_ZN4Coin15Change_positionEii>:
void Coin::Change_position(int x,int y){//repositioning
 8000a12:	b480      	push	{r7}
 8000a14:	b085      	sub	sp, #20
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <_ZN4CoinD1Ev>:
Coin::~Coin() {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <_ZN4CoinD1Ev+0x1c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	080051b4 	.word	0x080051b4

08000a58 <_ZN4CoinD0Ev>:
Coin::~Coin() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
}
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ffe9 	bl	8000a38 <_ZN4CoinD1Ev>
 8000a66:	2130      	movs	r1, #48	; 0x30
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f004 faf9 	bl	8005060 <_ZdlPvj>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN3MapC1EPKhiiii>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Map.h>

Map::Map(const unsigned char* b ,int w ,int h, int x, int y){
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <_ZN3MapC1EPKhiiii+0x40>)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	605a      	str	r2, [r3, #4]
	pos_y=y;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	69fa      	ldr	r2, [r7, #28]
 8000a96:	609a      	str	r2, [r3, #8]
	width=w;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	60da      	str	r2, [r3, #12]
	height=h;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	611a      	str	r2, [r3, #16]
	bitmap=b;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	615a      	str	r2, [r3, #20]
}
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	080051c4 	.word	0x080051c4

08000abc <_ZN3Map11Display_mapEv>:
void Map::Display_map(){
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
	//ssd1306_Fill(Black);
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height,White);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	b2d8      	uxtb	r0, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	b2d9      	uxtb	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	695a      	ldr	r2, [r3, #20]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	b2dc      	uxtb	r4, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2501      	movs	r5, #1
 8000ae2:	9501      	str	r5, [sp, #4]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	f001 fb96 	bl	8002218 <ssd1306_DrawBitmap>
    //ssd1306_UpdateScreen();
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}

08000af4 <_ZN3MapD1Ev>:
Map::~Map() {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <_ZN3MapD1Ev+0x1c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	080051c4 	.word	0x080051c4

08000b14 <_ZN3MapD0Ev>:
Map::~Map() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
}
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffe9 	bl	8000af4 <_ZN3MapD1Ev>
 8000b22:	2118      	movs	r1, #24
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f004 fa9b 	bl	8005060 <_ZdlPvj>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZN3MobC1EiiiiiPKhii>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>
#include <Mob.h>

Mob::Mob(int x,int y,int is_al,int w,int h,const unsigned char* b,int ml,int mr){
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <_ZN3MobC1EiiiiiPKhii+0x54>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	60da      	str	r2, [r3, #12]

	is_mob_alive=is_al;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	605a      	str	r2, [r3, #4]
	width=w;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	611a      	str	r2, [r3, #16]
	height=h;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	615a      	str	r2, [r3, #20]
	bitmap=b;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6a3a      	ldr	r2, [r7, #32]
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
	moveL=ml;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b70:	61da      	str	r2, [r3, #28]
	moveR=mr;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b76:	619a      	str	r2, [r3, #24]
}
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	080051d4 	.word	0x080051d4

08000b8c <_ZN3Mob11generateHITEv>:

void Mob::generateHIT(){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	621a      	str	r2, [r3, #32]
	RHIT=pos_x+width;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	441a      	add	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
	THIT=pos_y;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
	BHIT=pos_y+height;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	441a      	add	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_ZN3Mob5checkER6Player>:

void Mob::check(Player &player){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
generateHIT();
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffd8 	bl	8000b8c <_ZN3Mob11generateHITEv>
player.generateHIT();
 8000bdc:	6838      	ldr	r0, [r7, #0]
 8000bde:	f000 f96f 	bl	8000ec0 <_ZN6Player11generateHITEv>
if(is_mob_alive==1){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d143      	bne.n	8000c72 <_ZN3Mob5checkER6Player+0xa6>

if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){//if player hit mob's head mob dies
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	6a1a      	ldr	r2, [r3, #32]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dd0e      	ble.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	69da      	ldr	r2, [r3, #28]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	da08      	bge.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d102      	bne.n	8000c14 <_ZN3Mob5checkER6Player+0x48>
  is_mob_alive=0;//Mob dies
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]


if((player.LHIT<=RHIT)&&(player.BHIT>=BHIT)&&(player.BHIT<=THIT)){// if player hit the right side of Mob
  player.Player_live--;//player is loosing his hearts
  }*/
if((player.RHIT==LHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){//if player hit left side of Mob
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	6a1a      	ldr	r2, [r3, #32]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d110      	bne.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	db0a      	blt.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dc04      	bgt.n	8000c42 <_ZN3Mob5checkER6Player+0x76>
  player.Player_live--;//player is loosing his hearts
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	1e5a      	subs	r2, r3, #1
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	605a      	str	r2, [r3, #4]
}


if((player.LHIT==RHIT)&&(player.THIT>=THIT)&&(player.BHIT<=BHIT)){// if player hit the right side of Mob
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	69da      	ldr	r2, [r3, #28]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d114      	bne.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	429a      	cmp	r2, r3
 8000c58:	db0e      	blt.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dc08      	bgt.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
  player.Player_live--;//player is loosing his hearts
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 }
else{
   pos_y=100;
   //throwing body of dead Mob out of the map
}
}
 8000c70:	e002      	b.n	8000c78 <_ZN3Mob5checkER6Player+0xac>
   pos_y=100;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2264      	movs	r2, #100	; 0x64
 8000c76:	60da      	str	r2, [r3, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN3Mob8Move_mobEii>:

void Mob::Move_mob(int point_A, int point_B){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
	generateHIT();
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f7ff ff7d 	bl	8000b8c <_ZN3Mob11generateHITEv>
	if(is_mob_alive==1){
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d127      	bne.n	8000cea <_ZN3Mob8Move_mobEii+0x6a>
	if(moveR==true){   //moving  Mob form point A to point B
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d104      	bne.n	8000cac <_ZN3Mob8Move_mobEii+0x2c>
		   pos_x++;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	609a      	str	r2, [r3, #8]
		  }
		if(moveL==true){   //moving Mob form point B to point A
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <_ZN3Mob8Move_mobEii+0x3e>
		   pos_x--;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	609a      	str	r2, [r3, #8]
		  }
		if(pos_x==point_A){//check if Mob hit the point_A
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d105      	bne.n	8000cd4 <_ZN3Mob8Move_mobEii+0x54>
		   moveL=false;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
		   moveR=true;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	619a      	str	r2, [r3, #24]
		  }
		if(RHIT==point_B){//check if Mob hit the ponit_B
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d105      	bne.n	8000cea <_ZN3Mob8Move_mobEii+0x6a>
		   moveL=true;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	61da      	str	r2, [r3, #28]
		   moveR=false;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
          }
	}
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_ZN3Mob11Display_mobEv>:
void Mob::Display_mob(){
 8000cf2:	b5b0      	push	{r4, r5, r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	6078      	str	r0, [r7, #4]
	if(is_mob_alive==1){
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d113      	bne.n	8000d2a <_ZN3Mob11Display_mobEv+0x38>
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	b2d8      	uxtb	r0, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	b2d9      	uxtb	r1, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	b2dc      	uxtb	r4, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2501      	movs	r5, #1
 8000d20:	9501      	str	r5, [sp, #4]
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	4623      	mov	r3, r4
 8000d26:	f001 fa77 	bl	8002218 <ssd1306_DrawBitmap>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}

08000d32 <_ZN3Mob15Change_positionEii>:
void Mob::Change_position(int x,int y){
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	609a      	str	r2, [r3, #8]
	pos_y=y;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	60da      	str	r2, [r3, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <_ZN3MobD1Ev>:
Mob::~Mob() {
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <_ZN3MobD1Ev+0x1c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	080051d4 	.word	0x080051d4

08000d78 <_ZN3MobD0Ev>:
Mob::~Mob() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
}
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ffe9 	bl	8000d58 <_ZN3MobD1Ev>
 8000d86:	2134      	movs	r1, #52	; 0x34
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f004 f969 	bl	8005060 <_ZdlPvj>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN6PlayerC1EiiiiiPKh>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include <Player.h>

Player::Player(int x,int y,int w,int h,int p_l,const unsigned char* b) {//setting values and generating hit box
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <_ZN6PlayerC1EiiiiiPKh+0x48>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]
	pos_x=x;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	611a      	str	r2, [r3, #16]
	width=w;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	615a      	str	r2, [r3, #20]
	height=h;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	619a      	str	r2, [r3, #24]
	bitmap=b;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a3a      	ldr	r2, [r7, #32]
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
    Player_live=p_l;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	605a      	str	r2, [r3, #4]
	generateHIT();
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f000 f875 	bl	8000ec0 <_ZN6Player11generateHITEv>
}
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	080051ec 	.word	0x080051ec

08000de4 <_ZN6Player14Display_PlayerEv>:
void Player::Display_Player(){ //drawing the player
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	6078      	str	r0, [r7, #4]

	ssd1306_DrawBitmap(pos_x, pos_y, bitmap,width, height, White);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	b2d8      	uxtb	r0, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	b2d9      	uxtb	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	b2dc      	uxtb	r4, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2501      	movs	r5, #1
 8000e0a:	9501      	str	r5, [sp, #4]
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4623      	mov	r3, r4
 8000e10:	f001 fa02 	bl	8002218 <ssd1306_DrawBitmap>

}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}

08000e1c <_ZN6Player21Display_Player_heartsEv>:
void Player::Display_Player_hearts(){//drawing player's hearts
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]

	if(Player_live==3){//if player has all lives
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d11d      	bne.n	8000e68 <_ZN6Player21Display_Player_heartsEv+0x4c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	2305      	movs	r3, #5
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2305      	movs	r3, #5
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2079      	movs	r0, #121	; 0x79
 8000e3c:	f001 f9ec 	bl	8002218 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e40:	2301      	movs	r3, #1
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	2305      	movs	r3, #5
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2305      	movs	r3, #5
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2074      	movs	r0, #116	; 0x74
 8000e50:	f001 f9e2 	bl	8002218 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(111,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	2305      	movs	r3, #5
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e60:	2100      	movs	r1, #0
 8000e62:	206f      	movs	r0, #111	; 0x6f
 8000e64:	f001 f9d8 	bl	8002218 <ssd1306_DrawBitmap>
	}
	if(Player_live==2){//if player lose one heart
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d113      	bne.n	8000e98 <_ZN6Player21Display_Player_heartsEv+0x7c>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e70:	2301      	movs	r3, #1
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	2305      	movs	r3, #5
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2305      	movs	r3, #5
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2079      	movs	r0, #121	; 0x79
 8000e80:	f001 f9ca 	bl	8002218 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(116,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000e84:	2301      	movs	r3, #1
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	2305      	movs	r3, #5
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	2074      	movs	r0, #116	; 0x74
 8000e94:	f001 f9c0 	bl	8002218 <ssd1306_DrawBitmap>
	}
	if(Player_live==1){//if player lose two hearts
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d109      	bne.n	8000eb4 <_ZN6Player21Display_Player_heartsEv+0x98>
		ssd1306_DrawBitmap(121,0, Bitmap_heart, 5, 5, White);//displaying 5x5 bitmap of one heart
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <_ZN6Player21Display_Player_heartsEv+0xa0>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	2079      	movs	r0, #121	; 0x79
 8000eb0:	f001 f9b2 	bl	8002218 <ssd1306_DrawBitmap>

	}

}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	080051dc 	.word	0x080051dc

08000ec0 <_ZN6Player11generateHITEv>:
void Player::generateHIT(){ //generating hit box
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	61da      	str	r2, [r3, #28]
	RHIT=pos_x+width;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	441a      	add	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	621a      	str	r2, [r3, #32]
	THIT=pos_y;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
	BHIT=pos_y+height;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	441a      	add	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZN6Player15Change_positionEii>:
void Player::Change_position(int x,int y){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	60da      	str	r2, [r3, #12]
	pos_y=y;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_ZN6PlayerD1Ev>:
Player::~Player() {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <_ZN6PlayerD1Ev+0x1c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	080051ec 	.word	0x080051ec

08000f44 <_ZN6PlayerD0Ev>:
Player::~Player() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
}
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffe9 	bl	8000f24 <_ZN6PlayerD1Ev>
 8000f52:	2130      	movs	r1, #48	; 0x30
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f004 f883 	bl	8005060 <_ZdlPvj>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN5SpikeC1EiiiiPKh>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"
#include <Spike.h>

Spike::Spike(int x,int y,int w, int h,const unsigned char* b) {//writing primary data to spike object
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <_ZN5SpikeC1EiiiiPKh+0x40>)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	601a      	str	r2, [r3, #0]
	 pos_x=x;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	605a      	str	r2, [r3, #4]
     pos_y=y;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
   	 width=w;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	60da      	str	r2, [r3, #12]
     height=h;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	611a      	str	r2, [r3, #16]
	 bitmap=b;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	080051fc 	.word	0x080051fc

08000fa8 <_ZN5Spike11generateHITEv>:

void Spike::generateHIT(){//generating hit box of spike
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	LHIT=pos_x;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]
	RHIT=pos_x+width;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	441a      	add	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
	THIT=pos_y;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	61da      	str	r2, [r3, #28]
	BHIT=pos_y+height;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	441a      	add	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	621a      	str	r2, [r3, #32]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_ZN5Spike5CheckERiR6Player>:

void Spike::Check(int &barrier,Player &player){//reacting on collisions with player
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	player.generateHIT();
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff63 	bl	8000ec0 <_ZN6Player11generateHITEv>
	generateHIT();
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff ffd4 	bl	8000fa8 <_ZN5Spike11generateHITEv>
	if((player.RHIT>LHIT)&&(player.LHIT<RHIT)&&(player.BHIT==THIT)){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	dd13      	ble.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	429a      	cmp	r2, r3
 8001016:	da0d      	bge.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	429a      	cmp	r2, r3
 8001022:	d107      	bne.n	8001034 <_ZN5Spike5CheckERiR6Player+0x4c>
	barrier=1; //function turn of our gravitation so we do not fall of this block b is barrier for gravitation
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
	player.Player_live--;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]
	}

	if((player.RHIT>=LHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.RHIT<RHIT)){//if player hit left side of spike
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	db22      	blt.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	429a      	cmp	r2, r3
 800104a:	db05      	blt.n	8001058 <_ZN5Spike5CheckERiR6Player+0x70>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	429a      	cmp	r2, r3
 8001056:	dd0b      	ble.n	8001070 <_ZN5Spike5CheckERiR6Player+0x88>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	429a      	cmp	r2, r3
 8001062:	dc10      	bgt.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd0a      	ble.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	429a      	cmp	r2, r3
 800107a:	da04      	bge.n	8001086 <_ZN5Spike5CheckERiR6Player+0x9e>
	  player.pos_x--;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60da      	str	r2, [r3, #12]
	}

	if((player.LHIT<=RHIT)&&(((player.THIT>=THIT)&&(player.THIT<=BHIT))||((player.BHIT<=BHIT)&&(player.BHIT>THIT)))&&(player.LHIT>LHIT)){// if player hit right side of spike
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69da      	ldr	r2, [r3, #28]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	429a      	cmp	r2, r3
 8001090:	dc22      	bgt.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	429a      	cmp	r2, r3
 800109c:	db05      	blt.n	80010aa <_ZN5Spike5CheckERiR6Player+0xc2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dd0b      	ble.n	80010c2 <_ZN5Spike5CheckERiR6Player+0xda>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dc10      	bgt.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dd0a      	ble.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dd04      	ble.n	80010d8 <_ZN5Spike5CheckERiR6Player+0xf0>
	 player.pos_x++;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60da      	str	r2, [r3, #12]
	 }
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_ZN5Spike13Display_SpikeEv>:
void Spike::Display_Spike(){//draws spike
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(pos_x, pos_y, bitmap, width, height, White);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	b2d8      	uxtb	r0, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	b2dc      	uxtb	r4, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2501      	movs	r5, #1
 8001106:	9501      	str	r5, [sp, #4]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	f001 f884 	bl	8002218 <ssd1306_DrawBitmap>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}

08001118 <_ZN5Spike15Change_positionEii>:
void Spike::Change_position(int x,int y){//changes position of spike
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	pos_x=x;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	605a      	str	r2, [r3, #4]
	pos_y=y;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZN5SpikeD1Ev>:

Spike::~Spike() {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <_ZN5SpikeD1Ev+0x1c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	080051fc 	.word	0x080051fc

0800115c <_ZN5SpikeD0Ev>:
Spike::~Spike() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
}
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffe9 	bl	800113c <_ZN5SpikeD1Ev>
 800116a:	2128      	movs	r1, #40	; 0x28
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f003 ff77 	bl	8005060 <_ZdlPvj>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_GPIO_Init+0xac>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a24      	ldr	r2, [pc, #144]	; (8001228 <MX_GPIO_Init+0xac>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_GPIO_Init+0xac>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_GPIO_Init+0xac>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <MX_GPIO_Init+0xac>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_GPIO_Init+0xac>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <MX_GPIO_Init+0xb0>)
 80011ca:	f001 fd07 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_Pin;
 80011ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f001 fb5f 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEFT_Pin|UP_Pin;
 80011ea:	2330      	movs	r3, #48	; 0x30
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <MX_GPIO_Init+0xb0>)
 80011fe:	f001 fb53 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_GPIO_Init+0xb0>)
 800121c:	f001 fb44 	bl	80028a8 <HAL_GPIO_Init>

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <MX_I2C1_Init+0x78>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E063FF;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_I2C1_Init+0x74>)
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <MX_I2C1_Init+0x7c>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001248:	2201      	movs	r2, #1
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <MX_I2C1_Init+0x74>)
 800126c:	f001 fcce 	bl	8002c0c <HAL_I2C_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001276:	f000 fdc6 	bl	8001e06 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800127a:	2100      	movs	r1, #0
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x74>)
 800127e:	f002 f8bb 	bl	80033f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001288:	f000 fdbd 	bl	8001e06 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_I2C1_Init+0x74>)
 8001290:	f002 f8fd 	bl	800348e <HAL_I2CEx_ConfigDigitalFilter>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800129a:	f000 fdb4 	bl	8001e06 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000a4 	.word	0x200000a4
 80012a8:	40005400 	.word	0x40005400
 80012ac:	00e063ff 	.word	0x00e063ff

080012b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09c      	sub	sp, #112	; 0x70
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	2244      	movs	r2, #68	; 0x44
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fef5 	bl	80050c0 <memset>
  if(i2cHandle->Instance==I2C1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <HAL_I2C_MspInit+0xe0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d153      	bne.n	8001388 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fef3 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012f8:	f000 fd85 	bl	8001e06 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001330:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f001 faac 	bl	80028a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <HAL_I2C_MspInit+0xe8>)
 800136c:	f001 fa9c 	bl	80028a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_I2C_MspInit+0xe4>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	3770      	adds	r7, #112	; 0x70
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400

0800139c <_Z10change_mapRiS_S_S_S_S_4Coin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-------------------------------change map function---------------------------------------*/
void change_map(int &cur_map,int &is_map_changed,int &Block_1_A,int &Block_1_B,int &Mob_1_A,int &Mob_1_B,Coin coin){//maps~
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
if(coin.is_coin_gathered==true){//if coin gathered boxi is go to the next map
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	f040 8202 	bne.w	80017b8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x41c>
// cur_map=TM_RNG_Get()%1+2;
	cur_map++; //random map will be in future work in progress
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]
if(cur_map==2){//map 2
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d170      	bne.n	80014a8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x10c>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(12, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	210c      	movs	r1, #12
 80013ca:	48c6      	ldr	r0, [pc, #792]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 80013cc:	f7ff fd98 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,20);
 80013d0:	2214      	movs	r2, #20
 80013d2:	2101      	movs	r1, #1
 80013d4:	48c4      	ldr	r0, [pc, #784]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 80013d6:	f7ff f9f1 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(11,20);
 80013da:	2214      	movs	r2, #20
 80013dc:	210b      	movs	r1, #11
 80013de:	48c3      	ldr	r0, [pc, #780]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80013e0:	f7ff f9ec 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(21,20);
 80013e4:	2214      	movs	r2, #20
 80013e6:	2115      	movs	r1, #21
 80013e8:	48c1      	ldr	r0, [pc, #772]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 80013ea:	f7ff f9e7 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(91,20);
 80013ee:	2214      	movs	r2, #20
 80013f0:	215b      	movs	r1, #91	; 0x5b
 80013f2:	48c0      	ldr	r0, [pc, #768]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 80013f4:	f7ff f9e2 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(101,20);
 80013f8:	2214      	movs	r2, #20
 80013fa:	2165      	movs	r1, #101	; 0x65
 80013fc:	48be      	ldr	r0, [pc, #760]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 80013fe:	f7ff f9dd 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(81,52);
 8001402:	2234      	movs	r2, #52	; 0x34
 8001404:	2151      	movs	r1, #81	; 0x51
 8001406:	48bd      	ldr	r0, [pc, #756]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 8001408:	f7ff f9d8 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(91,52);
 800140c:	2234      	movs	r2, #52	; 0x34
 800140e:	215b      	movs	r1, #91	; 0x5b
 8001410:	48bb      	ldr	r0, [pc, #748]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 8001412:	f7ff f9d3 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(101,52);
 8001416:	2234      	movs	r2, #52	; 0x34
 8001418:	2165      	movs	r1, #101	; 0x65
 800141a:	48ba      	ldr	r0, [pc, #744]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 800141c:	f7ff f9ce 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(111,52);
 8001420:	2234      	movs	r2, #52	; 0x34
 8001422:	216f      	movs	r1, #111	; 0x6f
 8001424:	48b8      	ldr	r0, [pc, #736]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 8001426:	f7ff f9c9 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,20);
 800142a:	2214      	movs	r2, #20
 800142c:	2146      	movs	r1, #70	; 0x46
 800142e:	48b7      	ldr	r0, [pc, #732]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 8001430:	f7ff f9c4 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=31;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	221f      	movs	r2, #31
 8001438:	601a      	str	r2, [r3, #0]
Block_1_B=81;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2251      	movs	r2, #81	; 0x51
 800143e:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(91, 44);
 8001440:	222c      	movs	r2, #44	; 0x2c
 8001442:	215b      	movs	r1, #91	; 0x5b
 8001444:	48b2      	ldr	r0, [pc, #712]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001446:	f7ff fc74 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800144a:	4bb1      	ldr	r3, [pc, #708]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 800144c:	2201      	movs	r2, #1
 800144e:	605a      	str	r2, [r3, #4]
Mob_1_A=90;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	225a      	movs	r2, #90	; 0x5a
 8001454:	601a      	str	r2, [r3, #0]
Mob_1_B=120;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	2278      	movs	r2, #120	; 0x78
 800145a:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(2, 14);
 800145c:	220e      	movs	r2, #14
 800145e:	2102      	movs	r1, #2
 8001460:	48ac      	ldr	r0, [pc, #688]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 8001462:	f7ff fe59 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(7, 14);
 8001466:	220e      	movs	r2, #14
 8001468:	2107      	movs	r1, #7
 800146a:	48ab      	ldr	r0, [pc, #684]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 800146c:	f7ff fe54 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(81, 26);
 8001470:	221a      	movs	r2, #26
 8001472:	2151      	movs	r1, #81	; 0x51
 8001474:	48a9      	ldr	r0, [pc, #676]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 8001476:	f7ff fe4f 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(86, 26);
 800147a:	221a      	movs	r2, #26
 800147c:	2156      	movs	r1, #86	; 0x56
 800147e:	48a8      	ldr	r0, [pc, #672]	; (8001720 <_Z10change_mapRiS_S_S_S_S_4Coin+0x384>)
 8001480:	f7ff fe4a 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(122, 16);
 8001484:	2210      	movs	r2, #16
 8001486:	217a      	movs	r1, #122	; 0x7a
 8001488:	48a6      	ldr	r0, [pc, #664]	; (8001724 <_Z10change_mapRiS_S_S_S_S_4Coin+0x388>)
 800148a:	f7ff fe45 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(122, 48);
 800148e:	2230      	movs	r2, #48	; 0x30
 8001490:	217a      	movs	r1, #122	; 0x7a
 8001492:	48a5      	ldr	r0, [pc, #660]	; (8001728 <_Z10change_mapRiS_S_S_S_S_4Coin+0x38c>)
 8001494:	f7ff fe40 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(82,44);
 8001498:	222c      	movs	r2, #44	; 0x2c
 800149a:	2152      	movs	r1, #82	; 0x52
 800149c:	48a3      	ldr	r0, [pc, #652]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 800149e:	f7ff fab8 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 80014a2:	4ba2      	ldr	r3, [pc, #648]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	609a      	str	r2, [r3, #8]
//cur_map++;
}
if(cur_map==3){// map 3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d170      	bne.n	8001592 <_Z10change_mapRiS_S_S_S_S_4Coin+0x1f6>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(2, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2102      	movs	r1, #2
 80014b4:	488b      	ldr	r0, [pc, #556]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 80014b6:	f7ff fd23 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,20);
 80014ba:	2214      	movs	r2, #20
 80014bc:	2101      	movs	r1, #1
 80014be:	488a      	ldr	r0, [pc, #552]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 80014c0:	f7ff f97c 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(26,20);
 80014c4:	2214      	movs	r2, #20
 80014c6:	211a      	movs	r1, #26
 80014c8:	4888      	ldr	r0, [pc, #544]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80014ca:	f7ff f977 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(31,58);
 80014ce:	223a      	movs	r2, #58	; 0x3a
 80014d0:	211f      	movs	r1, #31
 80014d2:	4887      	ldr	r0, [pc, #540]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 80014d4:	f7ff f972 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(56,58);
 80014d8:	223a      	movs	r2, #58	; 0x3a
 80014da:	2138      	movs	r1, #56	; 0x38
 80014dc:	4885      	ldr	r0, [pc, #532]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 80014de:	f7ff f96d 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(86,58);
 80014e2:	223a      	movs	r2, #58	; 0x3a
 80014e4:	2156      	movs	r1, #86	; 0x56
 80014e6:	4884      	ldr	r0, [pc, #528]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 80014e8:	f7ff f968 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(96,58);
 80014ec:	223a      	movs	r2, #58	; 0x3a
 80014ee:	2160      	movs	r1, #96	; 0x60
 80014f0:	4882      	ldr	r0, [pc, #520]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 80014f2:	f7ff f963 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(106,58);
 80014f6:	223a      	movs	r2, #58	; 0x3a
 80014f8:	216a      	movs	r1, #106	; 0x6a
 80014fa:	4881      	ldr	r0, [pc, #516]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 80014fc:	f7ff f95e 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(116,58);
 8001500:	223a      	movs	r2, #58	; 0x3a
 8001502:	2174      	movs	r1, #116	; 0x74
 8001504:	487f      	ldr	r0, [pc, #508]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 8001506:	f7ff f959 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(21,58);
 800150a:	223a      	movs	r2, #58	; 0x3a
 800150c:	2115      	movs	r1, #21
 800150e:	487e      	ldr	r0, [pc, #504]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 8001510:	f7ff f954 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,20);
 8001514:	2214      	movs	r2, #20
 8001516:	2146      	movs	r1, #70	; 0x46
 8001518:	487c      	ldr	r0, [pc, #496]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 800151a:	f7ff f94f 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=36;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2224      	movs	r2, #36	; 0x24
 8001522:	601a      	str	r2, [r3, #0]
Block_1_B=96;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2260      	movs	r2, #96	; 0x60
 8001528:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(91, 50);
 800152a:	2232      	movs	r2, #50	; 0x32
 800152c:	215b      	movs	r1, #91	; 0x5b
 800152e:	4878      	ldr	r0, [pc, #480]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001530:	f7ff fbff 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001536:	2201      	movs	r2, #1
 8001538:	605a      	str	r2, [r3, #4]
Mob_1_A=86;
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2256      	movs	r2, #86	; 0x56
 800153e:	601a      	str	r2, [r3, #0]
Mob_1_B=126;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	227e      	movs	r2, #126	; 0x7e
 8001544:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(18, 32);
 8001546:	2220      	movs	r2, #32
 8001548:	2112      	movs	r1, #18
 800154a:	4872      	ldr	r0, [pc, #456]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 800154c:	f7ff fde4 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(40, 32);
 8001550:	2220      	movs	r2, #32
 8001552:	2128      	movs	r1, #40	; 0x28
 8001554:	4870      	ldr	r0, [pc, #448]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 8001556:	f7ff fddf 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(47, 32);
 800155a:	2220      	movs	r2, #32
 800155c:	212f      	movs	r1, #47	; 0x2f
 800155e:	486f      	ldr	r0, [pc, #444]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 8001560:	f7ff fdda 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(54, 32);
 8001564:	2220      	movs	r2, #32
 8001566:	2136      	movs	r1, #54	; 0x36
 8001568:	486d      	ldr	r0, [pc, #436]	; (8001720 <_Z10change_mapRiS_S_S_S_S_4Coin+0x384>)
 800156a:	f7ff fdd5 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(61, 32);
 800156e:	2220      	movs	r2, #32
 8001570:	213d      	movs	r1, #61	; 0x3d
 8001572:	486c      	ldr	r0, [pc, #432]	; (8001724 <_Z10change_mapRiS_S_S_S_S_4Coin+0x388>)
 8001574:	f7ff fdd0 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(96, 32);
 8001578:	2220      	movs	r2, #32
 800157a:	2160      	movs	r1, #96	; 0x60
 800157c:	486a      	ldr	r0, [pc, #424]	; (8001728 <_Z10change_mapRiS_S_S_S_S_4Coin+0x38c>)
 800157e:	f7ff fdcb 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(32,45);
 8001582:	222d      	movs	r2, #45	; 0x2d
 8001584:	2120      	movs	r1, #32
 8001586:	4869      	ldr	r0, [pc, #420]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 8001588:	f7ff fa43 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 800158c:	4b67      	ldr	r3, [pc, #412]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 800158e:	2201      	movs	r2, #1
 8001590:	609a      	str	r2, [r3, #8]
//cur_map++;
 }

if(cur_map==4){// map 4
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d170      	bne.n	800167c <_Z10change_mapRiS_S_S_S_S_4Coin+0x2e0>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(5, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2105      	movs	r1, #5
 800159e:	4851      	ldr	r0, [pc, #324]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 80015a0:	f7ff fcae 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(1,46);
 80015a4:	222e      	movs	r2, #46	; 0x2e
 80015a6:	2101      	movs	r1, #1
 80015a8:	484f      	ldr	r0, [pc, #316]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 80015aa:	f7ff f907 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(31,56);
 80015ae:	2238      	movs	r2, #56	; 0x38
 80015b0:	211f      	movs	r1, #31
 80015b2:	484e      	ldr	r0, [pc, #312]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80015b4:	f7ff f902 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(41,56);
 80015b8:	2238      	movs	r2, #56	; 0x38
 80015ba:	2129      	movs	r1, #41	; 0x29
 80015bc:	484c      	ldr	r0, [pc, #304]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 80015be:	f7ff f8fd 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(51,56);
 80015c2:	2238      	movs	r2, #56	; 0x38
 80015c4:	2133      	movs	r1, #51	; 0x33
 80015c6:	484b      	ldr	r0, [pc, #300]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 80015c8:	f7ff f8f8 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(61,56);
 80015cc:	2238      	movs	r2, #56	; 0x38
 80015ce:	213d      	movs	r1, #61	; 0x3d
 80015d0:	4849      	ldr	r0, [pc, #292]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 80015d2:	f7ff f8f3 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(71,56);
 80015d6:	2238      	movs	r2, #56	; 0x38
 80015d8:	2147      	movs	r1, #71	; 0x47
 80015da:	4848      	ldr	r0, [pc, #288]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 80015dc:	f7ff f8ee 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(96,52);
 80015e0:	2234      	movs	r2, #52	; 0x34
 80015e2:	2160      	movs	r1, #96	; 0x60
 80015e4:	4846      	ldr	r0, [pc, #280]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 80015e6:	f7ff f8e9 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(106,42);
 80015ea:	222a      	movs	r2, #42	; 0x2a
 80015ec:	216a      	movs	r1, #106	; 0x6a
 80015ee:	4845      	ldr	r0, [pc, #276]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 80015f0:	f7ff f8e4 	bl	80007bc <_ZN5Block15Change_positionEii>
B[9].Change_position(31,30);
 80015f4:	221e      	movs	r2, #30
 80015f6:	211f      	movs	r1, #31
 80015f8:	4843      	ldr	r0, [pc, #268]	; (8001708 <_Z10change_mapRiS_S_S_S_S_4Coin+0x36c>)
 80015fa:	f7ff f8df 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(70,36);
 80015fe:	2224      	movs	r2, #36	; 0x24
 8001600:	2146      	movs	r1, #70	; 0x46
 8001602:	4842      	ldr	r0, [pc, #264]	; (800170c <_Z10change_mapRiS_S_S_S_S_4Coin+0x370>)
 8001604:	f7ff f8da 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=41;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2229      	movs	r2, #41	; 0x29
 800160c:	601a      	str	r2, [r3, #0]
Block_1_B=106;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	226a      	movs	r2, #106	; 0x6a
 8001612:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(60, 48);
 8001614:	2230      	movs	r2, #48	; 0x30
 8001616:	213c      	movs	r1, #60	; 0x3c
 8001618:	483d      	ldr	r0, [pc, #244]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 800161a:	f7ff fb8a 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <_Z10change_mapRiS_S_S_S_S_4Coin+0x374>)
 8001620:	2201      	movs	r2, #1
 8001622:	605a      	str	r2, [r3, #4]
Mob_1_A=31;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	221f      	movs	r2, #31
 8001628:	601a      	str	r2, [r3, #0]
Mob_1_B=81;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2251      	movs	r2, #81	; 0x51
 800162e:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(21, 60);
 8001630:	223c      	movs	r2, #60	; 0x3c
 8001632:	2115      	movs	r1, #21
 8001634:	4837      	ldr	r0, [pc, #220]	; (8001714 <_Z10change_mapRiS_S_S_S_S_4Coin+0x378>)
 8001636:	f7ff fd6f 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(26, 60);
 800163a:	223c      	movs	r2, #60	; 0x3c
 800163c:	211a      	movs	r1, #26
 800163e:	4836      	ldr	r0, [pc, #216]	; (8001718 <_Z10change_mapRiS_S_S_S_S_4Coin+0x37c>)
 8001640:	f7ff fd6a 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(81, 60);
 8001644:	223c      	movs	r2, #60	; 0x3c
 8001646:	2151      	movs	r1, #81	; 0x51
 8001648:	4834      	ldr	r0, [pc, #208]	; (800171c <_Z10change_mapRiS_S_S_S_S_4Coin+0x380>)
 800164a:	f7ff fd65 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(86, 60);
 800164e:	223c      	movs	r2, #60	; 0x3c
 8001650:	2156      	movs	r1, #86	; 0x56
 8001652:	4833      	ldr	r0, [pc, #204]	; (8001720 <_Z10change_mapRiS_S_S_S_S_4Coin+0x384>)
 8001654:	f7ff fd60 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(91, 60);
 8001658:	223c      	movs	r2, #60	; 0x3c
 800165a:	215b      	movs	r1, #91	; 0x5b
 800165c:	4831      	ldr	r0, [pc, #196]	; (8001724 <_Z10change_mapRiS_S_S_S_S_4Coin+0x388>)
 800165e:	f7ff fd5b 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(120, 35);
 8001662:	2223      	movs	r2, #35	; 0x23
 8001664:	2178      	movs	r1, #120	; 0x78
 8001666:	4830      	ldr	r0, [pc, #192]	; (8001728 <_Z10change_mapRiS_S_S_S_S_4Coin+0x38c>)
 8001668:	f7ff fd56 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(32,20);
 800166c:	2214      	movs	r2, #20
 800166e:	2120      	movs	r1, #32
 8001670:	482e      	ldr	r0, [pc, #184]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 8001672:	f7ff f9ce 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <_Z10change_mapRiS_S_S_S_S_4Coin+0x390>)
 8001678:	2201      	movs	r2, #1
 800167a:	609a      	str	r2, [r3, #8]
//cur_map++;
 }
if(cur_map==5){// map 5
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b05      	cmp	r3, #5
 8001682:	f040 8099 	bne.w	80017b8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x41c>
//-----POSITIONING OBJECTS-----//
//--------PLAYER------------//
boxi.Change_position(111, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	216f      	movs	r1, #111	; 0x6f
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x348>)
 800168c:	f7ff fc38 	bl	8000f00 <_ZN6Player15Change_positionEii>
//--------BLOCKS------------//
B[0].Change_position(111,30);
 8001690:	221e      	movs	r2, #30
 8001692:	216f      	movs	r1, #111	; 0x6f
 8001694:	4814      	ldr	r0, [pc, #80]	; (80016e8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x34c>)
 8001696:	f7ff f891 	bl	80007bc <_ZN5Block15Change_positionEii>
B[1].Change_position(86,30);
 800169a:	221e      	movs	r2, #30
 800169c:	2156      	movs	r1, #86	; 0x56
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <_Z10change_mapRiS_S_S_S_S_4Coin+0x350>)
 80016a0:	f7ff f88c 	bl	80007bc <_ZN5Block15Change_positionEii>
B[2].Change_position(66,20);
 80016a4:	2214      	movs	r2, #20
 80016a6:	2142      	movs	r1, #66	; 0x42
 80016a8:	4811      	ldr	r0, [pc, #68]	; (80016f0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x354>)
 80016aa:	f7ff f887 	bl	80007bc <_ZN5Block15Change_positionEii>
B[3].Change_position(1,52);
 80016ae:	2234      	movs	r2, #52	; 0x34
 80016b0:	2101      	movs	r1, #1
 80016b2:	4810      	ldr	r0, [pc, #64]	; (80016f4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x358>)
 80016b4:	f7ff f882 	bl	80007bc <_ZN5Block15Change_positionEii>
B[4].Change_position(21,52);
 80016b8:	2234      	movs	r2, #52	; 0x34
 80016ba:	2115      	movs	r1, #21
 80016bc:	480e      	ldr	r0, [pc, #56]	; (80016f8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x35c>)
 80016be:	f7ff f87d 	bl	80007bc <_ZN5Block15Change_positionEii>
B[5].Change_position(46,52);
 80016c2:	2234      	movs	r2, #52	; 0x34
 80016c4:	212e      	movs	r1, #46	; 0x2e
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <_Z10change_mapRiS_S_S_S_S_4Coin+0x360>)
 80016c8:	f7ff f878 	bl	80007bc <_ZN5Block15Change_positionEii>
B[6].Change_position(46,30);
 80016cc:	221e      	movs	r2, #30
 80016ce:	212e      	movs	r1, #46	; 0x2e
 80016d0:	480b      	ldr	r0, [pc, #44]	; (8001700 <_Z10change_mapRiS_S_S_S_S_4Coin+0x364>)
 80016d2:	f7ff f873 	bl	80007bc <_ZN5Block15Change_positionEii>
B[8].Change_position(101,58);
 80016d6:	223a      	movs	r2, #58	; 0x3a
 80016d8:	2165      	movs	r1, #101	; 0x65
 80016da:	480a      	ldr	r0, [pc, #40]	; (8001704 <_Z10change_mapRiS_S_S_S_S_4Coin+0x368>)
 80016dc:	f7ff f86e 	bl	80007bc <_ZN5Block15Change_positionEii>
 80016e0:	e026      	b.n	8001730 <_Z10change_mapRiS_S_S_S_S_4Coin+0x394>
 80016e2:	bf00      	nop
 80016e4:	20000108 	.word	0x20000108
 80016e8:	20000138 	.word	0x20000138
 80016ec:	2000016c 	.word	0x2000016c
 80016f0:	200001a0 	.word	0x200001a0
 80016f4:	200001d4 	.word	0x200001d4
 80016f8:	20000208 	.word	0x20000208
 80016fc:	2000023c 	.word	0x2000023c
 8001700:	20000270 	.word	0x20000270
 8001704:	200002d8 	.word	0x200002d8
 8001708:	2000030c 	.word	0x2000030c
 800170c:	200002a4 	.word	0x200002a4
 8001710:	20000340 	.word	0x20000340
 8001714:	20000374 	.word	0x20000374
 8001718:	2000039c 	.word	0x2000039c
 800171c:	200003c4 	.word	0x200003c4
 8001720:	200003ec 	.word	0x200003ec
 8001724:	20000414 	.word	0x20000414
 8001728:	2000043c 	.word	0x2000043c
 800172c:	20000464 	.word	0x20000464
B[9].Change_position(121,58);
 8001730:	223a      	movs	r2, #58	; 0x3a
 8001732:	2179      	movs	r1, #121	; 0x79
 8001734:	4822      	ldr	r0, [pc, #136]	; (80017c0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x424>)
 8001736:	f7ff f841 	bl	80007bc <_ZN5Block15Change_positionEii>
B[7].Change_position(46,16);
 800173a:	2210      	movs	r2, #16
 800173c:	212e      	movs	r1, #46	; 0x2e
 800173e:	4821      	ldr	r0, [pc, #132]	; (80017c4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x428>)
 8001740:	f7ff f83c 	bl	80007bc <_ZN5Block15Change_positionEii>
Block_1_A=21;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2215      	movs	r2, #21
 8001748:	601a      	str	r2, [r3, #0]
Block_1_B=66;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2242      	movs	r2, #66	; 0x42
 800174e:	601a      	str	r2, [r3, #0]
//--------MOBS----------------//
m1.Change_position(21, 44);
 8001750:	222c      	movs	r2, #44	; 0x2c
 8001752:	2115      	movs	r1, #21
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x42c>)
 8001756:	f7ff faec 	bl	8000d32 <_ZN3Mob15Change_positionEii>
m1.is_mob_alive=true;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x42c>)
 800175c:	2201      	movs	r2, #1
 800175e:	605a      	str	r2, [r3, #4]
Mob_1_A=1;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
Mob_1_B=46;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	222e      	movs	r2, #46	; 0x2e
 800176a:	601a      	str	r2, [r3, #0]
//--------SPIKES--------------//
S[0].Change_position(11, 20);
 800176c:	2214      	movs	r2, #20
 800176e:	210b      	movs	r1, #11
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <_Z10change_mapRiS_S_S_S_S_4Coin+0x430>)
 8001772:	f7ff fcd1 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[1].Change_position(17, 20);
 8001776:	2214      	movs	r2, #20
 8001778:	2111      	movs	r1, #17
 800177a:	4815      	ldr	r0, [pc, #84]	; (80017d0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x434>)
 800177c:	f7ff fccc 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[2].Change_position(26, 30);
 8001780:	221e      	movs	r2, #30
 8001782:	211a      	movs	r1, #26
 8001784:	4813      	ldr	r0, [pc, #76]	; (80017d4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x438>)
 8001786:	f7ff fcc7 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[3].Change_position(31, 30);
 800178a:	221e      	movs	r2, #30
 800178c:	211f      	movs	r1, #31
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <_Z10change_mapRiS_S_S_S_S_4Coin+0x43c>)
 8001790:	f7ff fcc2 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[4].Change_position(46, 24);
 8001794:	2218      	movs	r2, #24
 8001796:	212e      	movs	r1, #46	; 0x2e
 8001798:	4810      	ldr	r0, [pc, #64]	; (80017dc <_Z10change_mapRiS_S_S_S_S_4Coin+0x440>)
 800179a:	f7ff fcbd 	bl	8001118 <_ZN5Spike15Change_positionEii>
S[5].Change_position(51,24);
 800179e:	2218      	movs	r2, #24
 80017a0:	2133      	movs	r1, #51	; 0x33
 80017a2:	480f      	ldr	r0, [pc, #60]	; (80017e0 <_Z10change_mapRiS_S_S_S_S_4Coin+0x444>)
 80017a4:	f7ff fcb8 	bl	8001118 <_ZN5Spike15Change_positionEii>
//--------COIN--------------/
c1.Change_position(48,44);
 80017a8:	222c      	movs	r2, #44	; 0x2c
 80017aa:	2130      	movs	r1, #48	; 0x30
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x448>)
 80017ae:	f7ff f930 	bl	8000a12 <_ZN4Coin15Change_positionEii>
c1.is_coin_alive=true;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <_Z10change_mapRiS_S_S_S_S_4Coin+0x448>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	609a      	str	r2, [r3, #8]
//cur_map++;
 }
}
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000030c 	.word	0x2000030c
 80017c4:	200002a4 	.word	0x200002a4
 80017c8:	20000340 	.word	0x20000340
 80017cc:	20000374 	.word	0x20000374
 80017d0:	2000039c 	.word	0x2000039c
 80017d4:	200003c4 	.word	0x200003c4
 80017d8:	200003ec 	.word	0x200003ec
 80017dc:	20000414 	.word	0x20000414
 80017e0:	2000043c 	.word	0x2000043c
 80017e4:	20000464 	.word	0x20000464

080017e8 <_Z4JumpR6PlayerRiS1_>:
/*-------------------jump function------------------------------------------*/
	void Jump(Player &player,int &jump_height,int &barrier){
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]

	 if((jump_height>0)&&(barrier==true))
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dd1a      	ble.n	8001832 <_Z4JumpR6PlayerRiS1_+0x4a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d116      	bne.n	8001832 <_Z4JumpR6PlayerRiS1_+0x4a>
	 {
		player.pos_y--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	1e5a      	subs	r2, r3, #1
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	611a      	str	r2, [r3, #16]
	    jump_height--;   /////////////////////////////////////////////////////
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	601a      	str	r2, [r3, #0]
		player.pos_y--; /* if gravitation is off we can jump on Jump_height */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	611a      	str	r2, [r3, #16]
		jump_height--; /*     in jump we are losing Jump_height             */
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	601a      	str	r2, [r3, #0]
		barrier=true; /*    when we are jumping gravitation is off          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]
                     /////////////////////////////////////////////////////////
		}
	 if(jump_height==0){
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <_Z4JumpR6PlayerRiS1_+0x58>
		 barrier=false;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
	 }
	 }
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_Z11GravitationR6PlayeriRi>:

/*---------------------gravitation function-----------------------------------*/
	void Gravitation(Player &player,int ground_level,int &barrier){
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]

	  player.generateHIT();//generating actual hit box of player
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff fb31 	bl	8000ec0 <_ZN6Player11generateHITEv>

	 if(player.BHIT>=ground_level){
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	429a      	cmp	r2, r3
 8001866:	dc07      	bgt.n	8001878 <_Z11GravitationR6PlayeriRi+0x2c>
		barrier=true;// if player hit the ground
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]
		player.Player_live--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	605a      	str	r2, [r3, #4]
	 }

	if(barrier==false){ // if player is in free air we are falling fastest
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <_Z11GravitationR6PlayeriRi+0x48>
		player.pos_y++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	611a      	str	r2, [r3, #16]
		player.pos_y++;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	611a      	str	r2, [r3, #16]
	 }
	}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_Z13Check_buttonsR6Playeri>:

/*----------------------checking buttons---------------------------------------*/
	void Check_buttons(Player &player,int barrier){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
		player.generateHIT();//generating actual hit box of player
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fb0a 	bl	8000ec0 <_ZN6Player11generateHITEv>

		if((HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0)&&(barrier==true))//jumping
 80018ac:	2120      	movs	r1, #32
 80018ae:	4820      	ldr	r0, [pc, #128]	; (8001930 <_Z13Check_buttonsR6Playeri+0x94>)
 80018b0:	f001 f97c 	bl	8002bac <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d104      	bne.n	80018c4 <_Z13Check_buttonsR6Playeri+0x28>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <_Z13Check_buttonsR6Playeri+0x28>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <_Z13Check_buttonsR6Playeri+0x2a>
 80018c4:	2300      	movs	r3, #0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <_Z13Check_buttonsR6Playeri+0x42>
		{
          if((Jump_height==0)&&(barrier==true)){//checking if player has end his jump
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <_Z13Check_buttonsR6Playeri+0x98>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <_Z13Check_buttonsR6Playeri+0x42>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d102      	bne.n	80018de <_Z13Check_buttonsR6Playeri+0x42>
        	  Jump_height=18;                   // and if he is on something that he jump of
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <_Z13Check_buttonsR6Playeri+0x98>)
 80018da:	2212      	movs	r2, #18
 80018dc:	601a      	str	r2, [r3, #0]
          }
		}

		if(HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin)==0){ //go into right side
 80018de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e6:	f001 f961 	bl	8002bac <HAL_GPIO_ReadPin>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <_Z13Check_buttonsR6Playeri+0x68>
			player.pos_x++;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]
		}
		if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin)==0){//go into left side
 8001904:	2110      	movs	r1, #16
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <_Z13Check_buttonsR6Playeri+0x94>)
 8001908:	f001 f950 	bl	8002bac <HAL_GPIO_ReadPin>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <_Z13Check_buttonsR6Playeri+0x8a>
			player.pos_x--;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60da      	str	r2, [r3, #12]
		}
		}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	48000400 	.word	0x48000400
 8001934:	20000498 	.word	0x20000498

08001938 <_Z19Display_Over_Screenv>:
/*-----------------------------GAME OVER SCREEN--------------------------------*/
	void Display_Over_Screen(){//displaying a 128x64 game over bitmap function
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af02      	add	r7, sp, #8
		ssd1306_Fill(Black);
 800193e:	2000      	movs	r0, #0
 8001940:	f000 fbca 	bl	80020d8 <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, Bitmap_game_over, 128, 64, White);
 8001944:	2301      	movs	r3, #1
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <_Z19Display_Over_Screenv+0x34>)
 8001950:	2100      	movs	r1, #0
 8001952:	2000      	movs	r0, #0
 8001954:	f000 fc60 	bl	8002218 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 8001958:	f000 fbe2 	bl	8002120 <ssd1306_UpdateScreen>
		HAL_Delay(2000);
 800195c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001960:	f000 fe9c 	bl	800269c <HAL_Delay>
	}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	08005204 	.word	0x08005204

08001970 <_ZN4CoinC1ERKS_>:
#include"ssd1306.h"
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#include"Player.h"

class Coin {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <_ZN4CoinC1ERKS_+0x78>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	61da      	str	r2, [r3, #28]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	621a      	str	r2, [r3, #32]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	080051b4 	.word	0x080051b4

080019ec <_Z4Game6PlayerRiS0_>:

/*-----------------------------GAME LOOP----------------------------------------*/
	void Game(Player player,int &barrier,int &Jump_height){//main loop of boxi game
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b098      	sub	sp, #96	; 0x60
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	if(player.Player_live>0){//if player is alive
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f340 80a8 	ble.w	8001b52 <_Z4Game6PlayerRiS0_+0x166>

		//---------DISPLAYING LAST FRAME-----------//
		//displaying all objects//
		  ssd1306_Fill(Black);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 fb68 	bl	80020d8 <ssd1306_Fill>
		  boxi.Display_Player_hearts();
 8001a08:	4855      	ldr	r0, [pc, #340]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001a0a:	f7ff fa07 	bl	8000e1c <_ZN6Player21Display_Player_heartsEv>
		  map1.Display_map();
 8001a0e:	4855      	ldr	r0, [pc, #340]	; (8001b64 <_Z4Game6PlayerRiS0_+0x178>)
 8001a10:	f7ff f854 	bl	8000abc <_ZN3Map11Display_mapEv>
          c1.Display_Coin();
 8001a14:	4854      	ldr	r0, [pc, #336]	; (8001b68 <_Z4Game6PlayerRiS0_+0x17c>)
 8001a16:	f7fe ffdc 	bl	80009d2 <_ZN4Coin12Display_CoinEv>

		  for(int i=0; i<=9; i++){//displaying blocks
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a20:	2b09      	cmp	r3, #9
 8001a22:	dc0c      	bgt.n	8001a3e <_Z4Game6PlayerRiS0_+0x52>
			  B[i].Display_Block();
 8001a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a26:	2234      	movs	r2, #52	; 0x34
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	4a4f      	ldr	r2, [pc, #316]	; (8001b6c <_Z4Game6PlayerRiS0_+0x180>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fdbb 	bl	80005ac <_ZN5Block13Display_BlockEv>
		  for(int i=0; i<=9; i++){//displaying blocks
 8001a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a38:	3301      	adds	r3, #1
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a3c:	e7ef      	b.n	8001a1e <_Z4Game6PlayerRiS0_+0x32>
		  }

		  for(int i=0; i<=5; i++){//displaying spikes
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	dc0d      	bgt.n	8001a64 <_Z4Game6PlayerRiS0_+0x78>
		      S[i].Display_Spike();
 8001a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4a47      	ldr	r2, [pc, #284]	; (8001b70 <_Z4Game6PlayerRiS0_+0x184>)
 8001a54:	4413      	add	r3, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb42 	bl	80010e0 <_ZN5Spike13Display_SpikeEv>
		  for(int i=0; i<=5; i++){//displaying spikes
 8001a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a5e:	3301      	adds	r3, #1
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a62:	e7ee      	b.n	8001a42 <_Z4Game6PlayerRiS0_+0x56>
		   }

		  m1.Display_mob();//displaying mob
 8001a64:	4843      	ldr	r0, [pc, #268]	; (8001b74 <_Z4Game6PlayerRiS0_+0x188>)
 8001a66:	f7ff f944 	bl	8000cf2 <_ZN3Mob11Display_mobEv>

		  boxi.Display_Player();//displaying boxi
 8001a6a:	483d      	ldr	r0, [pc, #244]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001a6c:	f7ff f9ba 	bl	8000de4 <_ZN6Player14Display_PlayerEv>

		  //updating the screen//
		  ssd1306_UpdateScreen();
 8001a70:	f000 fb56 	bl	8002120 <ssd1306_UpdateScreen>

		  //----------MOVING BLOCKS------------------//
		  B[7].Move_Block(Block_1_A, Block_1_B, barrier,boxi);
 8001a74:	4b40      	ldr	r3, [pc, #256]	; (8001b78 <_Z4Game6PlayerRiS0_+0x18c>)
 8001a76:	6819      	ldr	r1, [r3, #0]
 8001a78:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <_Z4Game6PlayerRiS0_+0x190>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	483f      	ldr	r0, [pc, #252]	; (8001b80 <_Z4Game6PlayerRiS0_+0x194>)
 8001a84:	f7fe fe37 	bl	80006f6 <_ZN5Block10Move_BlockEiiRiR6Player>

		  //----------MOVING MOBS-------------------//
		  m1.Move_mob(Mob_1_A,Mob_1_B);
 8001a88:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <_Z4Game6PlayerRiS0_+0x198>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a3e      	ldr	r2, [pc, #248]	; (8001b88 <_Z4Game6PlayerRiS0_+0x19c>)
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4838      	ldr	r0, [pc, #224]	; (8001b74 <_Z4Game6PlayerRiS0_+0x188>)
 8001a94:	f7ff f8f4 	bl	8000c80 <_ZN3Mob8Move_mobEii>

		  //--------CHECKING BARRIERS----------------//
		  c1.Check(boxi,current_map);
 8001a98:	4a3c      	ldr	r2, [pc, #240]	; (8001b8c <_Z4Game6PlayerRiS0_+0x1a0>)
 8001a9a:	4931      	ldr	r1, [pc, #196]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001a9c:	4832      	ldr	r0, [pc, #200]	; (8001b68 <_Z4Game6PlayerRiS0_+0x17c>)
 8001a9e:	f7fe fee5 	bl	800086c <_ZN4Coin5CheckER6PlayerRi>
		  m1.check(boxi);
 8001aa2:	492f      	ldr	r1, [pc, #188]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001aa4:	4833      	ldr	r0, [pc, #204]	; (8001b74 <_Z4Game6PlayerRiS0_+0x188>)
 8001aa6:	f7ff f891 	bl	8000bcc <_ZN3Mob5checkER6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 8001aaa:	2300      	movs	r3, #0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
 8001aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab0:	2b05      	cmp	r3, #5
 8001ab2:	dc0f      	bgt.n	8001ad4 <_Z4Game6PlayerRiS0_+0xe8>
		  	 S[i].Check(barrier, boxi);
 8001ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4a2c      	ldr	r2, [pc, #176]	; (8001b70 <_Z4Game6PlayerRiS0_+0x184>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fa8e 	bl	8000fe8 <_ZN5Spike5CheckERiR6Player>
		  for(int i=0; i<=5; i++){//checking spikes
 8001acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ace:	3301      	adds	r3, #1
 8001ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad2:	e7ec      	b.n	8001aae <_Z4Game6PlayerRiS0_+0xc2>
		  }


		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ada:	2b09      	cmp	r3, #9
 8001adc:	dc0e      	bgt.n	8001afc <_Z4Game6PlayerRiS0_+0x110>
		  	B[i].Check(barrier, boxi);
 8001ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae0:	2234      	movs	r2, #52	; 0x34
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <_Z4Game6PlayerRiS0_+0x180>)
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd78 	bl	80005e4 <_ZN5Block5CheckERiR6Player>
		  for(int i=0; i<=9; i++){ // checking if player(boxi) is on block
 8001af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af6:	3301      	adds	r3, #1
 8001af8:	643b      	str	r3, [r7, #64]	; 0x40
 8001afa:	e7ed      	b.n	8001ad8 <_Z4Game6PlayerRiS0_+0xec>
		  }

		  //----------GRAVITATION FUNCTION----------//
		  Gravitation(boxi, ground_level,barrier);
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <_Z4Game6PlayerRiS0_+0x1a4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4816      	ldr	r0, [pc, #88]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001b06:	f7ff fea1 	bl	800184c <_Z11GravitationR6PlayeriRi>

		  //--------BUTTONS CHECKING ---------------//
	      Check_buttons(boxi,barrier);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4813      	ldr	r0, [pc, #76]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001b12:	f7ff fec3 	bl	800189c <_Z13Check_buttonsR6Playeri>

	      //----------JUMPING FUNCTION--------------//
	      Jump(boxi,Jump_height,barrier);
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4811      	ldr	r0, [pc, #68]	; (8001b60 <_Z4Game6PlayerRiS0_+0x174>)
 8001b1c:	f7ff fe64 	bl	80017e8 <_Z4JumpR6PlayerRiS1_>
	      //-----------CHANGE MAP FUNCTION----------//
	      change_map(current_map,is_map_changed,Block_1_A,Block_1_B,Mob_1_A,Mob_1_B,c1);
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	4910      	ldr	r1, [pc, #64]	; (8001b68 <_Z4Game6PlayerRiS0_+0x17c>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff22 	bl	8001970 <_ZN4CoinC1ERKS_>
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	9302      	str	r3, [sp, #8]
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_Z4Game6PlayerRiS0_+0x19c>)
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_Z4Game6PlayerRiS0_+0x198>)
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <_Z4Game6PlayerRiS0_+0x190>)
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <_Z4Game6PlayerRiS0_+0x18c>)
 8001b3e:	4915      	ldr	r1, [pc, #84]	; (8001b94 <_Z4Game6PlayerRiS0_+0x1a8>)
 8001b40:	4812      	ldr	r0, [pc, #72]	; (8001b8c <_Z4Game6PlayerRiS0_+0x1a0>)
 8001b42:	f7ff fc2b 	bl	800139c <_Z10change_mapRiS_S_S_S_S_4Coin>
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe ff74 	bl	8000a38 <_ZN4CoinD1Ev>
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //i am turning it on for tests but game will go faster without it
	}
	else {
		Display_Over_Screen();
	}
}
 8001b50:	e001      	b.n	8001b56 <_Z4Game6PlayerRiS0_+0x16a>
		Display_Over_Screen();
 8001b52:	f7ff fef1 	bl	8001938 <_Z19Display_Over_Screenv>
}
 8001b56:	bf00      	nop
 8001b58:	3750      	adds	r7, #80	; 0x50
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000108 	.word	0x20000108
 8001b64:	200000f0 	.word	0x200000f0
 8001b68:	20000464 	.word	0x20000464
 8001b6c:	20000138 	.word	0x20000138
 8001b70:	20000374 	.word	0x20000374
 8001b74:	20000340 	.word	0x20000340
 8001b78:	20000010 	.word	0x20000010
 8001b7c:	20000014 	.word	0x20000014
 8001b80:	200002a4 	.word	0x200002a4
 8001b84:	20000008 	.word	0x20000008
 8001b88:	2000000c 	.word	0x2000000c
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004
 8001b94:	20000494 	.word	0x20000494

08001b98 <_ZN6PlayerC1ERKS_>:
#include"ssd1306_tests.h"
#include"Bitmaps.h"
#ifndef INC_PLAYER_H_
#define INC_PLAYER_H_

class Player {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <_ZN6PlayerC1ERKS_+0x78>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	69da      	ldr	r2, [r3, #28]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	61da      	str	r2, [r3, #28]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	621a      	str	r2, [r3, #32]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	080051ec 	.word	0x080051ec

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	; 0x30
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1a:	f000 fcce 	bl	80025ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1e:	f000 f89d 	bl	8001d5c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c22:	f7ff faab 	bl	800117c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c26:	f000 fbfb 	bl	8002420 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c2a:	f7ff fb01 	bl	8001230 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  //Initialize  of libraries//
  	  ssd1306_Init();
 8001c2e:	f000 f9e9 	bl	8002004 <ssd1306_Init>

  	  //fill black the display
  	  ssd1306_Fill(Black);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 fa50 	bl	80020d8 <ssd1306_Fill>
  	  ssd1306_UpdateScreen();
 8001c38:	f000 fa72 	bl	8002120 <ssd1306_UpdateScreen>
  	//-----POSITIONING OBJECTS-----//
     //--------BLOCKS------------//
  	  B[0].Change_position(1,52);
 8001c3c:	2234      	movs	r2, #52	; 0x34
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4832      	ldr	r0, [pc, #200]	; (8001d0c <main+0xf8>)
 8001c42:	f7fe fdbb 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[1].Change_position(11,52);
 8001c46:	2234      	movs	r2, #52	; 0x34
 8001c48:	210b      	movs	r1, #11
 8001c4a:	4831      	ldr	r0, [pc, #196]	; (8001d10 <main+0xfc>)
 8001c4c:	f7fe fdb6 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[2].Change_position(21,52);
 8001c50:	2234      	movs	r2, #52	; 0x34
 8001c52:	2115      	movs	r1, #21
 8001c54:	482f      	ldr	r0, [pc, #188]	; (8001d14 <main+0x100>)
 8001c56:	f7fe fdb1 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[3].Change_position(41,42);
 8001c5a:	222a      	movs	r2, #42	; 0x2a
 8001c5c:	2129      	movs	r1, #41	; 0x29
 8001c5e:	482e      	ldr	r0, [pc, #184]	; (8001d18 <main+0x104>)
 8001c60:	f7fe fdac 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[4].Change_position(41,52);
 8001c64:	2234      	movs	r2, #52	; 0x34
 8001c66:	2129      	movs	r1, #41	; 0x29
 8001c68:	482c      	ldr	r0, [pc, #176]	; (8001d1c <main+0x108>)
 8001c6a:	f7fe fda7 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[5].Change_position(71,42);
 8001c6e:	222a      	movs	r2, #42	; 0x2a
 8001c70:	2147      	movs	r1, #71	; 0x47
 8001c72:	482b      	ldr	r0, [pc, #172]	; (8001d20 <main+0x10c>)
 8001c74:	f7fe fda2 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[6].Change_position(71,52);
 8001c78:	2234      	movs	r2, #52	; 0x34
 8001c7a:	2147      	movs	r1, #71	; 0x47
 8001c7c:	4829      	ldr	r0, [pc, #164]	; (8001d24 <main+0x110>)
 8001c7e:	f7fe fd9d 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[7].Change_position(91,42);
 8001c82:	222a      	movs	r2, #42	; 0x2a
 8001c84:	215b      	movs	r1, #91	; 0x5b
 8001c86:	4828      	ldr	r0, [pc, #160]	; (8001d28 <main+0x114>)
 8001c88:	f7fe fd98 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[8].Change_position(117,42);
 8001c8c:	222a      	movs	r2, #42	; 0x2a
 8001c8e:	2175      	movs	r1, #117	; 0x75
 8001c90:	4826      	ldr	r0, [pc, #152]	; (8001d2c <main+0x118>)
 8001c92:	f7fe fd93 	bl	80007bc <_ZN5Block15Change_positionEii>
  	  B[9].Change_position(117,52);
 8001c96:	2234      	movs	r2, #52	; 0x34
 8001c98:	2175      	movs	r1, #117	; 0x75
 8001c9a:	4825      	ldr	r0, [pc, #148]	; (8001d30 <main+0x11c>)
 8001c9c:	f7fe fd8e 	bl	80007bc <_ZN5Block15Change_positionEii>
  	 //--------SPIKES--------------//
  	  S[0].Change_position(51, 56);
 8001ca0:	2238      	movs	r2, #56	; 0x38
 8001ca2:	2133      	movs	r1, #51	; 0x33
 8001ca4:	4823      	ldr	r0, [pc, #140]	; (8001d34 <main+0x120>)
 8001ca6:	f7ff fa37 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[1].Change_position(56, 56);
 8001caa:	2238      	movs	r2, #56	; 0x38
 8001cac:	2138      	movs	r1, #56	; 0x38
 8001cae:	4822      	ldr	r0, [pc, #136]	; (8001d38 <main+0x124>)
 8001cb0:	f7ff fa32 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[2].Change_position(61, 56);
 8001cb4:	2238      	movs	r2, #56	; 0x38
 8001cb6:	213d      	movs	r1, #61	; 0x3d
 8001cb8:	4820      	ldr	r0, [pc, #128]	; (8001d3c <main+0x128>)
 8001cba:	f7ff fa2d 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[3].Change_position(66, 56);
 8001cbe:	2238      	movs	r2, #56	; 0x38
 8001cc0:	2142      	movs	r1, #66	; 0x42
 8001cc2:	481f      	ldr	r0, [pc, #124]	; (8001d40 <main+0x12c>)
 8001cc4:	f7ff fa28 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[4].Change_position(31, 56);
 8001cc8:	2238      	movs	r2, #56	; 0x38
 8001cca:	211f      	movs	r1, #31
 8001ccc:	481d      	ldr	r0, [pc, #116]	; (8001d44 <main+0x130>)
 8001cce:	f7ff fa23 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  S[5].Change_position(36, 56);
 8001cd2:	2238      	movs	r2, #56	; 0x38
 8001cd4:	2124      	movs	r1, #36	; 0x24
 8001cd6:	481c      	ldr	r0, [pc, #112]	; (8001d48 <main+0x134>)
 8001cd8:	f7ff fa1e 	bl	8001118 <_ZN5Spike15Change_positionEii>
  	  c1.Change_position(119, 36);
 8001cdc:	2224      	movs	r2, #36	; 0x24
 8001cde:	2177      	movs	r1, #119	; 0x77
 8001ce0:	481a      	ldr	r0, [pc, #104]	; (8001d4c <main+0x138>)
 8001ce2:	f7fe fe96 	bl	8000a12 <_ZN4Coin15Change_positionEii>
  	 /* Initialize random number generator */
  	    TM_RNG_Init();
 8001ce6:	f000 fb83 	bl	80023f0 <_Z11TM_RNG_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Game(boxi,barrier,Jump_height); //Game loop
 8001cea:	463b      	mov	r3, r7
 8001cec:	4918      	ldr	r1, [pc, #96]	; (8001d50 <main+0x13c>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff52 	bl	8001b98 <_ZN6PlayerC1ERKS_>
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <main+0x140>)
 8001cf8:	4917      	ldr	r1, [pc, #92]	; (8001d58 <main+0x144>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fe76 	bl	80019ec <_Z4Game6PlayerRiS0_>
 8001d00:	463b      	mov	r3, r7
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f90e 	bl	8000f24 <_ZN6PlayerD1Ev>
 8001d08:	e7ef      	b.n	8001cea <main+0xd6>
 8001d0a:	bf00      	nop
 8001d0c:	20000138 	.word	0x20000138
 8001d10:	2000016c 	.word	0x2000016c
 8001d14:	200001a0 	.word	0x200001a0
 8001d18:	200001d4 	.word	0x200001d4
 8001d1c:	20000208 	.word	0x20000208
 8001d20:	2000023c 	.word	0x2000023c
 8001d24:	20000270 	.word	0x20000270
 8001d28:	200002a4 	.word	0x200002a4
 8001d2c:	200002d8 	.word	0x200002d8
 8001d30:	2000030c 	.word	0x2000030c
 8001d34:	20000374 	.word	0x20000374
 8001d38:	2000039c 	.word	0x2000039c
 8001d3c:	200003c4 	.word	0x200003c4
 8001d40:	200003ec 	.word	0x200003ec
 8001d44:	20000414 	.word	0x20000414
 8001d48:	2000043c 	.word	0x2000043c
 8001d4c:	20000464 	.word	0x20000464
 8001d50:	20000108 	.word	0x20000108
 8001d54:	20000498 	.word	0x20000498
 8001d58:	2000049c 	.word	0x2000049c

08001d5c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b094      	sub	sp, #80	; 0x50
 8001d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	2238      	movs	r2, #56	; 0x38
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 f9a8 	bl	80050c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f001 fbd2 	bl	8003528 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d8e:	2340      	movs	r3, #64	; 0x40
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d92:	2302      	movs	r3, #2
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d96:	2302      	movs	r3, #2
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d9e:	2355      	movs	r3, #85	; 0x55
 8001da0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da2:	2302      	movs	r3, #2
 8001da4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001daa:	2302      	movs	r3, #2
 8001dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dae:	f107 0318 	add.w	r3, r7, #24
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fc5c 	bl	8003670 <HAL_RCC_OscConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bf14      	ite	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	2300      	moveq	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001dc8:	f000 f81d 	bl	8001e06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dcc:	230f      	movs	r3, #15
 8001dce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2104      	movs	r1, #4
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 ff5b 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001dfa:	f000 f804 	bl	8001e06 <Error_Handler>
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3750      	adds	r7, #80	; 0x50
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0a:	b672      	cpsid	i
}
 8001e0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <Error_Handler+0x8>

08001e10 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af06      	add	r7, sp, #24
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d15e      	bne.n	8001ede <_Z41__static_initialization_and_destruction_0ii+0xce>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d159      	bne.n	8001ede <_Z41__static_initialization_and_destruction_0ii+0xce>
#include"string.h"
#include "Spike.h"
#include "Coin.h"

 // creating a map//
Map map1(Bitmap_map);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2340      	movs	r3, #64	; 0x40
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	4940      	ldr	r1, [pc, #256]	; (8001f38 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001e38:	4840      	ldr	r0, [pc, #256]	; (8001f3c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001e3a:	f7fe fe1d 	bl	8000a78 <_ZN3MapC1EPKhiiii>
// creating the player//
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 8001e3e:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2303      	movs	r3, #3
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	2308      	movs	r3, #8
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	210a      	movs	r1, #10
 8001e50:	483c      	ldr	r0, [pc, #240]	; (8001f44 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001e52:	f7fe ffa1 	bl	8000d98 <_ZN6PlayerC1EiiiiiPKh>

//creating blocks//
Block B[10];
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001e58:	2409      	movs	r4, #9
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	db10      	blt.n	8001e82 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8001e60:	2301      	movs	r3, #1
 8001e62:	9303      	str	r3, [sp, #12]
 8001e64:	2300      	movs	r3, #0
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	230a      	movs	r3, #10
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	4628      	mov	r0, r5
 8001e78:	f7fe fb50 	bl	800051c <_ZN5BlockC1EiiiiPKhii>
 8001e7c:	3534      	adds	r5, #52	; 0x34
 8001e7e:	3c01      	subs	r4, #1
 8001e80:	e7ec      	b.n	8001e5c <_Z41__static_initialization_and_destruction_0ii+0x4c>

//creating Mobs//
Mob m1(95,54);
 8001e82:	2300      	movs	r3, #0
 8001e84:	9304      	str	r3, [sp, #16]
 8001e86:	2301      	movs	r3, #1
 8001e88:	9303      	str	r3, [sp, #12]
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	2308      	movs	r3, #8
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2308      	movs	r3, #8
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2301      	movs	r3, #1
 8001e98:	2236      	movs	r2, #54	; 0x36
 8001e9a:	215f      	movs	r1, #95	; 0x5f
 8001e9c:	482d      	ldr	r0, [pc, #180]	; (8001f54 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001e9e:	f7fe fe49 	bl	8000b34 <_ZN3MobC1EiiiiiPKhii>

//creating spikes//
Spike S[6];
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001ea4:	2405      	movs	r4, #5
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	db0c      	blt.n	8001ec6 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	2305      	movs	r3, #5
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f7ff f852 	bl	8000f64 <_ZN5SpikeC1EiiiiPKh>
 8001ec0:	3528      	adds	r5, #40	; 0x28
 8001ec2:	3c01      	subs	r4, #1
 8001ec4:	e7f0      	b.n	8001ea8 <_Z41__static_initialization_and_destruction_0ii+0x98>

//creating coins
Coin c1(119,36);
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2306      	movs	r3, #6
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	2224      	movs	r2, #36	; 0x24
 8001ed6:	2177      	movs	r1, #119	; 0x77
 8001ed8:	4822      	ldr	r0, [pc, #136]	; (8001f64 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001eda:	f7fe fca1 	bl	8000820 <_ZN4CoinC1EiiiiPKhi>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d124      	bne.n	8001f2e <_Z41__static_initialization_and_destruction_0ii+0x11e>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11f      	bne.n	8001f2e <_Z41__static_initialization_and_destruction_0ii+0x11e>
 8001eee:	481d      	ldr	r0, [pc, #116]	; (8001f64 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001ef0:	f7fe fda2 	bl	8000a38 <_ZN4CoinD1Ev>
Spike S[6];
 8001ef4:	4c1c      	ldr	r4, [pc, #112]	; (8001f68 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001ef8:	429c      	cmp	r4, r3
 8001efa:	d005      	beq.n	8001f08 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 8001efc:	3c28      	subs	r4, #40	; 0x28
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4620      	mov	r0, r4
 8001f04:	4798      	blx	r3
 8001f06:	e7f6      	b.n	8001ef6 <_Z41__static_initialization_and_destruction_0ii+0xe6>
Mob m1(95,54);
 8001f08:	4812      	ldr	r0, [pc, #72]	; (8001f54 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8001f0a:	f7fe ff25 	bl	8000d58 <_ZN3MobD1Ev>
Block B[10];
 8001f0e:	4c17      	ldr	r4, [pc, #92]	; (8001f6c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001f12:	429c      	cmp	r4, r3
 8001f14:	d005      	beq.n	8001f22 <_Z41__static_initialization_and_destruction_0ii+0x112>
 8001f16:	3c34      	subs	r4, #52	; 0x34
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4798      	blx	r3
 8001f20:	e7f6      	b.n	8001f10 <_Z41__static_initialization_and_destruction_0ii+0x100>
Player boxi(10,4,8,8);       //there we are creating our map adding player ,blocks, mobs and spikes
 8001f22:	4808      	ldr	r0, [pc, #32]	; (8001f44 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001f24:	f7fe fffe 	bl	8000f24 <_ZN6PlayerD1Ev>
Map map1(Bitmap_map);
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8001f2a:	f7fe fde3 	bl	8000af4 <_ZN3MapD1Ev>
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08005604 	.word	0x08005604
 8001f3c:	200000f0 	.word	0x200000f0
 8001f40:	08005a04 	.word	0x08005a04
 8001f44:	20000108 	.word	0x20000108
 8001f48:	20000138 	.word	0x20000138
 8001f4c:	08005a0c 	.word	0x08005a0c
 8001f50:	08005a20 	.word	0x08005a20
 8001f54:	20000340 	.word	0x20000340
 8001f58:	20000374 	.word	0x20000374
 8001f5c:	08005a28 	.word	0x08005a28
 8001f60:	08005a30 	.word	0x08005a30
 8001f64:	20000464 	.word	0x20000464
 8001f68:	20000464 	.word	0x20000464
 8001f6c:	20000340 	.word	0x20000340

08001f70 <_GLOBAL__sub_I_map1>:
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff ff49 	bl	8001e10 <_Z41__static_initialization_and_destruction_0ii>
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_GLOBAL__sub_D_map1>:
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff ff41 	bl	8001e10 <_Z41__static_initialization_and_destruction_0ii>
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af04      	add	r7, sp, #16
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	1dfb      	adds	r3, r7, #7
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2178      	movs	r1, #120	; 0x78
 8001fbe:	4803      	ldr	r0, [pc, #12]	; (8001fcc <ssd1306_WriteCommand+0x2c>)
 8001fc0:	f000 feb4 	bl	8002d2c <HAL_I2C_Mem_Write>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200000a4 	.word	0x200000a4

08001fd0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af04      	add	r7, sp, #16
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe2:	9202      	str	r2, [sp, #8]
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	2178      	movs	r1, #120	; 0x78
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <ssd1306_WriteData+0x30>)
 8001ff2:	f000 fe9b 	bl	8002d2c <HAL_I2C_Mem_Write>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200000a4 	.word	0x200000a4

08002004 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002008:	f7ff ffc2 	bl	8001f90 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800200c:	2064      	movs	r0, #100	; 0x64
 800200e:	f000 fb45 	bl	800269c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002012:	2000      	movs	r0, #0
 8002014:	f000 f96e 	bl	80022f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002018:	2020      	movs	r0, #32
 800201a:	f7ff ffc1 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff ffbe 	bl	8001fa0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002024:	20b0      	movs	r0, #176	; 0xb0
 8002026:	f7ff ffbb 	bl	8001fa0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800202a:	20c8      	movs	r0, #200	; 0xc8
 800202c:	f7ff ffb8 	bl	8001fa0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff ffb5 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002036:	2010      	movs	r0, #16
 8002038:	f7ff ffb2 	bl	8001fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800203c:	2040      	movs	r0, #64	; 0x40
 800203e:	f7ff ffaf 	bl	8001fa0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002042:	20ff      	movs	r0, #255	; 0xff
 8002044:	f000 f943 	bl	80022ce <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002048:	20a1      	movs	r0, #161	; 0xa1
 800204a:	f7ff ffa9 	bl	8001fa0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800204e:	20a6      	movs	r0, #166	; 0xa6
 8002050:	f7ff ffa6 	bl	8001fa0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002054:	20a8      	movs	r0, #168	; 0xa8
 8002056:	f7ff ffa3 	bl	8001fa0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800205a:	203f      	movs	r0, #63	; 0x3f
 800205c:	f7ff ffa0 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002060:	20a4      	movs	r0, #164	; 0xa4
 8002062:	f7ff ff9d 	bl	8001fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002066:	20d3      	movs	r0, #211	; 0xd3
 8002068:	f7ff ff9a 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff ff97 	bl	8001fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002072:	20d5      	movs	r0, #213	; 0xd5
 8002074:	f7ff ff94 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002078:	20f0      	movs	r0, #240	; 0xf0
 800207a:	f7ff ff91 	bl	8001fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800207e:	20d9      	movs	r0, #217	; 0xd9
 8002080:	f7ff ff8e 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002084:	2022      	movs	r0, #34	; 0x22
 8002086:	f7ff ff8b 	bl	8001fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800208a:	20da      	movs	r0, #218	; 0xda
 800208c:	f7ff ff88 	bl	8001fa0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002090:	2012      	movs	r0, #18
 8002092:	f7ff ff85 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002096:	20db      	movs	r0, #219	; 0xdb
 8002098:	f7ff ff82 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800209c:	2020      	movs	r0, #32
 800209e:	f7ff ff7f 	bl	8001fa0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80020a2:	208d      	movs	r0, #141	; 0x8d
 80020a4:	f7ff ff7c 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80020a8:	2014      	movs	r0, #20
 80020aa:	f7ff ff79 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80020ae:	2001      	movs	r0, #1
 80020b0:	f000 f920 	bl	80022f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80020b4:	2000      	movs	r0, #0
 80020b6:	f000 f80f 	bl	80020d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80020ba:	f000 f831 	bl	8002120 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <ssd1306_Init+0xd0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <ssd1306_Init+0xd0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80020ca:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <ssd1306_Init+0xd0>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	711a      	strb	r2, [r3, #4]
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200008a0 	.word	0x200008a0

080020d8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	e00d      	b.n	8002104 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <ssd1306_Fill+0x1a>
 80020ee:	2100      	movs	r1, #0
 80020f0:	e000      	b.n	80020f4 <ssd1306_Fill+0x1c>
 80020f2:	21ff      	movs	r1, #255	; 0xff
 80020f4:	4a09      	ldr	r2, [pc, #36]	; (800211c <ssd1306_Fill+0x44>)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	460a      	mov	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3301      	adds	r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210a:	d3ed      	bcc.n	80020e8 <ssd1306_Fill+0x10>
    }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200004a0 	.word	0x200004a0

08002120 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002126:	2300      	movs	r3, #0
 8002128:	71fb      	strb	r3, [r7, #7]
 800212a:	e016      	b.n	800215a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	3b50      	subs	r3, #80	; 0x50
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff34 	bl	8001fa0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff ff31 	bl	8001fa0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800213e:	2010      	movs	r0, #16
 8002140:	f7ff ff2e 	bl	8001fa0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	01db      	lsls	r3, r3, #7
 8002148:	4a08      	ldr	r2, [pc, #32]	; (800216c <ssd1306_UpdateScreen+0x4c>)
 800214a:	4413      	add	r3, r2
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff3e 	bl	8001fd0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	3301      	adds	r3, #1
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b07      	cmp	r3, #7
 800215e:	d9e5      	bls.n	800212c <ssd1306_UpdateScreen+0xc>
    }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200004a0 	.word	0x200004a0

08002170 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	460b      	mov	r3, r1
 800217c:	71bb      	strb	r3, [r7, #6]
 800217e:	4613      	mov	r3, r2
 8002180:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db3d      	blt.n	8002206 <ssd1306_DrawPixel+0x96>
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	2b3f      	cmp	r3, #63	; 0x3f
 800218e:	d83a      	bhi.n	8002206 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002190:	797b      	ldrb	r3, [r7, #5]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d11a      	bne.n	80021cc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002196:	79fa      	ldrb	r2, [r7, #7]
 8002198:	79bb      	ldrb	r3, [r7, #6]
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	b2d8      	uxtb	r0, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	01db      	lsls	r3, r3, #7
 80021a2:	4413      	add	r3, r2
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <ssd1306_DrawPixel+0xa4>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	b25a      	sxtb	r2, r3
 80021aa:	79bb      	ldrb	r3, [r7, #6]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b259      	sxtb	r1, r3
 80021bc:	79fa      	ldrb	r2, [r7, #7]
 80021be:	4603      	mov	r3, r0
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	4413      	add	r3, r2
 80021c4:	b2c9      	uxtb	r1, r1
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <ssd1306_DrawPixel+0xa4>)
 80021c8:	54d1      	strb	r1, [r2, r3]
 80021ca:	e01d      	b.n	8002208 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	79bb      	ldrb	r3, [r7, #6]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	b2d8      	uxtb	r0, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	01db      	lsls	r3, r3, #7
 80021d8:	4413      	add	r3, r2
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <ssd1306_DrawPixel+0xa4>)
 80021dc:	5cd3      	ldrb	r3, [r2, r3]
 80021de:	b25a      	sxtb	r2, r3
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	4013      	ands	r3, r2
 80021f4:	b259      	sxtb	r1, r3
 80021f6:	79fa      	ldrb	r2, [r7, #7]
 80021f8:	4603      	mov	r3, r0
 80021fa:	01db      	lsls	r3, r3, #7
 80021fc:	4413      	add	r3, r2
 80021fe:	b2c9      	uxtb	r1, r1
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <ssd1306_DrawPixel+0xa4>)
 8002202:	54d1      	strb	r1, [r2, r3]
 8002204:	e000      	b.n	8002208 <ssd1306_DrawPixel+0x98>
        return;
 8002206:	bf00      	nop
    }
}
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	200004a0 	.word	0x200004a0

08002218 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	603a      	str	r2, [r7, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	460b      	mov	r3, r1
 8002228:	71bb      	strb	r3, [r7, #6]
 800222a:	4613      	mov	r3, r2
 800222c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800222e:	797b      	ldrb	r3, [r7, #5]
 8002230:	3307      	adds	r3, #7
 8002232:	2b00      	cmp	r3, #0
 8002234:	da00      	bge.n	8002238 <ssd1306_DrawBitmap+0x20>
 8002236:	3307      	adds	r3, #7
 8002238:	10db      	asrs	r3, r3, #3
 800223a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db3e      	blt.n	80022c6 <ssd1306_DrawBitmap+0xae>
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	2b3f      	cmp	r3, #63	; 0x3f
 800224c:	d83b      	bhi.n	80022c6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800224e:	2300      	movs	r3, #0
 8002250:	73bb      	strb	r3, [r7, #14]
 8002252:	e033      	b.n	80022bc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002254:	2300      	movs	r3, #0
 8002256:	737b      	strb	r3, [r7, #13]
 8002258:	e026      	b.n	80022a8 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 800225a:	7b7b      	ldrb	r3, [r7, #13]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e00d      	b.n	8002288 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	7b7a      	ldrb	r2, [r7, #13]
 8002278:	08d2      	lsrs	r2, r2, #3
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	4413      	add	r3, r2
 800227e:	461a      	mov	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8002288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da08      	bge.n	80022a2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	7b7b      	ldrb	r3, [r7, #13]
 8002294:	4413      	add	r3, r2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	7f3a      	ldrb	r2, [r7, #28]
 800229a:	79b9      	ldrb	r1, [r7, #6]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff67 	bl	8002170 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80022a2:	7b7b      	ldrb	r3, [r7, #13]
 80022a4:	3301      	adds	r3, #1
 80022a6:	737b      	strb	r3, [r7, #13]
 80022a8:	7b7a      	ldrb	r2, [r7, #13]
 80022aa:	797b      	ldrb	r3, [r7, #5]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3d4      	bcc.n	800225a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80022b0:	7bbb      	ldrb	r3, [r7, #14]
 80022b2:	3301      	adds	r3, #1
 80022b4:	73bb      	strb	r3, [r7, #14]
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	3301      	adds	r3, #1
 80022ba:	71bb      	strb	r3, [r7, #6]
 80022bc:	7bba      	ldrb	r2, [r7, #14]
 80022be:	7e3b      	ldrb	r3, [r7, #24]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3c7      	bcc.n	8002254 <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 80022c4:	e000      	b.n	80022c8 <ssd1306_DrawBitmap+0xb0>
        return;
 80022c6:	bf00      	nop
}
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80022d8:	2381      	movs	r3, #129	; 0x81
 80022da:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe5e 	bl	8001fa0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fe5a 	bl	8001fa0 <ssd1306_WriteCommand>
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002304:	23af      	movs	r3, #175	; 0xaf
 8002306:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <ssd1306_SetDisplayOn+0x38>)
 800230a:	2201      	movs	r2, #1
 800230c:	715a      	strb	r2, [r3, #5]
 800230e:	e004      	b.n	800231a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002310:	23ae      	movs	r3, #174	; 0xae
 8002312:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <ssd1306_SetDisplayOn+0x38>)
 8002316:	2200      	movs	r2, #0
 8002318:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fe3f 	bl	8001fa0 <ssd1306_WriteCommand>
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200008a0 	.word	0x200008a0

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_MspInit+0x44>)
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_MspInit+0x44>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6613      	str	r3, [r2, #96]	; 0x60
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_MspInit+0x44>)
 8002344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_MspInit+0x44>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_MspInit+0x44>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_MspInit+0x44>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x4>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 f94c 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <_Z11TM_RNG_Initv>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_rng.h"

void TM_RNG_Init(void) {
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	/* Enable RNG clock source */
	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <_Z11TM_RNG_Initv+0x28>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <_Z11TM_RNG_Initv+0x28>)
 80023fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023fe:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	/* RNG Peripheral enable */
	RNG->CR |= RNG_CR_RNGEN;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <_Z11TM_RNG_Initv+0x2c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a05      	ldr	r2, [pc, #20]	; (800241c <_Z11TM_RNG_Initv+0x2c>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	50060800 	.word	0x50060800

08002420 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 8002426:	4a23      	ldr	r2, [pc, #140]	; (80024b4 <MX_USART2_UART_Init+0x94>)
 8002428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 800242c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 8002446:	220c      	movs	r2, #12
 8002448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002468:	4811      	ldr	r0, [pc, #68]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 800246a:	f002 f825 	bl	80044b8 <HAL_UART_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002474:	f7ff fcc7 	bl	8001e06 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002478:	2100      	movs	r1, #0
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 800247c:	f002 fd26 	bl	8004ecc <HAL_UARTEx_SetTxFifoThreshold>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002486:	f7ff fcbe 	bl	8001e06 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800248a:	2100      	movs	r1, #0
 800248c:	4808      	ldr	r0, [pc, #32]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 800248e:	f002 fd5b 	bl	8004f48 <HAL_UARTEx_SetRxFifoThreshold>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002498:	f7ff fcb5 	bl	8001e06 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_USART2_UART_Init+0x90>)
 800249e:	f002 fcdc 	bl	8004e5a <HAL_UARTEx_DisableFifoMode>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80024a8:	f7ff fcad 	bl	8001e06 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200008a8 	.word	0x200008a8
 80024b4:	40004400 	.word	0x40004400

080024b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b09a      	sub	sp, #104	; 0x68
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	2244      	movs	r2, #68	; 0x44
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 fdf1 	bl	80050c0 <memset>
  if(uartHandle->Instance==USART2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_UART_MspInit+0xa8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d136      	bne.n	8002556 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024e8:	2302      	movs	r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 fdef 	bl	80040d8 <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002500:	f7ff fc81 	bl	8001e06 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_UART_MspInit+0xac>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_UART_MspInit+0xac>)
 800250a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250e:	6593      	str	r3, [r2, #88]	; 0x58
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_UART_MspInit+0xac>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_UART_MspInit+0xac>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_UART_MspInit+0xac>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_UART_MspInit+0xac>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002534:	230c      	movs	r3, #12
 8002536:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002544:	2307      	movs	r3, #7
 8002546:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800254c:	4619      	mov	r1, r3
 800254e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002552:	f000 f9a9 	bl	80028a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002556:	bf00      	nop
 8002558:	3768      	adds	r7, #104	; 0x68
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40004400 	.word	0x40004400
 8002564:	40021000 	.word	0x40021000

08002568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800256a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800256c:	480d      	ldr	r0, [pc, #52]	; (80025a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800256e:	490e      	ldr	r1, [pc, #56]	; (80025a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <LoopForever+0xe>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002574:	e002      	b.n	800257c <LoopCopyDataInit>

08002576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257a:	3304      	adds	r3, #4

0800257c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800257c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002580:	d3f9      	bcc.n	8002576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002584:	4c0b      	ldr	r4, [pc, #44]	; (80025b4 <LoopForever+0x16>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002588:	e001      	b.n	800258e <LoopFillZerobss>

0800258a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800258c:	3204      	adds	r2, #4

0800258e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002590:	d3fb      	bcc.n	800258a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002592:	f7ff ff1b 	bl	80023cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002596:	f002 fd67 	bl	8005068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800259a:	f7ff fb3b 	bl	8001c14 <main>

0800259e <LoopForever>:

LoopForever:
    b LoopForever
 800259e:	e7fe      	b.n	800259e <LoopForever>
  ldr   r0, =_estack
 80025a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80025ac:	08005a90 	.word	0x08005a90
  ldr r2, =_sbss
 80025b0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80025b4:	20000944 	.word	0x20000944

080025b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC1_2_IRQHandler>

080025ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c4:	2003      	movs	r0, #3
 80025c6:	f000 f93d 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ca:	2000      	movs	r0, #0
 80025cc:	f000 f80e 	bl	80025ec <HAL_InitTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	e001      	b.n	80025e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025dc:	f7ff fea8 	bl	8002330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025e0:	79fb      	ldrb	r3, [r7, #7]

}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_InitTick+0x68>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d022      	beq.n	8002646 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_InitTick+0x6c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_InitTick+0x68>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800260c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f93a 	bl	800288e <HAL_SYSTICK_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b0f      	cmp	r3, #15
 8002624:	d809      	bhi.n	800263a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002626:	2200      	movs	r2, #0
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	f04f 30ff 	mov.w	r0, #4294967295
 800262e:	f000 f914 	bl	800285a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_InitTick+0x70>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	e007      	b.n	800264a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e004      	b.n	800264a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e001      	b.n	800264a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000020 	.word	0x20000020
 8002658:	20000018 	.word	0x20000018
 800265c:	2000001c 	.word	0x2000001c

08002660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_IncTick+0x1c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_IncTick+0x20>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4413      	add	r3, r2
 800266e:	4a03      	ldr	r2, [pc, #12]	; (800267c <HAL_IncTick+0x1c>)
 8002670:	6013      	str	r3, [r2, #0]
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	20000938 	.word	0x20000938
 8002680:	20000020 	.word	0x20000020

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000938 	.word	0x20000938

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff ffee 	bl	8002684 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d004      	beq.n	80026c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_Delay+0x40>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4413      	add	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c0:	bf00      	nop
 80026c2:	f7ff ffdf 	bl	8002684 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d8f7      	bhi.n	80026c2 <HAL_Delay+0x26>
  {
  }
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000020 	.word	0x20000020

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff47 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff5e 	bl	8002728 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff90 	bl	8002798 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5f 	bl	8002744 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffb2 	bl	8002800 <SysTick_Config>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028b6:	e15a      	b.n	8002b6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2101      	movs	r1, #1
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 814c 	beq.w	8002b68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d005      	beq.n	80028e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d130      	bne.n	800294a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800291e:	2201      	movs	r2, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 0201 	and.w	r2, r3, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b03      	cmp	r3, #3
 8002954:	d017      	beq.n	8002986 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d123      	bne.n	80029da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	6939      	ldr	r1, [r7, #16]
 80029d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0203 	and.w	r2, r3, #3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80a6 	beq.w	8002b68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1c:	4b5b      	ldr	r3, [pc, #364]	; (8002b8c <HAL_GPIO_Init+0x2e4>)
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a20:	4a5a      	ldr	r2, [pc, #360]	; (8002b8c <HAL_GPIO_Init+0x2e4>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6613      	str	r3, [r2, #96]	; 0x60
 8002a28:	4b58      	ldr	r3, [pc, #352]	; (8002b8c <HAL_GPIO_Init+0x2e4>)
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a34:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a5e:	d01f      	beq.n	8002aa0 <HAL_GPIO_Init+0x1f8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d019      	beq.n	8002a9c <HAL_GPIO_Init+0x1f4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a4b      	ldr	r2, [pc, #300]	; (8002b98 <HAL_GPIO_Init+0x2f0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_GPIO_Init+0x1f0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <HAL_GPIO_Init+0x2f4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00d      	beq.n	8002a94 <HAL_GPIO_Init+0x1ec>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <HAL_GPIO_Init+0x2f8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <HAL_GPIO_Init+0x1e8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a48      	ldr	r2, [pc, #288]	; (8002ba4 <HAL_GPIO_Init+0x2fc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_GPIO_Init+0x1e4>
 8002a88:	2305      	movs	r3, #5
 8002a8a:	e00a      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a8c:	2306      	movs	r3, #6
 8002a8e:	e008      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e006      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a94:	2303      	movs	r3, #3
 8002a96:	e004      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e002      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	f002 0203 	and.w	r2, r2, #3
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	4093      	lsls	r3, r2
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab2:	4937      	ldr	r1, [pc, #220]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ae4:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b0e:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b62:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f ae9d 	bne.w	80028b8 <HAL_GPIO_Init+0x10>
  }
}
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010000 	.word	0x40010000
 8002b94:	48000400 	.word	0x48000400
 8002b98:	48000800 	.word	0x48000800
 8002b9c:	48000c00 	.word	0x48000c00
 8002ba0:	48001000 	.word	0x48001000
 8002ba4:	48001400 	.word	0x48001400
 8002ba8:	40010400 	.word	0x40010400

08002bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
 8002bc8:	e001      	b.n	8002bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
 8002be8:	4613      	mov	r3, r2
 8002bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bec:	787b      	ldrb	r3, [r7, #1]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e081      	b.n	8002d22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fb3c 	bl	80012b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2224      	movs	r2, #36	; 0x24
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	e006      	b.n	8002c94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d104      	bne.n	8002ca6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69d9      	ldr	r1, [r3, #28]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	f040 80f9 	bne.w	8002f46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x34>
 8002d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0ed      	b.n	8002f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_I2C_Mem_Write+0x4e>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e0e6      	b.n	8002f48 <HAL_I2C_Mem_Write+0x21c>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d82:	f7ff fc7f 	bl	8002684 <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2319      	movs	r3, #25
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f955 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0d1      	b.n	8002f48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2221      	movs	r2, #33	; 0x21
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a3a      	ldr	r2, [r7, #32]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dcc:	88f8      	ldrh	r0, [r7, #6]
 8002dce:	893a      	ldrh	r2, [r7, #8]
 8002dd0:	8979      	ldrh	r1, [r7, #10]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f8b9 	bl	8002f54 <I2C_RequestMemoryWrite>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0a9      	b.n	8002f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2bff      	cmp	r3, #255	; 0xff
 8002dfc:	d90e      	bls.n	8002e1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	22ff      	movs	r2, #255	; 0xff
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	8979      	ldrh	r1, [r7, #10]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fabd 	bl	8003394 <I2C_TransferConfig>
 8002e1a:	e00f      	b.n	8002e3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	8979      	ldrh	r1, [r7, #10]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 faac 	bl	8003394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f93f 	bl	80030c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e07b      	b.n	8002f48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d034      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x1c8>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d130      	bne.n	8002ef4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f8d1 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e04d      	b.n	8002f48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2bff      	cmp	r3, #255	; 0xff
 8002eb4:	d90e      	bls.n	8002ed4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	22ff      	movs	r2, #255	; 0xff
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fa61 	bl	8003394 <I2C_TransferConfig>
 8002ed2:	e00f      	b.n	8002ef4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	8979      	ldrh	r1, [r7, #10]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fa50 	bl	8003394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d19e      	bne.n	8002e3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f91e 	bl	8003144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e01a      	b.n	8002f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2220      	movs	r2, #32
 8002f18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_I2C_Mem_Write+0x224>)
 8002f26:	400b      	ands	r3, r1
 8002f28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	fe00e800 	.word	0xfe00e800

08002f54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	8979      	ldrh	r1, [r7, #10]
 8002f74:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <I2C_RequestMemoryWrite+0xa4>)
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fa09 	bl	8003394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	69b9      	ldr	r1, [r7, #24]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f89c 	bl	80030c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02c      	b.n	8002ff0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f9c:	893b      	ldrh	r3, [r7, #8]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa6:	e015      	b.n	8002fd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa8:	893b      	ldrh	r3, [r7, #8]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f882 	bl	80030c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e012      	b.n	8002ff0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fca:	893b      	ldrh	r3, [r7, #8]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f830 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	80002000 	.word	0x80002000

08002ffc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	d103      	bne.n	800301a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d007      	beq.n	8003038 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	619a      	str	r2, [r3, #24]
  }
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003054:	e022      	b.n	800309c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d01e      	beq.n	800309c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7ff fb11 	bl	8002684 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d113      	bne.n	800309c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e00f      	b.n	80030bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4013      	ands	r3, r2
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d0cd      	beq.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030d0:	e02c      	b.n	800312c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f870 	bl	80031bc <I2C_IsErrorOccurred>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e02a      	b.n	800313c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d01e      	beq.n	800312c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7ff fac9 	bl	8002684 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e007      	b.n	800313c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d1cb      	bne.n	80030d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003150:	e028      	b.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f830 	bl	80031bc <I2C_IsErrorOccurred>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e026      	b.n	80031b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7ff fa8d 	bl	8002684 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d113      	bne.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e007      	b.n	80031b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d1cf      	bne.n	8003152 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d075      	beq.n	80032d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2210      	movs	r2, #16
 80031ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031f0:	e056      	b.n	80032a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d052      	beq.n	80032a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7ff fa43 	bl	8002684 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_IsErrorOccurred+0x54>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d147      	bne.n	80032a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003222:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003232:	d12e      	bne.n	8003292 <I2C_IsErrorOccurred+0xd6>
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800323a:	d02a      	beq.n	8003292 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	2b20      	cmp	r3, #32
 8003240:	d027      	beq.n	8003292 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003250:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003252:	f7ff fa17 	bl	8002684 <HAL_GetTick>
 8003256:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003258:	e01b      	b.n	8003292 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800325a:	f7ff fa13 	bl	8002684 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b19      	cmp	r3, #25
 8003266:	d914      	bls.n	8003292 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b20      	cmp	r3, #32
 800329e:	d1dc      	bne.n	800325a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d003      	beq.n	80032b6 <I2C_IsErrorOccurred+0xfa>
 80032ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d09d      	beq.n	80031f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2220      	movs	r2, #32
 80032c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f043 0304 	orr.w	r3, r3, #4
 80032cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f043 0308 	orr.w	r3, r3, #8
 800330e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01c      	beq.n	8003384 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fe56 	bl	8002ffc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <I2C_IsErrorOccurred+0x1d4>)
 800335c:	400b      	ands	r3, r1
 800335e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	431a      	orrs	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003388:	4618      	mov	r0, r3
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	fe00e800 	.word	0xfe00e800

08003394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	4613      	mov	r3, r2
 80033a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ac:	7a7b      	ldrb	r3, [r7, #9]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	4313      	orrs	r3, r2
 80033be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033c2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	0d5b      	lsrs	r3, r3, #21
 80033ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <I2C_TransferConfig+0x60>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	43db      	mvns	r3, r3
 80033d8:	ea02 0103 	and.w	r1, r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	03ff63ff 	.word	0x03ff63ff

080033f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	d138      	bne.n	8003480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003418:	2302      	movs	r3, #2
 800341a:	e032      	b.n	8003482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800344a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d139      	bne.n	8003518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e033      	b.n	800351a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2224      	movs	r2, #36	; 0x24
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d141      	bne.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003536:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d131      	bne.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003544:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800354a:	4a46      	ldr	r2, [pc, #280]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003550:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003554:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800355c:	4a41      	ldr	r2, [pc, #260]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003562:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003564:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2232      	movs	r2, #50	; 0x32
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	4a3f      	ldr	r2, [pc, #252]	; (800366c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	0c9b      	lsrs	r3, r3, #18
 8003576:	3301      	adds	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800357a:	e002      	b.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d102      	bne.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f2      	bne.n	800357c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003596:	4b33      	ldr	r3, [pc, #204]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a2:	d158      	bne.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e057      	b.n	8003658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035a8:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ae:	4a2d      	ldr	r2, [pc, #180]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035b8:	e04d      	b.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c0:	d141      	bne.n	8003646 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035c2:	4b28      	ldr	r3, [pc, #160]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ce:	d131      	bne.n	8003634 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d6:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2232      	movs	r2, #50	; 0x32
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	0c9b      	lsrs	r3, r3, #18
 8003602:	3301      	adds	r3, #1
 8003604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003606:	e002      	b.n	800360e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3b01      	subs	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d102      	bne.n	8003622 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f2      	bne.n	8003608 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362e:	d112      	bne.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e011      	b.n	8003658 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363a:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003644:	e007      	b.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800364e:	4a05      	ldr	r2, [pc, #20]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003654:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40007000 	.word	0x40007000
 8003668:	20000018 	.word	0x20000018
 800366c:	431bde83 	.word	0x431bde83

08003670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e306      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d075      	beq.n	800377a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800368e:	4b97      	ldr	r3, [pc, #604]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003698:	4b94      	ldr	r3, [pc, #592]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_OscConfig+0x3e>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d002      	beq.n	80036b4 <HAL_RCC_OscConfig+0x44>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d10b      	bne.n	80036cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	4b8d      	ldr	r3, [pc, #564]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d05b      	beq.n	8003778 <HAL_RCC_OscConfig+0x108>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d157      	bne.n	8003778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e2e1      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d106      	bne.n	80036e4 <HAL_RCC_OscConfig+0x74>
 80036d6:	4b85      	ldr	r3, [pc, #532]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a84      	ldr	r2, [pc, #528]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xb0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x98>
 80036ee:	4b7f      	ldr	r3, [pc, #508]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a7e      	ldr	r2, [pc, #504]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b7c      	ldr	r3, [pc, #496]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7b      	ldr	r2, [pc, #492]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xb0>
 8003708:	4b78      	ldr	r3, [pc, #480]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a77      	ldr	r2, [pc, #476]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b75      	ldr	r3, [pc, #468]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a74      	ldr	r2, [pc, #464]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe ffac 	bl	8002684 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe ffa8 	bl	8002684 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e2a6      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003742:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xc0>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe ff98 	bl	8002684 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe ff94 	bl	8002684 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e292      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800376a:	4b60      	ldr	r3, [pc, #384]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0xe8>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d075      	beq.n	8003872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003790:	4b56      	ldr	r3, [pc, #344]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d102      	bne.n	80037a6 <HAL_RCC_OscConfig+0x136>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d002      	beq.n	80037ac <HAL_RCC_OscConfig+0x13c>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d11f      	bne.n	80037ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ac:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_OscConfig+0x154>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e265      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b49      	ldr	r3, [pc, #292]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	4946      	ldr	r1, [pc, #280]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037d8:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <HAL_RCC_OscConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe ff05 	bl	80025ec <HAL_InitTick>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d043      	beq.n	8003870 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e251      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d023      	beq.n	800383c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f4:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3c      	ldr	r2, [pc, #240]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80037fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe ff40 	bl	8002684 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003808:	f7fe ff3c 	bl	8002684 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e23a      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381a:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b31      	ldr	r3, [pc, #196]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	061b      	lsls	r3, r3, #24
 8003834:	492d      	ldr	r1, [pc, #180]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
 800383a:	e01a      	b.n	8003872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe ff1c 	bl	8002684 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003850:	f7fe ff18 	bl	8002684 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e216      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003862:	4b22      	ldr	r3, [pc, #136]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x1e0>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d041      	beq.n	8003902 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01c      	beq.n	80038c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003886:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fe fef5 	bl	8002684 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389e:	f7fe fef1 	bl	8002684 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1ef      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0ef      	beq.n	800389e <HAL_RCC_OscConfig+0x22e>
 80038be:	e020      	b.n	8003902 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_OscConfig+0x27c>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d0:	f7fe fed8 	bl	8002684 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038d6:	e00d      	b.n	80038f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fe fed4 	bl	8002684 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d906      	bls.n	80038f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1d2      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f4:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ea      	bne.n	80038d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80a6 	beq.w	8003a5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003914:	4b84      	ldr	r3, [pc, #528]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_OscConfig+0x2b4>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x2b6>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	4a7e      	ldr	r2, [pc, #504]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003934:	6593      	str	r3, [r2, #88]	; 0x58
 8003936:	4b7c      	ldr	r3, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003942:	2301      	movs	r3, #1
 8003944:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003946:	4b79      	ldr	r3, [pc, #484]	; (8003b2c <HAL_RCC_OscConfig+0x4bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003952:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCC_OscConfig+0x4bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a75      	ldr	r2, [pc, #468]	; (8003b2c <HAL_RCC_OscConfig+0x4bc>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395e:	f7fe fe91 	bl	8002684 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fe fe8d 	bl	8002684 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e18b      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003978:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCC_OscConfig+0x4bc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d108      	bne.n	800399e <HAL_RCC_OscConfig+0x32e>
 800398c:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	4a65      	ldr	r2, [pc, #404]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800399c:	e024      	b.n	80039e8 <HAL_RCC_OscConfig+0x378>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d110      	bne.n	80039c8 <HAL_RCC_OscConfig+0x358>
 80039a6:	4b60      	ldr	r3, [pc, #384]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	4a5e      	ldr	r2, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039b6:	4b5c      	ldr	r3, [pc, #368]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	4a5a      	ldr	r2, [pc, #360]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c6:	e00f      	b.n	80039e8 <HAL_RCC_OscConfig+0x378>
 80039c8:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	4a56      	ldr	r2, [pc, #344]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039d8:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	4a52      	ldr	r2, [pc, #328]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe fe48 	bl	8002684 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fe fe44 	bl	8002684 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e140      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ed      	beq.n	80039f8 <HAL_RCC_OscConfig+0x388>
 8003a1c:	e015      	b.n	8003a4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fe31 	bl	8002684 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe fe2d 	bl	8002684 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e129      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1ed      	bne.n	8003a26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a4a:	7ffb      	ldrb	r3, [r7, #31]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	4a34      	ldr	r2, [pc, #208]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a70:	4b2d      	ldr	r3, [pc, #180]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a76:	4a2c      	ldr	r2, [pc, #176]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fe fe00 	bl	8002684 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a88:	f7fe fdfc 	bl	8002684 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0fa      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a9a:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ef      	beq.n	8003a88 <HAL_RCC_OscConfig+0x418>
 8003aa8:	e01b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7fe fde3 	bl	8002684 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ac2:	f7fe fddf 	bl	8002684 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0dd      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ef      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80d1 	beq.w	8003c8e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	f000 808b 	beq.w	8003c10 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d15e      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fe fdb9 	bl	8002684 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b14:	e00c      	b.n	8003b30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fe fdb5 	bl	8002684 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d905      	bls.n	8003b30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0b3      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ec      	bne.n	8003b16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3c:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <HAL_RCC_OscConfig+0x62c>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6a11      	ldr	r1, [r2, #32]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b56:	0212      	lsls	r2, r2, #8
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0552      	lsls	r2, r2, #21
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0652      	lsls	r2, r2, #25
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b76:	06d2      	lsls	r2, r2, #27
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	4947      	ldr	r1, [pc, #284]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a44      	ldr	r2, [pc, #272]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b8c:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a41      	ldr	r2, [pc, #260]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe fd74 	bl	8002684 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe fd70 	bl	8002684 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e06e      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x530>
 8003bbe:	e066      	b.n	8003c8e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a34      	ldr	r2, [pc, #208]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bcc:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a31      	ldr	r2, [pc, #196]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003bd8:	4b2f      	ldr	r3, [pc, #188]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a2e      	ldr	r2, [pc, #184]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003bde:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe fd4c 	bl	8002684 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe fd48 	bl	8002684 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e046      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c02:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x580>
 8003c0e:	e03e      	b.n	8003c8e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e039      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d12c      	bne.n	8003c8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d123      	bne.n	8003c8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d11b      	bne.n	8003c8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d113      	bne.n	8003c8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d109      	bne.n	8003c8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	3b01      	subs	r3, #1
 8003c84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	019f800c 	.word	0x019f800c

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e11e      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b91      	ldr	r3, [pc, #580]	; (8003f00 <HAL_RCC_ClockConfig+0x260>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d910      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b8e      	ldr	r3, [pc, #568]	; (8003f00 <HAL_RCC_ClockConfig+0x260>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 020f 	bic.w	r2, r3, #15
 8003cce:	498c      	ldr	r1, [pc, #560]	; (8003f00 <HAL_RCC_ClockConfig+0x260>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b8a      	ldr	r3, [pc, #552]	; (8003f00 <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e106      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d073      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d129      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfc:	4b81      	ldr	r3, [pc, #516]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0f4      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d0c:	f000 f99e 	bl	800404c <RCC_GetSysClockFreqFromPLLSource>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4a7c      	ldr	r2, [pc, #496]	; (8003f08 <HAL_RCC_ClockConfig+0x268>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d93f      	bls.n	8003d9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d1a:	4b7a      	ldr	r3, [pc, #488]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d033      	beq.n	8003d9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d12f      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d3a:	4b72      	ldr	r3, [pc, #456]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d42:	4a70      	ldr	r2, [pc, #448]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e024      	b.n	8003d9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0c6      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d68:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0be      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d78:	f000 f8ce 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4a61      	ldr	r2, [pc, #388]	; (8003f08 <HAL_RCC_ClockConfig+0x268>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d909      	bls.n	8003d9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d86:	4b5f      	ldr	r3, [pc, #380]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d8e:	4a5d      	ldr	r2, [pc, #372]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d9a:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f023 0203 	bic.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4957      	ldr	r1, [pc, #348]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dac:	f7fe fc6a 	bl	8002684 <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db4:	f7fe fc66 	bl	8002684 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e095      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	4b4e      	ldr	r3, [pc, #312]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 020c 	and.w	r2, r3, #12
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1eb      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d023      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a42      	ldr	r2, [pc, #264]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dfe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e14:	4a3b      	ldr	r2, [pc, #236]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1c:	4b39      	ldr	r3, [pc, #228]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4936      	ldr	r1, [pc, #216]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d105      	bne.n	8003e42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e36:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_RCC_ClockConfig+0x260>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d21d      	bcs.n	8003e8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_RCC_ClockConfig+0x260>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 020f 	bic.w	r2, r3, #15
 8003e58:	4929      	ldr	r1, [pc, #164]	; (8003f00 <HAL_RCC_ClockConfig+0x260>)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e60:	f7fe fc10 	bl	8002684 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7fe fc0c 	bl	8002684 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e03b      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_RCC_ClockConfig+0x260>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d1ed      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e98:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4917      	ldr	r1, [pc, #92]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	490f      	ldr	r1, [pc, #60]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eca:	f000 f825 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	490c      	ldr	r1, [pc, #48]	; (8003f0c <HAL_RCC_ClockConfig+0x26c>)
 8003edc:	5ccb      	ldrb	r3, [r1, r3]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <HAL_RCC_ClockConfig+0x270>)
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x274>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fb7c 	bl	80025ec <HAL_InitTick>
 8003ef4:	4603      	mov	r3, r0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40022000 	.word	0x40022000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	04c4b400 	.word	0x04c4b400
 8003f0c:	08005a38 	.word	0x08005a38
 8003f10:	20000018 	.word	0x20000018
 8003f14:	2000001c 	.word	0x2000001c

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d102      	bne.n	8003f30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e047      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d102      	bne.n	8003f42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	e03e      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f42:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d136      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f58:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3301      	adds	r3, #1
 8003f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f76:	68d2      	ldr	r2, [r2, #12]
 8003f78:	0a12      	lsrs	r2, r2, #8
 8003f7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	617b      	str	r3, [r7, #20]
      break;
 8003f84:	e00c      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f86:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	0a12      	lsrs	r2, r2, #8
 8003f94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
      break;
 8003f9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	0e5b      	lsrs	r3, r3, #25
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	3301      	adds	r3, #1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	e001      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fc0:	693b      	ldr	r3, [r7, #16]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	007a1200 	.word	0x007a1200

08003fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000018 	.word	0x20000018

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ff8:	f7ff fff0 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4904      	ldr	r1, [pc, #16]	; (800401c <HAL_RCC_GetPCLK1Freq+0x28>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	08005a48 	.word	0x08005a48

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004024:	f7ff ffda 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0adb      	lsrs	r3, r3, #11
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4904      	ldr	r1, [pc, #16]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	08005a48 	.word	0x08005a48

0800404c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004052:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800405c:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	3301      	adds	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d10c      	bne.n	800408a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004070:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800407a:	68d2      	ldr	r2, [r2, #12]
 800407c:	0a12      	lsrs	r2, r2, #8
 800407e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	617b      	str	r3, [r7, #20]
    break;
 8004088:	e00c      	b.n	80040a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800408a:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004094:	68d2      	ldr	r2, [r2, #12]
 8004096:	0a12      	lsrs	r2, r2, #8
 8004098:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
    break;
 80040a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	0e5b      	lsrs	r3, r3, #25
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	3301      	adds	r3, #1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040be:	687b      	ldr	r3, [r7, #4]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40021000 	.word	0x40021000
 80040d0:	007a1200 	.word	0x007a1200
 80040d4:	00f42400 	.word	0x00f42400

080040d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040e0:	2300      	movs	r3, #0
 80040e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040e4:	2300      	movs	r3, #0
 80040e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8098 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fa:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	4b40      	ldr	r3, [pc, #256]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4a3f      	ldr	r2, [pc, #252]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	; 0x58
 8004112:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411e:	2301      	movs	r3, #1
 8004120:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004122:	4b3a      	ldr	r3, [pc, #232]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a39      	ldr	r2, [pc, #228]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800412e:	f7fe faa9 	bl	8002684 <HAL_GetTick>
 8004132:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004134:	e009      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fe faa5 	bl	8002684 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d902      	bls.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	74fb      	strb	r3, [r7, #19]
        break;
 8004148:	e005      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800414a:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ef      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d159      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01e      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	429a      	cmp	r2, r3
 8004176:	d019      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004178:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004184:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004194:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800419c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041a4:	4a18      	ldr	r2, [pc, #96]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fe fa65 	bl	8002684 <HAL_GetTick>
 80041ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041bc:	e00b      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041be:	f7fe fa61 	bl	8002684 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d902      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	74fb      	strb	r3, [r7, #19]
            break;
 80041d4:	e006      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ec      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004200:	e008      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004202:	7cfb      	ldrb	r3, [r7, #19]
 8004204:	74bb      	strb	r3, [r7, #18]
 8004206:	e005      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004208:	40021000 	.word	0x40021000
 800420c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004214:	7c7b      	ldrb	r3, [r7, #17]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d105      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421a:	4ba6      	ldr	r3, [pc, #664]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	4aa5      	ldr	r2, [pc, #660]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004232:	4ba0      	ldr	r3, [pc, #640]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f023 0203 	bic.w	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	499c      	ldr	r1, [pc, #624]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004254:	4b97      	ldr	r3, [pc, #604]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f023 020c 	bic.w	r2, r3, #12
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	4994      	ldr	r1, [pc, #592]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004276:	4b8f      	ldr	r3, [pc, #572]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	498b      	ldr	r1, [pc, #556]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004298:	4b86      	ldr	r3, [pc, #536]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	4983      	ldr	r1, [pc, #524]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ba:	4b7e      	ldr	r3, [pc, #504]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	497a      	ldr	r1, [pc, #488]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042dc:	4b75      	ldr	r3, [pc, #468]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	4972      	ldr	r1, [pc, #456]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042fe:	4b6d      	ldr	r3, [pc, #436]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	4969      	ldr	r1, [pc, #420]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004320:	4b64      	ldr	r3, [pc, #400]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	4961      	ldr	r1, [pc, #388]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004342:	4b5c      	ldr	r3, [pc, #368]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	4958      	ldr	r1, [pc, #352]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004364:	4b53      	ldr	r3, [pc, #332]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	4950      	ldr	r1, [pc, #320]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004382:	d105      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004384:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a4a      	ldr	r2, [pc, #296]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004398:	2b00      	cmp	r3, #0
 800439a:	d015      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800439c:	4b45      	ldr	r3, [pc, #276]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	4942      	ldr	r1, [pc, #264]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ba:	d105      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043bc:	4b3d      	ldr	r3, [pc, #244]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a3c      	ldr	r2, [pc, #240]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d015      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043d4:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	4934      	ldr	r1, [pc, #208]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f2:	d105      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f4:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4a2e      	ldr	r2, [pc, #184]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d015      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800440c:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	4926      	ldr	r1, [pc, #152]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800442a:	d105      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800442c:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004436:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	4918      	ldr	r1, [pc, #96]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004462:	d105      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004464:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	490a      	ldr	r1, [pc, #40]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449a:	d105      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000

080044b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e042      	b.n	8004550 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7fd ffeb 	bl	80024b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2224      	movs	r2, #36	; 0x24
 80044e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f82c 	bl	8004558 <UART_SetConfig>
 8004500:	4603      	mov	r3, r0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e022      	b.n	8004550 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 faec 	bl	8004af0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fb73 	bl	8004c34 <UART_CheckIdleState>
 800454e:	4603      	mov	r3, r0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800455c:	b08c      	sub	sp, #48	; 0x30
 800455e:	af00      	add	r7, sp, #0
 8004560:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	431a      	orrs	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	431a      	orrs	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	4313      	orrs	r3, r2
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4bab      	ldr	r3, [pc, #684]	; (8004834 <UART_SetConfig+0x2dc>)
 8004588:	4013      	ands	r3, r2
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004590:	430b      	orrs	r3, r1
 8004592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4aa0      	ldr	r2, [pc, #640]	; (8004838 <UART_SetConfig+0x2e0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c0:	4313      	orrs	r3, r2
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80045ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045d8:	430b      	orrs	r3, r1
 80045da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	f023 010f 	bic.w	r1, r3, #15
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a91      	ldr	r2, [pc, #580]	; (800483c <UART_SetConfig+0x2e4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d125      	bne.n	8004648 <UART_SetConfig+0xf0>
 80045fc:	4b90      	ldr	r3, [pc, #576]	; (8004840 <UART_SetConfig+0x2e8>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b03      	cmp	r3, #3
 8004608:	d81a      	bhi.n	8004640 <UART_SetConfig+0xe8>
 800460a:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <UART_SetConfig+0xb8>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	08004621 	.word	0x08004621
 8004614:	08004631 	.word	0x08004631
 8004618:	08004629 	.word	0x08004629
 800461c:	08004639 	.word	0x08004639
 8004620:	2301      	movs	r3, #1
 8004622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004626:	e0d6      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004628:	2302      	movs	r3, #2
 800462a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462e:	e0d2      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004630:	2304      	movs	r3, #4
 8004632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004636:	e0ce      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004638:	2308      	movs	r3, #8
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463e:	e0ca      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004640:	2310      	movs	r3, #16
 8004642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004646:	e0c6      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a7d      	ldr	r2, [pc, #500]	; (8004844 <UART_SetConfig+0x2ec>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d138      	bne.n	80046c4 <UART_SetConfig+0x16c>
 8004652:	4b7b      	ldr	r3, [pc, #492]	; (8004840 <UART_SetConfig+0x2e8>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d82d      	bhi.n	80046bc <UART_SetConfig+0x164>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <UART_SetConfig+0x110>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800469d 	.word	0x0800469d
 800466c:	080046bd 	.word	0x080046bd
 8004670:	080046bd 	.word	0x080046bd
 8004674:	080046bd 	.word	0x080046bd
 8004678:	080046ad 	.word	0x080046ad
 800467c:	080046bd 	.word	0x080046bd
 8004680:	080046bd 	.word	0x080046bd
 8004684:	080046bd 	.word	0x080046bd
 8004688:	080046a5 	.word	0x080046a5
 800468c:	080046bd 	.word	0x080046bd
 8004690:	080046bd 	.word	0x080046bd
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046b5 	.word	0x080046b5
 800469c:	2300      	movs	r3, #0
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a2:	e098      	b.n	80047d6 <UART_SetConfig+0x27e>
 80046a4:	2302      	movs	r3, #2
 80046a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046aa:	e094      	b.n	80047d6 <UART_SetConfig+0x27e>
 80046ac:	2304      	movs	r3, #4
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b2:	e090      	b.n	80047d6 <UART_SetConfig+0x27e>
 80046b4:	2308      	movs	r3, #8
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ba:	e08c      	b.n	80047d6 <UART_SetConfig+0x27e>
 80046bc:	2310      	movs	r3, #16
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c2:	e088      	b.n	80047d6 <UART_SetConfig+0x27e>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a5f      	ldr	r2, [pc, #380]	; (8004848 <UART_SetConfig+0x2f0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d125      	bne.n	800471a <UART_SetConfig+0x1c2>
 80046ce:	4b5c      	ldr	r3, [pc, #368]	; (8004840 <UART_SetConfig+0x2e8>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046d8:	2b30      	cmp	r3, #48	; 0x30
 80046da:	d016      	beq.n	800470a <UART_SetConfig+0x1b2>
 80046dc:	2b30      	cmp	r3, #48	; 0x30
 80046de:	d818      	bhi.n	8004712 <UART_SetConfig+0x1ba>
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d00a      	beq.n	80046fa <UART_SetConfig+0x1a2>
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d814      	bhi.n	8004712 <UART_SetConfig+0x1ba>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <UART_SetConfig+0x19a>
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d008      	beq.n	8004702 <UART_SetConfig+0x1aa>
 80046f0:	e00f      	b.n	8004712 <UART_SetConfig+0x1ba>
 80046f2:	2300      	movs	r3, #0
 80046f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f8:	e06d      	b.n	80047d6 <UART_SetConfig+0x27e>
 80046fa:	2302      	movs	r3, #2
 80046fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004700:	e069      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004702:	2304      	movs	r3, #4
 8004704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004708:	e065      	b.n	80047d6 <UART_SetConfig+0x27e>
 800470a:	2308      	movs	r3, #8
 800470c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004710:	e061      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004712:	2310      	movs	r3, #16
 8004714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004718:	e05d      	b.n	80047d6 <UART_SetConfig+0x27e>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a4b      	ldr	r2, [pc, #300]	; (800484c <UART_SetConfig+0x2f4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d125      	bne.n	8004770 <UART_SetConfig+0x218>
 8004724:	4b46      	ldr	r3, [pc, #280]	; (8004840 <UART_SetConfig+0x2e8>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800472e:	2bc0      	cmp	r3, #192	; 0xc0
 8004730:	d016      	beq.n	8004760 <UART_SetConfig+0x208>
 8004732:	2bc0      	cmp	r3, #192	; 0xc0
 8004734:	d818      	bhi.n	8004768 <UART_SetConfig+0x210>
 8004736:	2b80      	cmp	r3, #128	; 0x80
 8004738:	d00a      	beq.n	8004750 <UART_SetConfig+0x1f8>
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d814      	bhi.n	8004768 <UART_SetConfig+0x210>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <UART_SetConfig+0x1f0>
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d008      	beq.n	8004758 <UART_SetConfig+0x200>
 8004746:	e00f      	b.n	8004768 <UART_SetConfig+0x210>
 8004748:	2300      	movs	r3, #0
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474e:	e042      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004750:	2302      	movs	r3, #2
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004756:	e03e      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004758:	2304      	movs	r3, #4
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475e:	e03a      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004760:	2308      	movs	r3, #8
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004766:	e036      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476e:	e032      	b.n	80047d6 <UART_SetConfig+0x27e>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a30      	ldr	r2, [pc, #192]	; (8004838 <UART_SetConfig+0x2e0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d12a      	bne.n	80047d0 <UART_SetConfig+0x278>
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <UART_SetConfig+0x2e8>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004788:	d01a      	beq.n	80047c0 <UART_SetConfig+0x268>
 800478a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800478e:	d81b      	bhi.n	80047c8 <UART_SetConfig+0x270>
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004794:	d00c      	beq.n	80047b0 <UART_SetConfig+0x258>
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479a:	d815      	bhi.n	80047c8 <UART_SetConfig+0x270>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <UART_SetConfig+0x250>
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a4:	d008      	beq.n	80047b8 <UART_SetConfig+0x260>
 80047a6:	e00f      	b.n	80047c8 <UART_SetConfig+0x270>
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ae:	e012      	b.n	80047d6 <UART_SetConfig+0x27e>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047b6:	e00e      	b.n	80047d6 <UART_SetConfig+0x27e>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047be:	e00a      	b.n	80047d6 <UART_SetConfig+0x27e>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c6:	e006      	b.n	80047d6 <UART_SetConfig+0x27e>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ce:	e002      	b.n	80047d6 <UART_SetConfig+0x27e>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a17      	ldr	r2, [pc, #92]	; (8004838 <UART_SetConfig+0x2e0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	f040 80a8 	bne.w	8004932 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d834      	bhi.n	8004854 <UART_SetConfig+0x2fc>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <UART_SetConfig+0x298>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004815 	.word	0x08004815
 80047f4:	08004855 	.word	0x08004855
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004823 	.word	0x08004823
 8004804:	08004855 	.word	0x08004855
 8004808:	08004855 	.word	0x08004855
 800480c:	08004855 	.word	0x08004855
 8004810:	0800482b 	.word	0x0800482b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004814:	f7ff fbee 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004818:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800481a:	e021      	b.n	8004860 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <UART_SetConfig+0x2f8>)
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004820:	e01e      	b.n	8004860 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004822:	f7ff fb79 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004828:	e01a      	b.n	8004860 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004830:	e016      	b.n	8004860 <UART_SetConfig+0x308>
 8004832:	bf00      	nop
 8004834:	cfff69f3 	.word	0xcfff69f3
 8004838:	40008000 	.word	0x40008000
 800483c:	40013800 	.word	0x40013800
 8004840:	40021000 	.word	0x40021000
 8004844:	40004400 	.word	0x40004400
 8004848:	40004800 	.word	0x40004800
 800484c:	40004c00 	.word	0x40004c00
 8004850:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800485e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 812a 	beq.w	8004abc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	4a9e      	ldr	r2, [pc, #632]	; (8004ae8 <UART_SetConfig+0x590>)
 800486e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004872:	461a      	mov	r2, r3
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	fbb3 f3f2 	udiv	r3, r3, r2
 800487a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	429a      	cmp	r2, r3
 800488a:	d305      	bcc.n	8004898 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800489e:	e10d      	b.n	8004abc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	2200      	movs	r2, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	60fa      	str	r2, [r7, #12]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	4a8e      	ldr	r2, [pc, #568]	; (8004ae8 <UART_SetConfig+0x590>)
 80048ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2200      	movs	r2, #0
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048c2:	f7fb fca9 	bl	8000218 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	020b      	lsls	r3, r1, #8
 80048d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048dc:	0202      	lsls	r2, r0, #8
 80048de:	6979      	ldr	r1, [r7, #20]
 80048e0:	6849      	ldr	r1, [r1, #4]
 80048e2:	0849      	lsrs	r1, r1, #1
 80048e4:	2000      	movs	r0, #0
 80048e6:	460c      	mov	r4, r1
 80048e8:	4605      	mov	r5, r0
 80048ea:	eb12 0804 	adds.w	r8, r2, r4
 80048ee:	eb43 0905 	adc.w	r9, r3, r5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	469a      	mov	sl, r3
 80048fa:	4693      	mov	fp, r2
 80048fc:	4652      	mov	r2, sl
 80048fe:	465b      	mov	r3, fp
 8004900:	4640      	mov	r0, r8
 8004902:	4649      	mov	r1, r9
 8004904:	f7fb fc88 	bl	8000218 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004916:	d308      	bcc.n	800492a <UART_SetConfig+0x3d2>
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491e:	d204      	bcs.n	800492a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e0c8      	b.n	8004abc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004930:	e0c4      	b.n	8004abc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493a:	d167      	bne.n	8004a0c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800493c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004940:	2b08      	cmp	r3, #8
 8004942:	d828      	bhi.n	8004996 <UART_SetConfig+0x43e>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <UART_SetConfig+0x3f4>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004971 	.word	0x08004971
 8004950:	08004979 	.word	0x08004979
 8004954:	08004981 	.word	0x08004981
 8004958:	08004997 	.word	0x08004997
 800495c:	08004987 	.word	0x08004987
 8004960:	08004997 	.word	0x08004997
 8004964:	08004997 	.word	0x08004997
 8004968:	08004997 	.word	0x08004997
 800496c:	0800498f 	.word	0x0800498f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004970:	f7ff fb40 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004976:	e014      	b.n	80049a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004978:	f7ff fb52 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 800497c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800497e:	e010      	b.n	80049a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004980:	4b5a      	ldr	r3, [pc, #360]	; (8004aec <UART_SetConfig+0x594>)
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004984:	e00d      	b.n	80049a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004986:	f7ff fac7 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 800498a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800498c:	e009      	b.n	80049a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004994:	e005      	b.n	80049a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8089 	beq.w	8004abc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <UART_SetConfig+0x590>)
 80049b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049bc:	005a      	lsls	r2, r3, #1
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	441a      	add	r2, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	2b0f      	cmp	r3, #15
 80049d4:	d916      	bls.n	8004a04 <UART_SetConfig+0x4ac>
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d212      	bcs.n	8004a04 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f023 030f 	bic.w	r3, r3, #15
 80049e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	8bfb      	ldrh	r3, [r7, #30]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	8bfa      	ldrh	r2, [r7, #30]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	e05b      	b.n	8004abc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a0a:	e057      	b.n	8004abc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d828      	bhi.n	8004a66 <UART_SetConfig+0x50e>
 8004a14:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0x4c4>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a57 	.word	0x08004a57
 8004a30:	08004a67 	.word	0x08004a67
 8004a34:	08004a67 	.word	0x08004a67
 8004a38:	08004a67 	.word	0x08004a67
 8004a3c:	08004a5f 	.word	0x08004a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a40:	f7ff fad8 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a46:	e014      	b.n	8004a72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7ff faea 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a4e:	e010      	b.n	8004a72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b26      	ldr	r3, [pc, #152]	; (8004aec <UART_SetConfig+0x594>)
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a54:	e00d      	b.n	8004a72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7ff fa5f 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8004a5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a5c:	e009      	b.n	8004a72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a64:	e005      	b.n	8004a72 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a70:	bf00      	nop
    }

    if (pclk != 0U)
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d021      	beq.n	8004abc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <UART_SetConfig+0x590>)
 8004a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a82:	461a      	mov	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	441a      	add	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b0f      	cmp	r3, #15
 8004aa0:	d909      	bls.n	8004ab6 <UART_SetConfig+0x55e>
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d205      	bcs.n	8004ab6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60da      	str	r2, [r3, #12]
 8004ab4:	e002      	b.n	8004abc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004ad8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3730      	adds	r7, #48	; 0x30
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08005a50 	.word	0x08005a50
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bee:	d10a      	bne.n	8004c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c44:	f7fd fd1e 	bl	8002684 <HAL_GetTick>
 8004c48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d10e      	bne.n	8004c76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f82f 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e025      	b.n	8004cc2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d10e      	bne.n	8004ca2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f819 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e00f      	b.n	8004cc2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b09c      	sub	sp, #112	; 0x70
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cda:	e0a9      	b.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	f000 80a5 	beq.w	8004e30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fd fccd 	bl	8002684 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x32>
 8004cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d140      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d10:	667b      	str	r3, [r7, #100]	; 0x64
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e6      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	663b      	str	r3, [r7, #96]	; 0x60
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e069      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d051      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9a:	d149      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e6      	bne.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	613b      	str	r3, [r7, #16]
   return(result);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004df8:	623a      	str	r2, [r7, #32]
 8004dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	69f9      	ldr	r1, [r7, #28]
 8004dfe:	6a3a      	ldr	r2, [r7, #32]
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e010      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	f43f af46 	beq.w	8004cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3770      	adds	r7, #112	; 0x70
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e027      	b.n	8004ec0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	; 0x24
 8004e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e02d      	b.n	8004f40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2224      	movs	r2, #36	; 0x24
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f84f 	bl	8004fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e02d      	b.n	8004fbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2224      	movs	r2, #36	; 0x24
 8004f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f811 	bl	8004fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d108      	bne.n	8004fe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fe4:	e031      	b.n	800504a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fea:	2308      	movs	r3, #8
 8004fec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	0e5b      	lsrs	r3, r3, #25
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	0f5b      	lsrs	r3, r3, #29
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800500e:	7bbb      	ldrb	r3, [r7, #14]
 8005010:	7b3a      	ldrb	r2, [r7, #12]
 8005012:	4911      	ldr	r1, [pc, #68]	; (8005058 <UARTEx_SetNbDataToProcess+0x94>)
 8005014:	5c8a      	ldrb	r2, [r1, r2]
 8005016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800501a:	7b3a      	ldrb	r2, [r7, #12]
 800501c:	490f      	ldr	r1, [pc, #60]	; (800505c <UARTEx_SetNbDataToProcess+0x98>)
 800501e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005020:	fb93 f3f2 	sdiv	r3, r3, r2
 8005024:	b29a      	uxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	7b7a      	ldrb	r2, [r7, #13]
 8005030:	4909      	ldr	r1, [pc, #36]	; (8005058 <UARTEx_SetNbDataToProcess+0x94>)
 8005032:	5c8a      	ldrb	r2, [r1, r2]
 8005034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005038:	7b7a      	ldrb	r2, [r7, #13]
 800503a:	4908      	ldr	r1, [pc, #32]	; (800505c <UARTEx_SetNbDataToProcess+0x98>)
 800503c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800503e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	08005a68 	.word	0x08005a68
 800505c:	08005a70 	.word	0x08005a70

08005060 <_ZdlPvj>:
 8005060:	f000 b800 	b.w	8005064 <_ZdlPv>

08005064 <_ZdlPv>:
 8005064:	f000 b824 	b.w	80050b0 <free>

08005068 <__libc_init_array>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4d0d      	ldr	r5, [pc, #52]	; (80050a0 <__libc_init_array+0x38>)
 800506c:	4c0d      	ldr	r4, [pc, #52]	; (80050a4 <__libc_init_array+0x3c>)
 800506e:	1b64      	subs	r4, r4, r5
 8005070:	10a4      	asrs	r4, r4, #2
 8005072:	2600      	movs	r6, #0
 8005074:	42a6      	cmp	r6, r4
 8005076:	d109      	bne.n	800508c <__libc_init_array+0x24>
 8005078:	4d0b      	ldr	r5, [pc, #44]	; (80050a8 <__libc_init_array+0x40>)
 800507a:	4c0c      	ldr	r4, [pc, #48]	; (80050ac <__libc_init_array+0x44>)
 800507c:	f000 f882 	bl	8005184 <_init>
 8005080:	1b64      	subs	r4, r4, r5
 8005082:	10a4      	asrs	r4, r4, #2
 8005084:	2600      	movs	r6, #0
 8005086:	42a6      	cmp	r6, r4
 8005088:	d105      	bne.n	8005096 <__libc_init_array+0x2e>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005090:	4798      	blx	r3
 8005092:	3601      	adds	r6, #1
 8005094:	e7ee      	b.n	8005074 <__libc_init_array+0xc>
 8005096:	f855 3b04 	ldr.w	r3, [r5], #4
 800509a:	4798      	blx	r3
 800509c:	3601      	adds	r6, #1
 800509e:	e7f2      	b.n	8005086 <__libc_init_array+0x1e>
 80050a0:	08005a80 	.word	0x08005a80
 80050a4:	08005a80 	.word	0x08005a80
 80050a8:	08005a80 	.word	0x08005a80
 80050ac:	08005a88 	.word	0x08005a88

080050b0 <free>:
 80050b0:	4b02      	ldr	r3, [pc, #8]	; (80050bc <free+0xc>)
 80050b2:	4601      	mov	r1, r0
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f000 b80b 	b.w	80050d0 <_free_r>
 80050ba:	bf00      	nop
 80050bc:	20000024 	.word	0x20000024

080050c0 <memset>:
 80050c0:	4402      	add	r2, r0
 80050c2:	4603      	mov	r3, r0
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d100      	bne.n	80050ca <memset+0xa>
 80050c8:	4770      	bx	lr
 80050ca:	f803 1b01 	strb.w	r1, [r3], #1
 80050ce:	e7f9      	b.n	80050c4 <memset+0x4>

080050d0 <_free_r>:
 80050d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050d2:	2900      	cmp	r1, #0
 80050d4:	d044      	beq.n	8005160 <_free_r+0x90>
 80050d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050da:	9001      	str	r0, [sp, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f1a1 0404 	sub.w	r4, r1, #4
 80050e2:	bfb8      	it	lt
 80050e4:	18e4      	addlt	r4, r4, r3
 80050e6:	f000 f83f 	bl	8005168 <__malloc_lock>
 80050ea:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <_free_r+0x94>)
 80050ec:	9801      	ldr	r0, [sp, #4]
 80050ee:	6813      	ldr	r3, [r2, #0]
 80050f0:	b933      	cbnz	r3, 8005100 <_free_r+0x30>
 80050f2:	6063      	str	r3, [r4, #4]
 80050f4:	6014      	str	r4, [r2, #0]
 80050f6:	b003      	add	sp, #12
 80050f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050fc:	f000 b83a 	b.w	8005174 <__malloc_unlock>
 8005100:	42a3      	cmp	r3, r4
 8005102:	d908      	bls.n	8005116 <_free_r+0x46>
 8005104:	6825      	ldr	r5, [r4, #0]
 8005106:	1961      	adds	r1, r4, r5
 8005108:	428b      	cmp	r3, r1
 800510a:	bf01      	itttt	eq
 800510c:	6819      	ldreq	r1, [r3, #0]
 800510e:	685b      	ldreq	r3, [r3, #4]
 8005110:	1949      	addeq	r1, r1, r5
 8005112:	6021      	streq	r1, [r4, #0]
 8005114:	e7ed      	b.n	80050f2 <_free_r+0x22>
 8005116:	461a      	mov	r2, r3
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	b10b      	cbz	r3, 8005120 <_free_r+0x50>
 800511c:	42a3      	cmp	r3, r4
 800511e:	d9fa      	bls.n	8005116 <_free_r+0x46>
 8005120:	6811      	ldr	r1, [r2, #0]
 8005122:	1855      	adds	r5, r2, r1
 8005124:	42a5      	cmp	r5, r4
 8005126:	d10b      	bne.n	8005140 <_free_r+0x70>
 8005128:	6824      	ldr	r4, [r4, #0]
 800512a:	4421      	add	r1, r4
 800512c:	1854      	adds	r4, r2, r1
 800512e:	42a3      	cmp	r3, r4
 8005130:	6011      	str	r1, [r2, #0]
 8005132:	d1e0      	bne.n	80050f6 <_free_r+0x26>
 8005134:	681c      	ldr	r4, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	6053      	str	r3, [r2, #4]
 800513a:	4421      	add	r1, r4
 800513c:	6011      	str	r1, [r2, #0]
 800513e:	e7da      	b.n	80050f6 <_free_r+0x26>
 8005140:	d902      	bls.n	8005148 <_free_r+0x78>
 8005142:	230c      	movs	r3, #12
 8005144:	6003      	str	r3, [r0, #0]
 8005146:	e7d6      	b.n	80050f6 <_free_r+0x26>
 8005148:	6825      	ldr	r5, [r4, #0]
 800514a:	1961      	adds	r1, r4, r5
 800514c:	428b      	cmp	r3, r1
 800514e:	bf04      	itt	eq
 8005150:	6819      	ldreq	r1, [r3, #0]
 8005152:	685b      	ldreq	r3, [r3, #4]
 8005154:	6063      	str	r3, [r4, #4]
 8005156:	bf04      	itt	eq
 8005158:	1949      	addeq	r1, r1, r5
 800515a:	6021      	streq	r1, [r4, #0]
 800515c:	6054      	str	r4, [r2, #4]
 800515e:	e7ca      	b.n	80050f6 <_free_r+0x26>
 8005160:	b003      	add	sp, #12
 8005162:	bd30      	pop	{r4, r5, pc}
 8005164:	2000093c 	.word	0x2000093c

08005168 <__malloc_lock>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__malloc_lock+0x8>)
 800516a:	f000 b809 	b.w	8005180 <__retarget_lock_acquire_recursive>
 800516e:	bf00      	nop
 8005170:	20000940 	.word	0x20000940

08005174 <__malloc_unlock>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__malloc_unlock+0x8>)
 8005176:	f000 b804 	b.w	8005182 <__retarget_lock_release_recursive>
 800517a:	bf00      	nop
 800517c:	20000940 	.word	0x20000940

08005180 <__retarget_lock_acquire_recursive>:
 8005180:	4770      	bx	lr

08005182 <__retarget_lock_release_recursive>:
 8005182:	4770      	bx	lr

08005184 <_init>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr

08005190 <_fini>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr
